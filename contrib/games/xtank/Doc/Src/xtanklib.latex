\documentstyle{article}

\makeindex

\input{header.latex}

\title{How to Write an \xtank\ Robot Program}
\author{Terry Donahue \and Dan Schmidt}
\date{\today}

%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin {document}

\maketitle

\section{Introduction}

\xtanklib\ is the programmer's interface to \xtank.  Through the
use of the functions in \xtanklib, a program has complete control over
an \xtank\ vehicle.  Since there are a large number of functions in \xtanklib,
they are organized into the following groups:

\begin{itemize}
  \item Movement
  \item Turrets
  \item Weapons
  \item Armor
  \item Fuel
  \item Heat
  \item Specials

  \item Environment
  \item Discs
  \item Messages

  \item Miscellaneous
\end{itemize}

\section{Programming Notes}

\begin{itemize}
  \item Programs should be stored in \verb|/mit/games/src/vax/xtank/Programs|.
	The line \\
	\verb|#include /mit/games/src/vax/xtank/Programs/xtanklib.h| \\
        must appear at the top of your program.

  \item Your program filename must have a \verb~.c~ extension, 
        e.g. \verb~<program name>.c~.

  \item All procedures and global variables in your program should be 
        prefixed with your program name.

  \item Your main procedure must be called \verb~<program name>_main()~.
        Make sure your main procedure never returns.  This can easily be
        accomplished by using a big \verb~while(1)~ or \verb~for(;;)~ loop.

  \item You may want to use static variables instead of global ones.
        Static variables are limited in scope to the source file in
         which they are declared, so you don't have to worry about what names
        you use.

  \item If you use {\em any} static or global variables in your \xtank\ program,
        you won't be able to use it in two different vehicles in one battle
        (i.e. running it against itself).  Every vehicle using your \xtank\
        program will be using the same global and static variables.

  \item Global and static variables do not get reinitialized each battle,
        so initialize them yourself, at the start of your main function.

  \item All the numbering done by \xtank\ begins with 0, not 1.  For example,
        the first turret is numbered 0, and the third turret is numbered
        2.  Do not forget this.

  \item If your program uses any math functions, such as atan2, sin, or cos,
        be sure to \verb~#include <math.h>~.  The math library is automatically
        linked in by \xtank.

  \item Because of the way \xtank\ does the multi-tasking between \xtank\ 
        programs
        during a battle, there is a limit to the amount of stack
        space  your program
        can use.  Your program should not have more than 18K of local variable
        space.  For most programs this is not a problem.

  \item Your object (\verb~.o~) file should not be larger than 32K.  If it
        is, \xtank\ will load it improperly.

\end{itemize}

\section{Program Format}

A necessary part of every \xtank\ program is the \verb~Prog_desc~ structure.
\xtank\ uses this structure to find out relevant information about your
program.

{\small
\begin{tabbing}
\verb~Foo foo foo foo foo~ \= \kill
\verb~typedef struct {~  \\
\verb~  char *name;~     \> {\em name of program} \\
\verb~  char *type;~     \> {\em type of program} \\
\verb~  char *vehicle;~  \> {\em name of default vehicle} \\
\verb~  char *strategy;~ \> {\em description of strategy} \\
\verb~  char *author;~   \> {\em name of author} \\
\verb~  int skill;~      \> {\em ability rating of the program (0--10)} \\
\verb~  int (*func)();~  \> {\em name of main function} \\
\verb~  char *code;~     \> {\em used internally by \xtank} \\
\verb~} Prog_desc;~      \\
\end{tabbing}
}

\begin{itemize}
  \vitem{name} is the name of the program, which might be more descriptive
than the name of the file itself.  Only the first 18 characters of it will
be used by \xtank.

  \vitem{type} is the type of the program.  \xtank\ recognizes the following
strings, but yours is not required to be one of them.

\begin{itemize}
  \item[\bf combat]   fights opponents to the death.
  \item[\bf war]      fights opponents in battle scenarios.  Generally these
                  involve taking over territory as well as killing other
                  tanks.
  \item[\bf ultimate] plays the ``ultimate'' game, in which teams fight to
                  move a disc into the opponents' goal.
  \item[\bf capture]  plays the ``capture'' game, in which teams fight to
                  gain control of the opponents' disc and bring it
                  to their territory.
  \item[\bf race]     drives through mazes as quickly as possible.
\end{itemize}

  \vitem{vehicle} is the default vehicle name.  It should be present in
the default Vehicles directory.

  \vitem{strategy} describes the program's strategy in a few sentences.

  \vitem{author} is the name of the author of the program.

  \vitem{skill} is the skill of the program for its particular type.
Most programs should be somwhere from 2 to 8.  Save 0 and 1 for the truly 
awful, and 9 or 10 for the spectacular.

  \vitem{func} is the name of the main procedure of the program,
i.e. \verb~<program name>_main~.

  \vitem{code} is used by \xtank\ to store your program.  It is initialized
for you and you should not modify it.

\end{itemize}

\subsection*{The Smallest Possible \xtank\ Program}

The only necessary parts of an \xtank\ program are the \verb~Prog_desc~
structure and a main function which has an infinite loop.  The following
program is perfectly valid, although not too useful.

{\small
\begin{verbatim}
/*
** nothing.c
*/

#include "/mit/games/src/vax/xtank/Programs/xtanklib.h"

extern int nothing_main();

Prog_desc nothing_prog = {
  "nothing",
  "war",
  "hexo#1",
  "Just sits there",
  "Terry Donahue",
  1,
  nothing_main
}

nothing_main()
{
  while(1) {
    nothing_wait();
  }
}

nothing_wait()
{
  done();
}
\end{verbatim}
}

\section{Coordinate Systems}

The coordinate system in \xtank\ has x increasing to the right,
and y increasing {\em down} the screen, {\em not up} as in most 
coordinate systems.  Note that this makes angles measure clockwise.

\setlength{\unitlength}{.5in}

\vspace{.5in}

\begin{minipage}[t]{3in}
\begin{picture}(3,3)(0,-3)
\put(0,0){\vector(1,0){3}}
\put(0,0){\vector(0,-1){3}}
\put(3,-.2){X}
\put(.2,-3){Y}
\end{picture}
\end{minipage}
\begin{minipage}[t]{3in}
\begin{picture}(3,3)(-1.5,-1.5)
\put(0,0){\vector(1,0){1.5}}
\put(0,0){\vector(-1,0){1.5}}
\put(0,0){\vector(0,1){1.5}}
\put(0,0){\vector(0,-1){1.5}}
\put(1.5,-.2){0}
\put(.2,-1.5){$\frac{\pi}{2}$}
\put(-1.5,-.2){$\pi$}
\put(.2,1.5){$\frac{3 \pi}{2}$}
\end{picture}
\end{minipage}

\vspace{.5in}

Coordinates are used for screen coordinates (pixels)
and maze coordinates (boxes).

Any angle sent to \xtanklib\ will be converted to the above format.
Any angle output by \xtanklib\ will be in the range  
$0 \leq \mbox{angle} < 2\pi$.

\section{Constants}

The following constants have been predefined in {\tt xtanklib.h}.

\begin{itemize}
  \vitem{BAD\_VALUE} returned by many functions to indicate that a value
passed to it was out of range or inappropriate.
  \vitem{GRID\_WIDTH} the maximum width of the maze (in boxes).
  \vitem{GRID\_HEIGHT} the maximum height of the maze (in boxes).
  \vitem{BOX\_WIDTH} the width of each box (in pixels).
  \vitem{BOX\_HEIGHT} the height of each box (in pixels).
  \vitem{SCREEN\_WIDTH} the width of the visible screen (in pixels).  Your
vehicle cannot see things that are off its screen.  It is always considered
to be at the center of its screen.  The screen width and height depend
on your hardware.
  \vitem{SCREEN\_HEIGHT} the height of the visible screen (in pixels).
  \vitem{MAX\_DATA\_LEN} the maximum number of characters in a text message.
Currently this is 31.
  \vitem{MAX\_BLIPS} the maximum number of blips that \xtank\ will tell
you about when you get blip information.  
  \vitem{MAX\_VEHICLES} the maximum number of vehicles that \xtank\ will tell
you about when you get vehicle information.
  \vitem{MAX\_BULLETS} the maximum number of bullets that \xtank\ will tell
you about when you get bullet information.
  \vitem{MAX\_DISCS} the maximum number of discs that \xtank\ will tell
you about when you get disc information.
  \vitem{MAX\_LANDMARKS} the maximum number of landmarks that \xtank\ will tell
you about when you get landmark information.
\end{itemize}
{\bf Note:} when you ask for information from \xtank, the array of structures
you give it {\em must} be large enough to hold the maximum number of objects
xtank might tell you about.  Otherwise you may get a segmentation 
violation.  For example, when calling \verb~get_landmarks()~, the
\verb~Landmark_info[]~ you pass to it must have at least \verb~MAX_LANDMARKS~
elements.

Also, you need not worry about losing information because your program
can ``only'' see \verb~MAX_<whatever>~ items.  These constants are designed
to be large enough so that you will never lose information.  For example,
there will never be more than \verb~MAX_BULLETS~ bullets on the screen at
one time, so there will never be a bullet on your screen which you are not
aware of. 

\section{Types}

There are many different names for an \verb~int~ in an \xtank\ program.
This is to make programs clearer: an \verb~int~ standing for a weapon type
should not be confused with an \verb~int~ standing for a side of a vehicle.
All of these types are listed in this section, along with the values they
can take on.  It is {\em very bad practice} to directly use these values,
as they are subject to change; they are included for the curious.

\setlength{\parskip}{1em}

\verb~TurretNum~: Used to specify a turret.
\xx
\begin{verbatim}
  0 TURRET1
  1 TURRET2
  2 TURRET3
\end{verbatim}

\verb~WeaponError~: Returned by \verb~fire_weapon()~ to explain the
result of firing the weapon.
\xx
\begin{tabbing}
\verb~  0 FIRED       ~ \= {\em the weapon fired successfully} \\
\verb~  1 RELOADING~    \> {\em the weapon is busy reloading} \\
\verb~  2 NO_AMMO~      \> {\em the weapon is out of ammo} \\
\verb~  3 WEAPON_OFF~   \> {\em the weapon is turned off} \\
\verb~  4 TOO_HOT~      \> {\em the vehicle is too hot to fire any weapons} \\
\end{tabbing}

\verb~WeaponType~: The various types of weapons.
\xx
\begin{verbatim}
  0 LMG      3 LRIFLE     6 LCANNON     9 LROCKET     12 ACID     15 SEEKER
  1 MG       4 RIFLE      7 CANNON     10 ROCKET      13 FLAME    16 SLICK
  2 HMG      5 HRIFLE     8 HCANNON    11 HROCKET     14 MINE
\end{verbatim}

\verb~MountLocation~: The places where a weapon may be mounted.
\xx
\begin{verbatim}
  0 MOUNT_TURRET1     3 MOUNT_FRONT
  1 MOUNT_TURRET2     4 MOUNT_BACK
  2 MOUNT_TURRET3     5 MOUNT_LEFT
                      6 MOUNT_RIGHT
\end{verbatim}

\verb~Side~: The sides of the vehicle on which armor may be placed.
\xx
\begin{verbatim}
  0 FRONT     2 LEFT       4 TOP
  1 BACK      3 RIGHT      5 BOTTOM
\end{verbatim}

\verb~Opcode~: The kinds of messages a vehicle can send.
\xx
\begin{tabbing}
\verb~  0 OP_LOCATION  ~ \= {\em announce your location} \\
\verb~  1 OP_GOTO~ \> {\em tell a vehicle to go to a certain square} \\
\verb~  2 OP_FOLLOW~ \> {\em tell a vehicle to follow another vehicle} \\
\verb~  3 OP_HELP~ \> {\em ask for help} \\
\verb~  4 OP_ATTACK~ \> {\em tell a vehicle to attack another vehicle} \\
\verb~  5 OP_OPEN~ \> {\em ask to be thrown a disc} \\
\verb~  6 OP_THROW~ \> {\em announce a disc throw} \\
\verb~  7 OP_CAUGHT~ \> {\em announce that you've caught a disc} \\
\verb~  8 OP_ACK~ \> {\em acknowledge another message} \\
\verb~  9 OP_TEXT~ \> {\em send text} \\
\verb~ 10 OP_DEATH~ \> {\em announce the death of a vehicle} \\
\end{tabbing}

\verb~DiscSpin~: Used to select which way a disc is spinning around
the vehicle.
\xx
\begin{verbatim}
 -1 COUNTERCLOCKWISE
  1 CLOCKWISE
  2 TOGGLE
\end{verbatim}

\verb~Wall~: Passed to \verb~wall()~ to ask if there 
is a wall on that side of a given box.
\xx
\begin{verbatim}
  0 NORTH     2 SOUTH
  1 EAST      3 WEST
\end{verbatim}

\verb~LandmarkType~: The various types of landmarks.
\xx
\begin{verbatim}
  0 NORMAL     4 GOAL          8 SCROLL_E     12 SCROLL_W 
  1 FUEL       5 OUTPOST       9 SCROLL_SE    13 SCROLL_NW
  2 AMMO       6 SCROLL_N     10 SCROLL_S     14 SLIP
  3 ARMOR      7 SCROLL_NE    11 SCROLL_SW    15 SLOW
\end{verbatim}

\verb~SpecialType~: The various types of specials.
\xx
\begin{verbatim}
  0 CONSOLE
  1 MAPPER
  2 RADAR
\end{verbatim}

\setlength{\parskip}{0ex}

There are a few other types that are used in an \xtank\ program to 
distinguish the roles of certain variables.  They are:
\begin{itemize}
  \vitem{Angle} an angle, in radians.  When returned from an \xtanklib\
function, it will be from 0 to $2\pi$.  If a value outside of this range
is passed in, it will be converted to this range.
It is equivalent to a float.
  \vitem{WeaponNum} an integer from 0 to \verb~num_weapons() - 1~ representing
the weapon in that slot.
  \vitem{Boolean} an integer which can either be \verb~TRUE~ (1) or
\verb~FALSE~ (0).
  \vitem{ID} an integer specifying the ID number of a vehicle.  When used
in message passing, it can also be used to specify all vehicles on a team,
or all vehicles in the maze.  See Section~\ref{Messages} 
(page~\pageref{Messages}) for more information.
  \vitem{Team} an integer specifying the team a vehicle is on.
\end{itemize}

\section{Structures}

In some cases, \xtanklib\ functions are passed pointers to structures.
All the structures which are used in \xtanklib\ are listed here.

\begin{small}
\begin{tabbing}
\verb~  int grid_x, grid_y;     ~ \= \kill
\verb~typedef struct {~ \\
\verb~  int grid_x, grid_y;~ \> {\em box within the maze} \\
\verb~  int box_x, box_y;~   \> {\em location within that box} \\ 
\verb~  int x, y;~           \> {\em location in pixels from origin of maze} \\
\> {\em (e.g. \verb|x| = \verb|grid_x| * \verb|BOX_WIDTH| + \verb|box_x|)}
\verb~} Location;~ \\
\end{tabbing}

\begin{tabbing}
\verb~  LandmarkType type;     ~  \= \kill
\verb~typedef struct {~ \\
\verb~  LandmarkType type;~  \> {\em code for landmark type} \\
\verb~  int x,y;~     \> {\em box within the maze which the landmark is in } \\
\verb~} Landmark_info;~ \\
\end{tabbing}

\begin{tabbing}
\verb~typedef struct {        ~ \= \\
\verb~  int x,y;~         \> {\em box within the maze which the blip is in} \\
\verb~} Blip_info;~ \\
\end{tabbing}

\begin{tabbing}
\verb~  float xspeed, yspeed;     ~ \= \kill
\verb~typedef struct {~ \\
\verb~  Location loc;~         \> {\em where the vehicle is} \\
\verb~  float xspeed, yspeed;~ \> {\em its speed in the x and y directions} \\
\verb~  Angle heading;~        \> {\em its heading (in radians)} \\
\verb~  ID id;~             \> {\em a unique identifier for this vehicle} \\ 
\verb~  Team team;~             \> {\em which team it is on } \\
\verb~  BodyType body;~        \> {\em what type of body it has} \\ 
\verb~} Vehicle_info;~ \\
\end{tabbing}

\begin{tabbing}
\verb~  MountLocation mount;     ~ \= \kill
\verb~typedef struct {~ \\
\verb~  WeaponType type;~     \> {\em the type of weapon } \\
\verb~  MountLocation mount;~ \> {\em where it's mounted } \\
\verb~  int damage;~          \> {\em how much damage each bullet does } \\
\verb~  int heat;~            \> {\em how much your heat is increased when the
                                      weapon is fired }\\
\verb~  int range;~           \> {\em range of the weapon in pixels} \\
\verb~  int reload;~          \> {\em how many frames it takes to reload the
                                      weapon between shots } \\
\verb~  int max_ammo;~        \> {\em the bullet capacity of the weapon } \\
\verb~  int ammo_speed;~      \> {\em speed of the bullets } \\
\verb~} Weapon_info;~ \\
\end{tabbing}

\begin{tabbing}
\verb~  float xspeed, yspeed;     ~ \= \kill
\verb~typedef struct {~ \\
\verb~  Location loc;~         \> {\em where the bullet is } \\
\verb~  float xspeed, yspeed;~ \> {\em its speed in the x and y directions} \\
\verb~  WeaponType type;~    \> {\em what type of weapon it was fired from} \\ 
\verb~} Bullet_info;~ \\
\end{tabbing}

\begin{tabbing}
\verb~  float xspeed, yspeed;     ~ \= \kill
\verb~typedef struct {~ \\
\verb~  Location loc;~         \> {\em where the disc is } \\
\verb~  float xspeed, yspeed;~ \> {\em its speed in the x and y directions} \\
\verb~  ID owner;~            \> {\em who it is orbiting,
   \verb~NO_OWNER~ if it is unowned} \\
\verb~  Angle angle;~          \> {\em what angle it is at relative to its
owner} \\
\verb~  DiscSpin spin;~        \> {\em which way it is spinning around its
owner} \\
\verb~} Disc_info;~ \\
\end{tabbing}

\begin{tabbing}
\verb~  int outpost_strength;     ~ \= \kill
\verb~typedef struct {~ \\
\verb~  Boolean ricochet;~ \> {\em whether or not bullets can bounce 
                                   off walls} \\
\verb~  Boolean no_wear;~ \> {\em whether or not vehicles take damage and
                                  use up fuel } \\
\verb~  Game game;~ \> {\em what type of game is being played} \\
\verb~  int winning_score;~ \> {\em how many points a vehicle needs 
                             to win the game} \\
\verb~  int outpost_strength;~ \> {\em the strength of outposts (1--10)} \\
\verb~  float scroll_speed;~ \> {\em the speed of scrolling squares} \\
\verb~  float box_slowdown;~ \> {\em how much slow squares slow you down} \\
\verb~  float disc_friction;~ \> {\em how quickly discs will 
                                  slow down if unowned} \\
\verb~  float owner_slowdown;~ \> {\em how much owning a disc will 
                                   slow you down} \\
\verb~} Settings_info;~ \\
\end{tabbing}

\begin{tabbing}
\verb~unsigned char data[MAX_DATA_LEN];     ~ \= \kill
\verb~typedef struct {~ \\
\verb~  ID sender;~ \> {\em vehicle number of the sender} \\
\verb~  Team char sender_team;~ \> {\em team number of the sender} \\
\verb~  ID recipient;~ \> {\em vehicle number of the recipient} \\
\verb~  Opcode opcode;~ \> {\em the type of message} \\
\verb~  unsigned char data[MAX_DATA_LEN];~ \> {\em the message itself} \\
\verb~} Message;~ \\
\end{tabbing} 
\end{small}

\section{Settings}

This is a more detailed description of the exact effects some members
of the \verb~Settings_info~ structure.

\begin{itemize}
  \vitem{outpost\_strength} Ranges from 0 to 10.  It determines how many
and what types of bullets will be fired by an outpost.  A value of 0 means
outposts will not fire.  A value of 10 means 5 heavy rocket launchers will
be fired at each vehicle in the outpost's box per frame.
  \vitem{scroll\_speed} Ranges from 0.0 to 10.0.  When your vehicle is in
a scroll square, its speed will be changed by this much in the direction
of the scroll square.  For example, if you are heading north at speed 10,
and you're in a southwards scroll square of speed 10, you will not move at all.
  \vitem{box\_slowdown} Ranges from 0.5 to 1.0.  It determines
the fraction of your speed you will retain when moving through a slow
square.  For example, if you are heading north at speed 10, and you're in
a slow square with a slowdown of 0.6, you will only move at speed 6.
  \vitem{disc\_friction} Ranges from 0.99 to 1.0.  When a disc is
unowned, its speed will be multiplied by this value every frame.  Therefore,
if the disc friction is 1.0, the disc will never slow down.
  \vitem{disc\_slow} Ranges from 0.0 to 1.0.  It determines the
fraction of your speed you will retain when a disc is orbiting you.  For
example, if \verb~disc_slow~ is 0.0, the vehicle which owns the disc cannot
move.
\end{itemize}

\section{Messages}\label{Messages}

Sending or receiving a message requires you to keep track of several
variables, outlined below.  When you send a message, these will be arguments
to \verb~send()~; when you receive a message, they will be in a
\verb~Message~ structure.

\paragraph{Recipient}

This is an \verb~ID~ specifying what vehicle you are sending the message to.
You can also send messages to a specific team by using \verb~MAX_VEHICLES~ plus
the team number as the recipient.  To send a message to everybody, use
\verb~RECIPIENT_ALL~.

\paragraph{Opcode}

An opcode specifies what kind of message is being sent or received.
The various kinds of opcodes are summarized in the {\bf Types} section.

\paragraph{Data field}

There are 10 different types of messages, which have widely differing types
of data to be sent.  One of the arguments to \verb~send()~ is 
\verb~char data[MAX_DATA_LEN]~;
this section describes what information should go in that array for each 
kind of message.
\begin{itemize}
  \vitem{OP\_LOCATION} A box; put the x coordinate in \verb~data[0]~ and the
y coordinate in \verb~data[1]~.
  \vitem{OP\_GOTO} A box.
  \vitem{OP\_FOLLOW}  A combatant; put the number of the vehicle in
\verb~data[0]~.
  \vitem{OP\_HELP} A box (you're asking for help at a particular location).
  \vitem{OP\_ATTACK} A combatant.
  \vitem{OP\_OPEN} A box (you're open at that particular location).
  \vitem{OP\_THROW} A box (you're throwing to that location).
  \vitem{OP\_CAUGHT} A box (you caught a disc at that location).
  \vitem{OP\_ACK} Nothing in particular - you can put anything you want there.
  \vitem{OP\_TEXT} The text of your message, in the form of a null-terminated
string. {\bf Note:} make sure that the
text is not more than \verb~MAX_DATA_LEN-1~ characters long!  Otherwise your
program may crash.
  \vitem{OP\_DEATH} Vehicle ID of victim in \verb~data[0]~, new number
f kills for the killer in \verb~data[1]~, and vehicle ID of killer
in \verb~data[2]~.  A message with this opcode is sent from \verb~SENDER_COM~
to \verb~RECIPIENT_ALL~ every time a vehicle dies.  If the victim wasn't
killled by a vehicle, \verb~data[2]~ contains \verb~SENDER_NONE~.
\end{itemize}

\section{Functions}

What follows is a long list of specifications for the functions in \xtanklib.
These are the low-level building blocks for writing an \xtank\ program.
It is strongly suggested that you develop higher-level procedures for doing
more complex actions, instead of writing one big procedure that makes
hundreds of \xtanklib\ calls.  Not only will your program be easier to write,
but then you can then trade your ``perfect\_lead'' shooting procedure for
someone else's ``best\_dodge'' movement procedure.

\setlength{\parskip}{3ex}

\subsection{Movement}

\index{turn_vehicle}
\begin{verbatim}
turn_vehicle(desired_angle)
     Angle desired_angle;
\end{verbatim}
\xx
Starts turning the vehicle to \verb~desired_angle~.  Depending on its
turn rate, this may take a while.

\begin{verbatim}
\index{turn_rate}
float turn_rate(abs_speed)
     float abs_speed;
\end{verbatim}
\xx
Returns the turn rate (in radians/frame) of the vehicle for the 
specified absolute speed.

\index{set_safety}
\begin{verbatim}
set_safety(safe)
     Boolean safe;
\end{verbatim}
\xx
If \verb~safe~ is \verb~TRUE~, turn safe turning on, otherwise turn
it off.

\index{set_abs_drive}
\begin{verbatim}
set_abs_drive(abs_drive)
     float abs_drive;
\end{verbatim}
\xx
Sets the vehicle's drive to \verb~abs_drive~.  \verb~abs_drive~ can vary from
\verb~-max_speed()~ to \verb~max_speed()~.  {\bf Note:} your drive is
{\em not} equivalent to your speed!  Your drive is how fast your vehicle
is trying to go by turning its wheels.  Your speed is how fast your
vehicle is actually moving.  If you are skidding, in a box with a scroll
landmark, or your path is blocked by another object (such as a wall or
another vehicle), the two will be different.

\index{set_rel_drive}
\begin{verbatim}
set_rel_drive(rel_drive)
     float rel_drive;
\end{verbatim}
\xx
Sets the vehicle's drive to \verb~rel_drive/9 * max_speed()~.
\verb~rel_drive~ can range from $-9.0$ to $9.0$.

\index{speed}
\begin{verbatim}
float speed()
\end{verbatim}
\xx
Returns the current speed of the vehicle.

\index{max_speed}
\begin{verbatim}
float max_speed()
\end{verbatim}
\xx
Returns the maximum speed of the vehicle.

\index{heading}
\begin{verbatim}
Angle heading()
\end{verbatim}
\xx
Returns the current heading of the vehicle.

\index{acc}
\begin{verbatim} 
float acc()
\end{verbatim}
\xx
Returns the acceleration of the vehicle.

\index{vehicle_size}
\begin{verbatim}
vehicle_size(width,height)
     int *width;
     int *height;
\end{verbatim}
\xx
Puts the width and height (in pixels) of the bounding box around the
picture of the vehicle into the integers pointed to by width and height.
These values change as the vehicle rotates.

subsection{Turrets}

\index{num_turrets}
\begin{verbatim}
int num_turrets()
\end{verbatim}
\xx
Returns the number of turrets on the vehicle.

\index{turret_angle}
\begin{verbatim}
Angle turret_angle(num)
     TurretNum num;
\end{verbatim}
\xx
Returns the angle of the specified turret.

\index{turret_turn_rate}
\begin{verbatim}
float turret_turn_rate(num)
     TurretNum num;
\end{verbatim}
\xx
Returns the turn rate of the specified turret (in radians/frame).

\index{turn_turret}
\begin{verbatim}
turn_turret(num,angle)
     TurretNum num;
     Angle     angle;
\end{verbatim}
\xx
Starts to turn the turret numbered \verb~num~ to \verb~angle~.

\index{turn_all_turrets}
\begin{verbatim}
turn_all_turrets(angle)
     Angle angle;
\end{verbatim}
\xx
Starts to turn all turrets to \verb~angle~.

\index{aim_turret}
\begin{verbatim}
aim_turret(num,dx,dy)
     int num;
     int dx,dy;
\end{verbatim}
\xx
Starts to turn the turret numbered \verb~num~ to aim at a location \verb~dx~ 
pixels away horizontally and \verb~dy~ pixels away vertically from the vehicle.

\index{aim_all_turrets}
\begin{verbatim}
aim_all_turrets(dx,dy)
     int dx,dy;
\end{verbatim}
\xx
Starts to turn all turrets to aim at a location \verb~dx~ pixels 
away horizontally
and \verb~dy~ pixels away vertically from the vehicle.

\subsection{Weapons}

\index{num_weapons}
\begin{verbatim}
int num_weapons()
\end{verbatim}
\xx
Returns the number of weapons on the vehicle.

\index{get_weapon}
\begin{verbatim}
get_weapon(num,winfo)
     WeaponNum num;
     Weapon_info *winfo;
\end{verbatim}
\xx
Puts all the constant information about the specified weapon
into the \verb~Weapon_info~ structure.

\index{weapon_time}
\begin{verbatim}
int weapon_time(num)
     WeaponNum num;
\end{verbatim}
\xx
Returns the number of frames before the weapon is reloaded and ready to
fire again.  If the weapon can fire immediately, returns 0.

\index{weapon_ammo}
\begin{verbatim}
int weapon_ammo(num)
     WeaponNum num;
\end{verbatim}
\xx
Returns the number of bullets left in the specified weapon.

\index{weapon_on}
\begin{verbatim}
Boolean weapon_on(num)
     WeaponNum num;
\end{verbatim}
\xx
Returns \verb~TRUE~ if the specified weapon is on, \verb~FALSE~ if it is not.

\index{turn_on_weapon}
\begin{verbatim}
turn_on_weapon(num)
     WeaponNum num;
\end{verbatim}
\xx
Turns on the specified weapon.

\index{turn_off_weapon}
\begin{verbatim}
turn_off_weapon(num)
     WeaponNum num;
\end{verbatim}
\xx
Turns off the specified weapon.

\index{fire_weapon}
\begin{verbatim}
WeaponError fire_weapon(num)
     WeaponNum num;
\end{verbatim}
\xx
Fires the specified weapon.  Returns a \verb~WeaponError~ describing the
result.

\index{fire_all_weapons}
\begin{verbatim}
fire_all_weapons()
\end{verbatim}
\xx
Attempts to fire all weapons in numerical order. 

\subsection{Armor}

\index{armor}
\begin{verbatim}
int armor(num)
     Side num;
\end{verbatim}
\xx
Returns the current amount of armor on the specified side.

\index{max_armor}
\begin{verbatim}
int max_armor(num)
     Side num;
\end{verbatim}
\xx
Returns the maximum amount of armor on the specified side.  This is
what the vehicle started out with at the beginning of the battle.

\index{protection}
\begin{verbatim}
int protection()
\end{verbatim}
\xx
Returns the protection factor of the type of armor on the vehicle.

\subsection{Fuel}

\index{fuel}
\begin{verbatim}
float fuel()
\end{verbatim}
\xx
Returns the current amount of fuel in the vehicle.

\begin{verbatim}
float max_fuel()
\end{verbatim}
\xx
Returns the maximum amount of fuel the vehicle can hold.

\subsection{Heat}

\index{heat}
\begin{verbatim}
int heat()
\end{verbatim}
\xx
Returns the heat of the vehicle.

\index{heat_sinks}
\begin{verbatim}
int heat_sinks()
\end{verbatim}
\xx
Returns the number of heat sinks in the vehicle.

\subsubsection{Specials}

\index{has_special}
\begin{verbatim}
Boolean has_special(num)
     SpecialType num;
\end{verbatim}
\xx
Returns \verb~TRUE~ if the vehicle has the specified special, otherwise
returns \verb~FALSE~.

\subsection{Environment}

\index{wall}
\begin{verbatim}
Boolean wall(side,x,y)
     Wall side;
     int x,y;
\end{verbatim}
\xx
Returns \verb~TRUE~ if there is a wall on the specified side of the box (x,y)
and \verb~FALSE~ if there isn't.  If you have no way of knowing (it isn't
on your map), returns \verb~FALSE~.
You can only detect the presence of a wall if it is
on your map and you have your mapper on.

\index{clear_path}
\begin{verbatim}
Boolean clear_path(start,finish)
     Location *start, *finish;
\end{verbatim}
\xx
Returns \verb~TRUE~ if there are no walls blocking the path from 
\verb~start~ to \verb~finish~; otherwise returns \verb~FALSE~.  Keep 
in mind that the path has 0 width, so
a bullet would make it through, but a vehicle might not.

\index{landmark}
\begin{verbatim}
LandmarkType landmark(x,y)
     int x,y;
\end{verbatim}
\xx
Returns the type of the landmark in box ({\tt x},{\tt y}).
If there is no landmark there, or you have no way of knowing, it returns
NORMAL.
You can only detect the presence of a landmark if it is
on your map and you have your mapper on.

\index{get_landmarks}
\begin{verbatim}
get_landmarks(num_landmark_infos,landmark_info)
     int *num_landmark_infos;
     Landmark_info landmark_info[]; /* Must have size >= MAX_LANDMARKS */
\end{verbatim}
\xx
Puts information about all the landmarks your mapper has seen into the
\verb~landmark_info~ array. Puts the number of landmarks your mapper
has seen into \verb~num_landmark_infos~.

\index{get_self}
\begin{verbatim}
get_self(my_info)
     Vehicle_info *my_info;
\end{verbatim}
\xx
Puts information about your vehicle into the structure pointed to by
\verb~my_info~.  Note that this duplicates the work of some functions,
such as \verb~get_location~.

\index{get_location}
\begin{verbatim}
get_location(loc)
     Location *loc;
\end{verbatim}
\xx
Puts your vehicle's current location into the location structure pointed to
by \verb~loc~.

\index{get_bullets}
\begin{verbatim}
get_bullets(num_bullet_infos,bullet_info)
     int *num_bullet_infos;
     Bullet_info bullet_info[];	/* Must have size >= MAX_BULLETS */
\end{verbatim}
\xx
Puts information about all visible bullets into the \verb~bullet_info~ array.
Puts the number of visible bullets into \verb~num_bullet_infos~.

\index{get_blips}
\begin{verbatim}
get_blips(num_blip_infos,blip_info)
     int *num_blip_infos;
     Blip_info blip_info[];	/* Must have size >= MAX_BLIPS */
\end{verbatim}
\xx
Puts information about all radar blips into the \verb~blip_info~ array.
Puts the number of blips into \verb~num_blip_infos~.
The radar has a period of 24 frames.  The blips stay on the screen for
15 frames.  Blips are alive (are returned by this function) for 19
frames after their birth.

\index{number_vehicles}
\begin{verbatim}
int number_vehicles()
\end{verbatim}
\xx 
Returns the number of vehicles currently alive.

\index{get_vehicles}
\begin{verbatim}
get_vehicles(num_vehicle_infos,vehicle_info)
     int *num_vehicle_infos;
     Vehicle_info vehicle_info[]; /* Must have size >= MAX_VEHICLES */
\end{verbatim}
\xx
Puts information about all visible vehicles (excluding your own)
into the \verb~vehicle_info~ array.  Puts the number of visible vehicles into
\verb~num_vehicle_infos~.

\index{get_closest_enemy}
\begin{verbatim}
Boolean get_closest_enemy(enemy)
     Vehicle_info enemy;
\end{verbatim}
\xx
Puts information about the closest visible enemy vehicle into \verb|enemy|.
It returns \verb|TRUE| if a visible enemy exists, \verb|FALSE| if not.  An
enemy is someone who is not on your team.  All neutral vehicles are
enemies.

\index{get_team}
\begin{verbatim}
Team get_team(vid)
     ID vid;
\end{verbatim}
\xx
Returns the team number of the specified vehicle.

\index{get_discs}
\begin{verbatim}
get_discs(num_disc_infos,disc_info)
     int *num_disc_infos;
     Disc_info disc_info[];  /* Must have size >= MAX_DISCS */
\end{verbatim}
\xx
Puts information about all visible discs into the \verb~disc_info~ array.
Puts the number of visible discs into \verb~num_disc_infos~.

\index{get_settings}
\begin{verbatim}
get_settings(settings_info)
     Settings_info *settings_info;
\end{verbatim}
Puts the values of important user-changeable settings into the structure
pointed to by \verb~settings_info~.

\subsection{Discs}

\index{num_discs}
\begin{verbatim}
int num_discs()
\end{verbatim}
\xx
Returns the number of discs that the vehicle owns.

\index{throw_discs}
\begin{verbatim}
throw_discs(speed)
    float speed;
\end{verbatim}
\xx
Releases all the discs that the vehicle is carrying at the desired speed.
\verb~speed~ must be between $0.0$ and $25.0$.

\index{spin_discs}
\begin{verbatim}
spin_discs(dir)
     DiscSpin dir;
\end{verbatim}
\xx
Spins all the discs owned by the vehicle in the specified direction.

\subsection{Messages}

See Section~\ref{Messages} (page~\pageref{Messages})
for more information on how to send
and receive messages.

\index{messages}
\begin{verbatim}
int messages()
\end{verbatim}
\xx
Returns the number of messages waiting to be read.

\index{send}
\begin{verbatim}
send(recipient,opcode,data)
\end{verbatim}
\xx
Sends a message to the recipient with the given opcode and data.

\index{receive}
\begin{verbatim}
receive(m)
     Message *m;
\end{verbatim}
\xx
Copies the information from the next received message into the 
\verb~Message~ structure.

\subsection{Miscellaneous}

\index{frame_number}
\begin{verbatim}
int frame_number();
\end{verbatim}
\xx
Returns the animation frame number.  It is useful for keeping track of
the passage of time.

\index{num_kills}
\begin{verbatim}
int num_kills()
\end{verbatim}
\xx
Returns number of kills the vehicle has accrued during this battle.

\index{score}
\begin{verbatim}
int score()
\end{verbatim}
\xx
Returns the current score of the vehicle.

\index{money}
\begin{verbatim}
int money()
\end{verbatim}
\xx
Returns the amount of money the vehicle owns.  Money is used to buy fuel and
ammo, and to repair armor.

\index{done}
\begin{verbatim}
done()
\end{verbatim}
\xx
This function will not return until the next frame of execution,
so calling it means giving up your remaining cpu time for this frame.
Use it if you don't wish to do anything more this frame, 

\appendix

\section{A Sample Robot}

Here is a simple robot which actually does something.  It looks for
vehicles, and if it finds one, it runs towards it and shoots at it.

{\small
\begin{verbatim}

/*
** attack.c
*/

#include "/mit/games/src/vax/xtank/Programs/xtanklib.h"
#include <math.h>

extern int attack_main();

Prog_desc attack_prog = {
  "attack",
  "combat",
  "hexo#1",
  "Attacks",
  "Terry Donahue",
  2,
  attack_main
}

attack_main()
{
  Location myloc;
  Vehicle_info enemy;
  int dx,dy;

  /* Get moving */
  set_rel_speed(5.0);

  while(1) {
    /* Find out where I am */
    get_location(&myloc);

    /* If a bad guy's around, blast him */
    if(get_closest_enemy(enemy)) {

      /* Find out where he is with respect to me */
      dx = enemy.x - myloc.x;
      dy = enemy.y - myloc.y;

      /* Aim my turrets at him */
      aim_all_turrets(dx,dy);

      /* Give him everything I've got */
      fire_all_weapons();

      /* Turn towards him */
      turn_vehicle(atan2((double) dy, (double) dx));
    }
  }
}

\end{verbatim}
}
\end{document}

