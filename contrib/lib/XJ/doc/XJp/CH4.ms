.nr PI 2n
.nr H1 3
.nr H2 0
.nr H3 0
.nr % 1
.OH ''''
.EH ''''
.OF 'X Window日本語Version研究会'4¥-%'漢字入力システム仕様(第2版)'
.EF 'X Window日本語Version研究会'4¥-%'漢字入力システム仕様(第2版)'
.NH
.LG
Xサーバ経由インタフェース
.sp 1
.PP
XJPライブラリ(クライアント)とXJPフロントエンド(日本語システム)間
のインタフェースには、以下の２つがある。
.RS
.IP (1) 4
Xサーバ経由のインタフェース
.br
Xプロトコルを使用し、クライアントと X サーバ、
XJPフロントエンドとXサーバ間で通信することにより、
クライアントとXJPフロントエンド間でインタフェースを取る方法である。
.br
なお、APインタフェースとして「コミュニケーションキット」が提供される。
.IP (2) 4
ダイレクトインタフェース
.br
X サーバを経由しないで、クライアントとXJPフロントエンド間でダイレクトに
通信する（socketインタフェースを使用）インタフェースである。
.br
なお、APインタフェースとして「簡易ライブラリ」が提供される。
.RE
.PP
本章では、クライアントがコミュニケーションキットを使用して
XJPフロントエンドとXサーバ経由の通信を行う場合の通信ダイアグラム、
及び通信におけるデータフォーマットについて説明する。
.PP
なお、ダイレクトインタフェースについては第5章で説明する。
.sp 1
.NH 2
通信ダイアグラム
.PP
Xサーバ経由のインタフェースは既存のXプロトコルを使用し、
クライアントがXJPフロントエンドに対し制御することにより、
日本語データを取得するインタフェースである。このインタフェース
の基本的な考えを以下に示す。
.sp 1
.RS
.IP (1) 4
変換ウィンドウに関する各種制御情報はプロパティを使用して受け渡しを行なう。
.br
本インタフェースで取り扱うプロパティには以下のものがある。
.RS
.IP (a) 4
XJPフロントエンドが制御するプロパティ
.br
このプロパティはXJPフロントエンドがクライアントに対し動作状態を
通知するものであり、XJPフロントエンドの起動時に登録される。
.br
クライアントではXJp_open()関数内でこのプロパティを取得し、XJPフロント
エンドの動作状態の確認をする。
.IP (b) 4
クライアントが制御するプロパティ
.br
このプロパティはクライアントがXJPフロントエンドに対し変換ウィンドウの生成・変
更を依頼するための変換ウィンドウ情報を登録するものであり、
クライアントがXJp_open()関数を発行したとき登録される。
.br
XJPフロントエンドはクライアントからのクライアント登録要求および変換ウィンドウ
属性の変更要求を受けたときに参照する。
.RE
.sp 1
.IP (2) 4
クライアントとXJPフロントエンド間の制御（要求と応答）
はイベント（クライアントメッセージ）を使用する。
.br
本インタフェースで取り扱う要求と応答のためのイベントには以下のものがある。
.RS
.IP (a) 4
クライアントがXJPフロントエンドに対し発行する要求イベント
.br
クライアントから発行されるライブラリ関数では日本語変換を行なうためにXJPフロン
トエンドに対し以下のような要求をクライアントメッセージイベントを使用し通知する。
.RE
.RE
.KS
.TS H
center box tab(;);
c | c
c | l.
要求;対応関数名
=
.TH
クライアント;XJp_open()
登録要求;
_
変換開始要求;XJp_begin()
;
_
変換ウィンドウ;XJp_visible()
表示要求;
_
変換ウィンドウ;XJp_invisible()
非表示要求;
_
キー入力イベント;XJp_end()
解放要求;
_
変換終了要求;XJp_close()
;
_
変換ウィンドウ;XJp_change()
属性変更要求;XJp_move()
.TE
.KE
.RS
.sp 1
.IP (b) 4
XJPフロントエンドがクライアントからの要求に対し応答を返す場合や処理完了
（変換終了）を通知する場合またはエラー通知する場合、クライアントに対し
以下のような要求をクライアントメッセージイベントを使用し通知する。
.KS
.TS H
center box tab(;);
c | c
c | l.
応答通知;対応関数名
=
変換ウィンドウ;XJp_open()
IDの通知
_
日本語変換;XJp_read()
確定通知;XJp_string()
_
XJPフロントエンド;XJp_open()から
からのエラー通知;XJp_close()までの間
;（非同期に通知）
.TH
.TE
.KE
.RE
.RE
.bp
.NH 3
XJp_open()
.PP
クライアントが以後、 XJPフロントエンドと X サーバを経由して通信することに
より日本語データを取得する場合に、コミュニケーションキット内の他の関数に
先立って発行し、かな漢字入力システムに対する初期処理を依頼する。
.sp 1
.RS
.IP (1) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
起動時、XJPフロントエンドの情報（バージョン番号、ホスト名、ポート
番号）をルートウィンドウのプロパティ(XJPFRONTEND)にセット
し、XJPFRONTENDのセレクションオーナをXJPフロントエンドにする。
.IP ¥(bu
クライアントからの登録要求をイベント（クライアントメッセージ）で受ける。
.IP ¥(bu
プロパティを取得し、指定の変換ウィンドウを生成し、かな漢字変換の前処理を行なう。
.IP ¥(bu
生成した変換ウィンドウID、及び¥fIdispmode¥fPがXJP_XYの場合は、
ステータス表示領域の大きさ（高さ、幅）をクライアントに通知する
ためにイベント（クライアントメッセージ）を生成し発行する。
.RE
.sp 1
変換ウィンドウに対する指定以外の情報（例えばキーバインド情報など）は
セットアップファイルからその情報を入手する。
.in -0.2i
.sp 1
.IP (2) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
ルートウィンドウのプロパティ(XJPFRONTEND)を取得し、
XJPフロントエンドの起動を確認する。
.IP ¥(bu
クライアントウィンドウのプロパティ(XJPCLIENT)変換ウィンドウ
に関する制御情報をセットする。
.IP ¥(bu
XJPフロントエンドに対しクライアントの登録要求（クライアントメッセ
ージイベントの発行）を行なう。
.IP ¥(bu
XJPフロントエンドから変換ウィンドウID、及び¥fIdispmode¥fPがXJP_XYの
場合は、ステータス表示領域の大きさ（高さ、幅）を取得するために
イベント（クライアントメッセージ）を得る。
.IP ¥(bu
関数の返値として取得した変換ウィンドウIDを返す。
.IP ¥(bu
¥fIdispmode¥fPがXJP_XYの場合は、¥fIvalues¥fPの¥fIstatus_width,
status_height¥fPをセットする。
.RE
.sp 1
XJPフロントエンドからの応答がエラーの場合は関数に対してもエラーで返す。
.in -0.2i
.bp
.sp 1
.IP (3) 4
通信ダイアグラム
.RE
.sp 2
.PS
boxwid = 0.3i; boxht = 4i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "プロパティの生成と" "情報のセット" from N3.nw - (0,0.3i) to N2.ne - (0,0.3i)
arrow "XJPフロントエンドIDの獲得" "（プロパティの取得）" from N2.nw - (0,0.4i) to N1.ne - (0,0.4i)
arrow "プロパティの生成と" "情報のセット" from N1.ne - (0,1.0i) to N2.nw - (0,1.0i)
arrow "クライアントの登録" "（イベントとプロパティ）" from N1.ne - (0,1.6i) to N2.nw - (0,1.6i)
arrow "イベントの取得" "（クライアント登録要求）" from N2.ne - (0,1.6i) to N3.nw - (0,1.6i)
arrow "クライアント情報の取得" "（プロパティ）" from N2.ne - (0,2.2i) to N3.nw - (0,2.2i)
arrow "変換ウィンドウの生成" "（非表示のまま）" from N3.nw - (0,2.8i) to N2.ne - (0,2.8i)
arrow "変換ウィンドウID等の通知" "（クライアントメッセージ）" from N3.nw - (0,3.4i) to N2.ne - (0,3.4i)
arrow "イベントの取得" "（変換ウィンドウID等の取得）" from N2.nw - (0,3.4i) to N1.ne - (0,3.4i)
.PE
.bp
.NH 3
XJp_begin()
.PP
クライアントが XJPフロントエンドに対し指定ウィンドウのキー入力イベントの取得を
行なうことによりかな漢字変換を実行する処理を依頼する時に発行する。
.br
本関数はオープンで生成した変換ウィンドウに対し、キー入力の対象となるウィンドウ
を指定する。ここで指定したウィンドウに対するキー入力イベントはXJp_end()関数に
より解除されるまで、 XJPフロントエンドが取得する。
.sp 1
.RS
.IP (1) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
XJPフロントエンドに対し該当ウィンドウに対するキー入力イベントを取得させ
かな漢字変換を実行させるための要求（変換開始要求）を
イベント（クライアントメッセージ）を使用して通知する。
.IP ¥(bu
該当ウィンドウのキー入力イベントマスクを解放する。
.RE
.sp 1
XJPクライアントがキー入力イベントの解放をしてからXJPフロントエンドがキー入力イ
ベントを取得するまでの間に入力されたデータを捨てられる。
.in -0.2i
.IP (2) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
変換開始要求のイベント（クライアントメッセージ）を取得する。
.IP ¥(bu
指定ウィンドウのキー入力イベントを取得するためのイベント設定を行なう。
.RE
.sp 1
以後は該当ウィンドウからのキー入力を取得してかな漢字変換を開始する。
.in -0.2i
.sp 1
.IP (3) 4
通信ダイアグラム
.RE
.PS
boxwid = 0.3i; boxht = 2.3i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "変換開始要求" "（クライアントメッセージ）" from N1.ne - (0,0.4i) to N2.nw - (0,0.4i)
arrow "イベント取得" "（変換開始要求）" from N2.ne - (0,0.4i) to N3.nw - (0,0.4i)
arrow "キー入力イベントの解放" "" from N1.ne - (0,1.0i) to N2.nw - (0,1.0i)
arrow "キー入力イベントの取得" "（マスクの設定）" from N3.nw - (0, 1.5i) to N2.ne - (0,1.5i)
.PE
.bp
.NH 3
XJp_visible()
.PP
クライアントが XJPフロントエンドに対し、変換ウィンドウの表示要求を行なう時に
発行する。
XJp_open()で作成した変換ウィンドウは非表示状態で作成されるため、本関数を発行し
て表示状態とする。
.sp 1
.RS
.IP (1) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
XJPフロントエンドに対し該当ウィンドウの表示を要求するために
イベント（クライアントメッセージ）を使用して通知する。
.RE
.in -0.2i
.IP (2) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
変換ウィンドウの表示要求のイベント（クライアントメッセージ）を取得する。
.IP ¥(bu
指定ウィンドウを表示状態とする。
.RE
.sp 1
変換ウィンドウの表示時期は本関数が発行された時点とは限らない。
.in -0.2i
.sp 1
.IP (3) 4
通信ダイアグラム
.RE
.PS
boxwid = 0.3i; boxht = 2.3i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "変換ウィンドウの表示要求" "（クライアントメッセージ）" from N1.ne - (0,0.4i) to N2.nw - (0,0.4i)
arrow "イベント取得" "（変換ウィンドウの表示要求）" from N2.ne - (0,0.4i) to N3.nw - (0,0.4i)
arrow "変換ウィンドウの表示" "" from N3.nw - (0, 1.2i) to N2.ne - (0,1.2i)
.PE
.bp
.NH 3
XJp_read()
.PP
クライアントは取得したイベント（クライアントメッセージ）が、 XJPフロントエンド
からの変換確定通知の場合、指定したエリアに日本語データを取得するために発行する。
.sp 1
.RS
.IP (1) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
クライアントからの変換開始要求後取得したキー入力データは確定キーが入力されるま
でかな漢字変換する。
.IP ¥(bu
確定された日本語データをクライアントにイベント
（クライアントメッセージに変換確定通知と日本語データをセットしたもの）を
使用して通知する。
.RE
.sp 1
イベントは日本語データの大きさおよびコードにより複数に分割されて転送
される場合がある。
.br
また、本処理はクライアントからのキー入力イベントの解放要求を取得するまで繰り返
される。
.in -0.2i
.sp 1
.IP (2) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
クライアントからのXJp_read()要求に対し、引き数で渡されたイベント構造体から日本
語データを取り出しユーザの指定エリアに書き込む。
.RE
.in -0.2i
.sp 1
.IP (3) 4
クライアントの処理概要
.in +0.2i
.RS
.IP ¥(bu
イベント（クライアントメッセージ）が変換確定通知であった場合
そのイベント情報を引き数として所定のエリアに日本語データを入力
するためにリード要求（XJp_read()）を発行する。
.RE
.in -0.2i
.bp
.sp 1
.IP (4) 4
通信ダイアグラム
.RE
.sp 1
.PS
boxwid = 0.3i; boxht = 3.5i
linewid = 0.8i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move right 1.3i from N1; N2: box "X" "サ" "｜" "バ"; move right 1.9i from N2; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "キー入力データの取得　a" "" from N2.ne - (0,0.3i) to N3.nw - (0,0.3i)
arrow "　　　　　　　　　　　b" "" from N2.ne - (0,0.5i) to N3.nw - (0,0.5i)
arrow "　　　　　　　　　　・" "" from N2.ne - (0,0.7i) to N3.nw - (0,0.7i)
arrow "　　　　　　　確定キー" "" from N2.ne - (0,1.0i) to N3.nw - (0,1.0i)
line "漢字データ" "のセット" right from N3.ne - (0,1.6i)
arrow "変換確定通知" "（クライアントメッセージ）" from N3.nw - (0,1.7i) to N2.ne - (0,1.7i)
arrow "イベント取得" "（変換確定通知）" from N2.nw - (0,1.8i) to N1.ne - (0,1.8i)
line "漢字データの" "読み込み" from N1.nw - (0,2.1i) to N1.nw - (0.9i,2.1i)
arrow "変換確定通知" "（クライアントメッセージ）" from N3.nw - (0,2.6i) to N2.ne - (0,2.6i)
arrow "イベント取得" "（変換確定通知）" from N2.nw - (0,2.7i) to N1.ne - (0,2.7i)
line "漢字データの" "読み込み" from N1.nw - (0,2.9i) to N1.nw - (0.9i,2.9i)
.PE
.bp
.NH 3
XJp_string()
.PP
XJp_stringは、XJp_read()の拡張機能としてサポートされた関数であり、XJP
ライブラリの中で指定のコードに変換して返すことを除いて、XJp_read()と
同一の処理を行う。
.bp
.NH 3
XJp_invisible()
.PP
クライアントが XJPフロントエンドに対し、変換ウィンドウの非表示要求を行なう時に
発行する。
.sp 1
.RS
.IP (1) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
XJPフロントエンドに対し該当ウィンドウの非表示を要求するために
イベント（クライアントメッセージ）を使用して通知する。
.RE
.in -0.2i
.sp 1
.IP (2) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
変換ウィンドウの非表示要求のイベント（クライアントメッセージ）を取得する。
.IP ¥(bu
ただちに指定ウィンドウの非表示処理を行なう。
.RE
.sp 1
既に非表示状態にある変換ウィンドウに対しても同一の処理が行なわれる
（見た目は何も変わらない）。
.in -0.2i
.sp 1
.IP (3) 4
通信ダイアグラム
.RE
.PS
boxwid = 0.3i; boxht = 2.3i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "変換ウィンドウの非表示要求" "（クライアントメッセージ）" from N1.ne - (0,0.4i) to N2.nw - (0,0.4i)
arrow "イベント取得" "（非表示要求）" from N2.ne - (0,0.4i) to N3.nw - (0,0.4i)
arrow "変換ウィンドウの非表示" "" from N3.nw - (0, 1.2i) to N2.ne - (0,1.2i)
.PE
.bp
.NH 3
XJp_end()
.PP
クライアントは指定ウィンドウに対するキー入力イベントを
XJp_begin()関数によってXJPフロントエンドに取得させていたものを、クライアントに取
り戻すために本関数を発行して行なう。
.sp 1
.RS
.IP (1) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
XJPフロントエンドに対し該当ウィンドウのキー入力イベントを取り戻すために
イベント（クライアントメッセージ）を使用してキー入力イベントの
解放要求通知をする。
.IP ¥(bu
キー入力イベントの取得処理を行なう（イベントマスクの設定）。
.RE
.in -0.2i
.IP (2) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
キー入力イベントの解放要求のイベント（クライアントメッセージ）を取得する。
.IP ¥(bu
指定ウィンドウのキー入力イベントを解放するためのイベント設定を行なう。
.RE
.in -0.2i
.sp 1
.IP (3) 4
通信ダイアグラム
.RE
.PS
boxwid = 0.3i; boxht = 2.3i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "キー入力イベントの解放要求" "（クライアントメッセージ）" from N1.ne - (0,0.4i) to N2.nw - (0,0.4i)
arrow "イベント取得" "（イベント解放要求）" from N2.ne - (0,0.4i) to N3.nw - (0,0.4i)
arrow "キー入力イベントの解放" "（マスクの設定）" from N3.nw - (0, 1.2i) to N2.ne - (0,1.2i)
arrow "キー入力イベントの取得" "（マスクの設定）" from N1.ne - (0, 1.7i) to N2.nw - (0,1.7i)
.PE
.bp
.NH 3
XJp_close()
.PP
クライアントは XJPフロントエンドに対し、かな漢字変換処理の終了を通知する
場合に発行する。
.sp 1
.RS
.IP (1) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
オープン時に作成した資源（プロパティ）を削除する。
.IP ¥(bu
XJPフロントエンドに対しかな漢字変換の終了要求をするために
イベント（クライアントメッセージ）を使用して通知する。
.RE
.in -0.2i
.IP (2) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
かな漢字変換処理の終了要求のイベント（クライアントメッセージ）を取得する。
.IP ¥(bu
変換ウィンドウの削除処理を行なう。
.IP ¥(bu
該当資源の解放処理を行なう。
.RE
.sp 1
XJPフロントエンドにおけるクローズ処理では、クライアントからの終了要求のほか
に、変換ウィンドウの親ウィンドウの削除イベントの取得によるクローズ処理を行なう。
（これはXJp_close()を発行しないで終了した場合の対応としての処理である）
.in -0.2i
.bp
.sp 1
.IP (3) 4
通信ダイアグラム
.RE
.sp 2
通常の場合：
.sp 1
.PS
boxwid = 0.3i; boxht = 2.2i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "資源の解放" "" from N1.ne - (0,0.3i) to N2.nw - (0,0.3i)
arrow "終了要求" "（クライアントメッセージ）" from N1.ne - (0,0.7i) to N2.nw - (0,0.7i)
arrow "イベント取得" "（終了要求）" from N2.ne - (0,0.7i) to N3.nw - (0,0.7i)
arrow "変換ウィンドウの削除" "" from N3.nw - (0,1.3i) to N2.ne - (0,1.3i)
arrow "資源の解放" "" from N3.nw - (0, 1.8i) to N2.ne - (0,1.8i)
.PE
.sp 2
クライアントがXJp_close()を発行しないで終了した場合：
.sp 1
.PS
boxwid = 0.3i; boxht = 2.5i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "イベント取得" "（削除イベント）" from N2.ne - (0,0.4i) to N3.nw - (0,0.4i)
arrow "変換ウィンドウの削除" "" from N3.nw - (0, 1.5i) to N2.ne - (0,1.5i)
arrow "資源の解放" "" from N3.nw - (0, 2.0i) to N2.ne - (0,2.0i)
.PE
.bp
.NH 3
XJp_change()
.PP
クライアントが、オープンで指定した変換ウィンドウに対する各情報を変更したい場
合に発行する。
.sp 1
.RS
.IP (1) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
変換ウィンドウに関する変更情報をプロパティにセットする。
.IP ¥(bu
XJPフロントエンドに対し該当変換ウィンドウの属性変更要求をするために
イベント（クライアントメッセージ）を使用して通知する。
.RE
.in -0.2i
.sp 1
.IP (2) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
変換ウィンドウの属性変更要求のイベント（クライアントメッセージ）を取得する。
.IP ¥(bu
プロパティから変更情報を取得する。
.IP ¥(bu
変換ウィンドウの属性（位置や大きさなど）を変更する。
.RE
.sp 1
変換ウィンドウの変更時期は XJPフロントエンドに依存する。
.in -0.2i
.sp 1
.IP (3) 4
通信ダイアグラム
.RE
.PS
boxwid = 0.3i; boxht = 2.5i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "プロパティの変更" "" from N1.ne - (0,0.4i) to N2.nw - (0,0.4i)
arrow "変換ウィンドウ属性変更要求" "" from N1.ne - (0,0.8i) to N2.nw - (0,0.8i)
arrow "イベント取得" "（属性変更要求）" from N2.ne - (0,0.8i) to N3.nw - (0,0.8i)
arrow "変換ウィンドウ属性の取得" "（プロパティ）" from N2.ne - (0,1.5i) to N3.nw - (0,1.5i)
arrow "変換ウィンドウの属性変更" "" from N3.nw - (0, 2.1i) to N2.ne - (0,2.1i)
.PE
.bp
.NH 3
XJp_move()
.PP
XJp_move()関数は変換ウィンドウの位置のみを変更するために用意
された関数であり、XJp_change()の中の単一機能サポート関数である。
本関数が発行された場合は、XJp_change()関数におけるウィンドウ位置
のみを変更する処理と同様である。
.PP
ただし、通信手順はXJp_change()と異なり、イベントのみを用いて
処理を行うため、手順が簡略化されており、効率的である。
.sp 1
.RS
.IP (1) 4
XJPライブラリの処理概要
.in +0.2i
.RS
.IP ¥(bu
XJPフロントエンドに対し変換ウィンドウの位置情報を
イベント（クライアントメッセージ）を使用して通知する。
.RE
.in -0.2i
.sp 1
.IP (2) 4
XJPフロントエンドの処理概要
.in +0.2i
.RS
.IP ¥(bu
変換ウィンドウの位置変更要求のイベント（クライアントメッセージ）を
取得する。
.IP ¥(bu
変換ウィンドウの表示位置を変更する。
.RE
.in -0.2i
.sp 1
.IP (3) 4
通信ダイアグラム
.RE
.PS
boxwid = 0.3i; boxht = 2.3i
movewid = 2.3i
N1: box " " "X" "J" "P" "ラ" "イ" "ブ" "ラ" "リ"; move; N2: box "X" "サ" "｜" "バ"; move; N3: box "X" "J" "P" "フ" "ロ" "ン" "ト" "エ" "ン" "ド"
arrow "変換ウィンドウの位置変更要求" "（クライアントメッセージ）" from N1.ne - (0,0.4i) to N2.nw - (0,0.4i)
arrow "イベント取得" "（位置変更要求）" from N2.ne - (0,0.4i) to N3.nw - (0,0.4i)
arrow "変換ウィンドウの表示位置変更" "" from N3.nw - (0, 1.2i) to N2.ne - (0,1.2i)
.PE
.bp
.NH 2
データフォーマット
.PP
XJPフロントエンドとコミュニケーションキット
間の通信データフォーマットについて述べる。
.sp 1
.NH 3
プロパティによる通信データ
.PP
プロパティを用いる通信には、以下の２つがある。
.RS
.IP (1) 4
XJp_open, XJp_changeで、XJPフロントエンドが変換ウィンド
ウを作成するために必要な情報の通信。
.IP (2) 4
XJPフロントエンドの情報をクライアントに伝える通信。
.RE
.LP
以下に上記(1),(2)で用いるプロパティ名を示し、
以下でその内容を説明する。
.RS
.IP (1)¥ プロパティ名 16
XJPCLIENT
.IP (2)¥ プロパティ名 16
XJPFRONTEND
.RE
.SH
［XJPCLIENT］
.PP
XJPCLIENTは、以下の通りとする。
.RS
.ta 5 15 25
.IP (1) 4
かな漢字変換要求ウィンドウのプロパティとする。
.IP (2) 4
プロパティに格納するデータは次の通りである。
.RS
.IP long¥ dispmode 20
変換ウィンドウの表示形態の指定
.RS
.IP 0 4
変換ウィンドウをかな漢字変換要求ウィンドウの下部に表示
.IP 1 4
変換ウィンドウをかな漢字変換要求ウィンドウの指定した位置に表示
.IP 2
変換ウィンドウをルートウィンドウの指定した位置に表示
.RE
.IP char¥ aux_data[128] 20
フロントエンド用プライベートデータ
.IP Window¥ w 20
かな漢字変換要求ウィンドウID
.IP unsigned¥ long¥ mask 20
以下の情報設定時のマスク
.IP long¥ p_width 20
かな漢字変換要求ウィンドウの幅（ピクセル単位）
.IP long¥ p_height 20
かな漢字変換要求ウィンドウの高さ（ピクセル単位）
.IP long¥ x,¥ y 20
変換ウィンドウの位置（ピクセル単位）
.br
(注)座標はかな漢字変換要求ウィンドウに対する相対座標
.IP long¥ width 20
変換ウィンドウの幅（ピクセル単位）
.IP long¥ height 20
変換ウィンドウの高さ（ピクセル単位）
.IP unsigned¥ long¥ fg 20
変換ウィンドウにおける文字の色
.IP unsigned¥ long¥ bg 20
変換ウィンドウにおける背景色
.IP long¥ bp 20
変換ウィンドウの境界幅（ピクセル単位）
.IP long¥ status_x 20
ステータス表示領域の位置（ピクセル単位）
.IP long¥ status_y 20
ステータス表示領域の位置（ピクセル単位）
.IP char¥ fontname[¥ ] 20
文字フォント格納用のエリア（可変長）。なお、フォント名は以下の
ように格納する。
.br
［fontname[¥ ]におけるフォント情報の格納方法］
.RS
[フォント情報]^J[フォント情報]^J[フォント情報]NULL
.RE
ここで、
.RS
[フォント情報]=[識別子][識別子]・・・^I[フォント名]
.RE
である。なお、識別子は後述する文字列送信時と同様である。
.RE
.IP (3) 4
プロパティのバイト順については、High-High（注：68000系と同じ）とする。
.RE
.SH
［XJPFRONTEND］
.PP
XJPFRONTENDは、以下の通りとする。
.RS
.IP (1) 4
ルートウィンドウのプロパティとする。
.IP (2) 4
プロパティに格納するデータは次の通りである。
.RS
.IP long¥ fname[128] 20
XJPフロントエンドの名前とバージョン
.IP char¥ hname[128] 20
XJPフロントエンドが起動しているホスト名(ターミネータはNULL)
.IP long¥ pnumber 20
サービスポート番号
.RE
.RE
.sp 1
.NH 3
SendEventによる通信データ
.PP
SendEventを用いる通信は、以下の３つである。
.RS
.IP (1) 4
クライアント・XJPフロントエンド間のコマンド通知
.IP (2) 4
XJPフロントエンドからクライアントへの文字列の送信
.IP (3) 4
XJPフロントエンドからクライアントへのKeyEventの転送
.IP (4) 4
XJPフロントエンドからクライアントへのエラー通知
.RE
.LP
以下、各通信で用いられるデータフォーマットについて説明する。
.SH
［コマンド通知におけるデータフォーマット］
.PP
コマンド通知は、以下の通りとする。
.RS
.IP (1) 4
イベントタイプとしては、ClientMessageである。
.IP (2) 4
XClientMessageEvent構造体のエントリ・message_type(Atom)には、
XJPFRONTENDのAtom番号を指定する（ただし、XJPフロントエンドか
らクライアントへの通信時のみである）。
.IP (3) 4
XClientMessageEvent構造体のエントリ・data(20バイト)は、
.RS
long × 5  (long L[5])
.RE
として使用し、配列の各要素は以下のように使用する。
.RS
.RS
.IP L[0] 10
コマンド番号
.IP L[1]-L[4] 10
コマンドオプションデーダ(コマンドの種類によって異なる)
.RE
.RE
.IP (4) 4
コマンド番号は以下の通りである。
.IP ・ 2
クライアントから日本語フロントエンドへ
.RS
.LP
コミュニケーションキットで使用するコマンドを、各関数と対応
させて以下に示す。
.RS
.IP 関数名 16
コマンド番号(()内は、日本語システムインプリメンタ用のdefine)
.IP XJp_open 16
1 (XJP_OPEN)
.IP XJp_close 16
2 (XJP_CLOSE)
.IP XJp_begin 16
3 (XJP_BEGIN)
.IP XJp_end 16
4 (XJP_END)
.IP XJp_visible 16
5 (XJP_VISIBLE)
.IP XJp_invisible 16
6 (XJP_INVISIBLE)
.IP XJp_change 16
7 (XJP_CHANGE)
.IP XJp_move 16
8 (XJP_MOVE)
.RE
.RE
.IP ・ 2
XJPフロントエンドからクライアントへ
.RS
.LP
上記コマンドのリプライとして日本語フロントエンドからクライ
アントに送られるコマンド番号を、コミュニケーションキットの関
数に対応させて以下に示す。
.RS
.IP 関数名 16
コマンド番号(()内は、日本語システムインプリメンタ用のdefine)
.IP XJp_open 16
1 (XJP_WINDOWID)
.IP XJp_perror 16
¥-1 (XJP_ERROR)
.RE
.RE
.IP (5) 4
各コマンドのコマンドオプションデータは以下の通りである。
.IP ・ 2
クライアントからXJPフロントエンドへ
.RS
.RS
.IP XJP_OPEN 16
接続要求
.br
L[1]  XJPCLIENTのオーナウィンドウのID
.IP XJP_CLOSE 16
終了要求
.br
L[1]  変換ウィンドウID
.IP XJP_BEGIN 16
キーの解放通知
.br
L[1]  変換ウィンドウID
.br
L[2]  キー解放するウィンドウID
.IP XJP_END 16
キーの獲得要求
.br
L[1]  変換ウィンドウID
.br
L[2]  キー獲得するウィンドウID
.IP XJP_VISIBLE 16
変換ウィンドウの表示要求
.br
L[1]  変換ウィンドウID
.IP XJP_INVISIBLE 16
変換ウィンドウの非表示要求
.br
L[1]  変換ウィンドウID
.IP XJP_CHANGE 16
変換ウィンドウの変更要求
.br
L[1]  変換ウィンドウID
.IP XJP_MOVE 16
変換ウィンドウの位置変更要求
.br
L[1]  変換ウィンドウID
.br
L[2]  変換ウィンドウの位置（X座標）
.br
L[3]  変換ウィンドウの位置（Y座標）
.RE
.RE
.IP ・ 2
XJPフロントエンドからクライアントへ
.RS
.RS
.IP XJP_WINDOWID 16
変換ウィンドウID、ステータス表示領域の大きさの通知
.br
L[1]  変換ウィンドウID
.br
L[2]  ステータス表示領域の幅
.br
L[3]  ステータス表示領域の高さ
.IP XJP_ERROR 16
エラー発生の通知
.br
L[1]  エラー番号
.RE
.RE
.IP (6) 4
各通信における送信元(Event構造体のメンバ・window)／送信先は以下
の通りである。
.IP ・ 2
クライアントからXJPフロントエンドへ
.RS
.RS
.IP 送信元 10
かな漢字変換要求ウィンドウID
.IP 送信先 10
XJPFRONTENDのセレクションオーナのID
.RE
.RE
.IP ・ 2
XJPフロントエンドからクライアントへ
.RS
.RS
.IP 送信元 10
変換ウィンドウID
.IP 送信先 10
XJp_begin()で指定したキー入力を受け付けるウィンドウID
.RE
.RE
.RE
.SH
［文字列の送信］
.PP
文字列の送信は、以下の通りとする。
.RS
.IP (1) 4
イベントタイプとしては、ClientMessageである。
.IP (2) 4
XClientMessageEvent構造体のエントリ・data(20バイト）は、
.RS
char × 20   (char b[20])
.RE
として使用し、配列の各要素は以下のように使用する。
.RS
.RS
.IP b[0] 8
文字セット識別子（後述する）
.IP b[1] 8
文字セット識別子（後述する）
.IP b[2] 8
文字セット識別子（拡張用：後述する）
.IP b[3] 8
転送バイト数
.RE
以下、b[4]〜b[19]には文字データが格納される。例えば、文字セット
がJIS-X0208漢字の場合には以下のようになる。
.RS
.IP b[4] 8
第1文字の区コード(x20のオフセット)
.IP b[5] 8
第1文字の点コード(x20のオフセット)
.IP b[6] 8
第2文字の区コード(x20のオフセット)
.IP b[7] 8
第2文字の点コード(x20のオフセット)
.RE
以下同様に続く
.RE
.IP (3) 4
文字セット識別子(b[0]〜b[2])についての原則は以下の通り。
.RS
.IP a) 2
枠組み(識別できる範囲)は、ISOに登録されている文字セットを対象
と考える。
.IP b) 2
文字セット識別子(b[0]〜b[2])には、JISX0202(ISO2022)で規定さ
れるescape-sequenceを使用する。具体的には、
.RS
.IP ・ 2
文字コードは７単位符号とする。
.IP ・ 2
仮想プレーン（バッファ）としては、G0のみを使用する(各
文字セットをG0へdesignate する)。
.IP ・ 2
従って、invokation（G0からGLへのinvoke）は固定。
.IP ・ 2
上記３項目を前提として、文字セット識別子には、designateで
使用するescape-sequenceの中間文字／終端文字を使う。
.RS
.IP b[0] 10
中間文字
.IP b[1] 10
終端文字（２文字escape-sequenceの場合）
.br
中間文字（３文字escape-sequenceの場合）
.IP b[2] 10
終端文字（３文字escape-sequenceの場合）
.RE
.RE
.IP c) 2
b[2]を文字セット識別用にしておく理由は、ISOで３文字エスケープシ
ーケンスが規定された時のための予備である。
.IP d) 2
なお、外字等プライベートな文字セットについては、以下のように終
端文字として第３列を使用する。例えば、
.RS
.IP １バイト文字： 20
b[0]=2/8、b[1]=3/0
.IP 複数バイト文字： 20
b[0]=2/4、b[1]=3/0
.RE
.IP e) 2
１文字のバイト数は、文字セット識別子で判断する。
.RE
.IP (4) 4
送信元／送信先は以下の通りである。
.RS
.IP 送信元 10
「確定」KeyEventが発生したウィンドウID
.IP 送信先 10
「確定」KeyEventが発生したウィンドウID
.RE
.RE
.SH
［KeyEventの転送］
.PP
KeyEvent転送においては、XJPフロントエンドが獲得したキーイベントを
そのままクライアントに転送する。
.SH
［エラー通知］
.PP
フロントエンドからのエラー通知は、以下の通りとする。
.RS
.IP (1) 4
イベントタイプとしては、ClientMessageである。
.IP (2) 4
XClientMessageEvent構造体のエントリ・data(20バイト)は、
.RS
long × 5   (char L[5])
.RE
として使用し、配列の各要素は以下のように使用する。
.RS
.RS
.IP L[0] 8
¥-1(XJP_PERROR)：エラー発生の通知
.IP L[1]
エラー番号（詳細については、付録に示す）
.RE
.RE
.RE
.sp 1
.SH
［備考］XJPフロントエンドのキー獲得について
.RS
.RS
.PP
XJPフロントエンドは、変換途中の文字がないときで、かつ以下の条件が
満たされた場合には、獲得したキーイベントをそのままクライアン
トに転送する。
.RS
.IP ・ 2
モディファイアcontrolがオン、もしくはモディファイアmod1からmod5の
いづれかすくなくとも1個がオンで、かつそのキーイベントをXJPフロント
エンドが必要としない場合
.RE
.RE
.RE
