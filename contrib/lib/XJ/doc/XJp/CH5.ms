.OH ''''
.EH ''''
.OF 'X-Window日本語Version研究会'5¥-%'漢字入力システム仕様(第2版)'
.EF 'X-Window日本語Version研究会'5¥-%'漢字入力システム仕様(第2版)'
.nr H1 4
.nr H2 0
.nr H3 0
.nr PI 2n
.NH
.LG
ダイレクトインタフェース
.sp 1
.PP
本章では、ダイレクトインタフェースにおける通信手順、データ
フォーマット及びXJPフロントエンドでの対応について述べる。
.PP
ダイレクトインタフェースは簡易ライブラリとXJPフロントエンド間
のインタフェースであり、通信にはUNIXのsocketを用いる。
Xの世界では、クライアント間通信のための仕組みが用意されているが、
ここでは、以下の理由から、Xの通信を用いずに、socketを用いることに
する。
.RS
.IP (1) 4
Xの通信方法は、非同期の通信には適しているが、同期的な通信には
あまり適していないこと。
.IP (2) 4
簡易ライブラリとXJPフロントエンドの通信は、問い合わせに対しては
必ず返答を返す同期的な通信にしたいこと。
.RE
.PP
簡易ライブラリは、最初にコールされた時に、XJPフロントエンドに接続し
通信を始める。
XJPフロントエンドはネットワーク上のいずれのマシン上で動作していても
良いが、どのフロントエンドに接続するかはXのセレクション機能を用いて
判断する。
.sp 1
.NH 2
通信とデータフォーマット
.PP
ダイレクトインタフェースは、クライアントとXJPフロントエンド間の
通信路を確保する(接続する)初期ルーチンと、かな漢字変換処理時の交信
の２ステージからなる。
.NH 3
初期ルーチン
.PP
簡易ライブラリが最初に呼ばれた時には次の処理を行う。
.RS
.IP (1) 4
かな漢字変換フロントエンドの確認
.PP
ルートウィンドウのプロパティ"XJPFRONTEND"を調べて、どのホストで
XJPフロントエンドが動いているかを得る(その時ポート番号も得る:脚注参照)。
.FS
かな漢字変換フロントエンドは、ポート番号:0X9494、サービス
名(/etc/services):xjp_frontend、としている。
.FE
.IP (2) 4
通信路の確保
.PP
socketを作成し、XJPフロントエンドとconnectする。
.IP (3) 4
初期データの交信
.PP
自分が、どのXサーバ上で動いているかのデータを渡す。これは、
XJPフロントエンドが、複数のディスプレイを同時にサポートする
場合に、どのXサーバ上の変換ウィンドウにエコーを行うかを
判断する場合に必要である。
.PP
初期データの形式は以下の通り。
.TS
tab(:);
l l l.
1:1:code
1:INT8:length
_
n:ARBITRARY:string
.TE
.PP
stringの部分には、"hostname:0.0"のようなホスト名とディスプレイ番号を
表す文字列が入る。
.PP
これを受けてかな漢字変換フロントエンドは以下の返答を返す。
.TS
tab(:);
l l l.
2:INT16:state
2:INT16:detail
.TE
.PP
返答が返ってくることで、簡易ライブラリはXJPフロントエンドが
確実に存在することを確認する。
接続されたXJPフロントエンドの状態がstateによって返される。
stateの内容と、XJPフロントエンドの状態の関係は以下の通り。
.RS
.IP 0 8
正常に接続された。
.IP ¥-1 8
XJPフロントエンド側に何らかの異常が存在する。このとき、detailには
どのような異常が存在するのかを示すエラー番号が入る。エラー番号に
ついては、``[付録1]エラー番号''を参照のこと。
.RE
.PP
.RE
.NH 3
かな漢字変換処理時の交信
.PP
かな漢字変換処理は、XLookupKanjiStringと、XJPフロントエンドが
socketを通して通信しあうことにより行われる。XLookupKanjiStringが
呼ばれると、XLookupKanjiStringの引き数のキーイベントがsocketを通して
XJPフロントエンドへ渡される。XJPフロントエンドは
その結果をsocketを通してXLookupKanjiStringに返す。
.PP
両者の通信は、XLookupKanjiStringの問い合わせに対して、必ず
XJPフロントエンドが返答をする、同期的な通信に
よって行われる。通信時に用いられる通信データの内容を以下に示す。
.RS
.IP (1) 4
XLookupKanjiStringからXJPフロントエンドへの問い合わせ
.PP
Xサーバから通知されるキーイベントそのものをXJPフロントエンドへ
渡す。その内容は以下の通り。
.TS
tab(:);
l l l.
1:2:code
1:KEYCODE:detail
2:CARD16:sequence number
4:TIMESTAMP:time
4:WINDOW:root
4:WINDOW:event
4:WINDOW:child
2:INT16:root-x
2:INT16:root-y
2:INT16:event-x
2:INT16:event-y
2:SETofKEYBUTMASK:state
1:BOOL:same-screen
1::unused
.TE
.PP
.IP (2) 4
XJPフロントエンドからXLookupKanjiStringへの返答
.PP
これに対して、XJPフロントエンドは返答を返すが、
その内容は以下の通り。
.TS
tab(:);
l l l.
2:INT16:state
2:INT16:length(detail)
4:KEYSYM:keysym
_
n:ARBITRARY:string
.TE
.LP
返答のうちの、それぞれのフィールドの意味は以下の通り。
.RS
.IP state 8
かな漢字変換の状態が返される。
.IP length(detail) 8
stateが正常終了を表している場合は、変換された文字列の長さが返る。stateが
エラー検出を表している場合には、エラー番号が入る。エラー番号に
ついては、``[付録1]エラー番号''を参照のこと。
.IP keysym 8
入力されたkeycodeに対応するkeysymが入る。
.RE
.sp
.LP
stateの返す値の意味は以下の通り。
.RS
.IP 0以上 8
正常終了
.IP ¥-1 8
異常が検出された
.RE
.PP
.IP (3) 4
処理
.PP
以上の形式のデータを使って次のような処理を行うことになる。
.RS
XLookupKanjiString
.IP ・ 2
（始めて呼ばれた場合には、初期化処理をする。）
.IP ・ 2
event構造体を(1)で示したデータ形式に変換する。
.IP ・ 2
そのデータをsocketに書き込む
.IP ・ 2
socketを読む
.IP ・ 2
(2)の形式のデータが返って来ているので、
それを元にリターン値を設定する。
.IP ・ 2
リターン
.RE
.RE
.NH 2
XJPフロントエンドでの対応
.PP
XJPフロントエンドでは次の３入力に対してselectをかけ、
処理を行うことになる。
.RS
.IP (1) 4
Xのイベント
.PP
Xのイベントの通信のためのsocketはdisplay構造体のfdメンバを
参照することによってえられる。このsocketに対して、入力が
あったばあいには、XNextEventを呼ぶ。
.IP (2) 4
新しいかな漢字変換クライアントとの接続の確立。
.PP
この入力ポートは、かな漢字変換クライアントが接続するために用意された
ポートであり、そのポート番号はプロパティJPFRONTENDに格納しておく。
かな漢字変換クライアントはそのプロパティを参照することによって
ポート番号を得、XJPフロントエンドに接続してくる。
XJPフロントエンドは接続してきたかな漢字変換クライアント
に対してacceptを実行することによってそのかな漢字変換クライアントとの
通信路を確立する。
.IP (3) 4
かな漢字変換クライアントからの変換要求の受け付け
.PP
かな漢字変換クライアントが、前節(1)のフォーマットで、
かな漢字変換の要求をしてくるので、かな漢字変換を行い、(2)の
フォーマットを用いて回答する。
.RE
