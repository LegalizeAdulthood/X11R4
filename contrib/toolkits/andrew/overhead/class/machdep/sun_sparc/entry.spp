	.globl	_class_Lookup
	.data
	.globl	_class_ErrorReturnValue
	.text

#include <sun4/asm_linkage.h>

L000:
	save	%sp,-SA(MINFRAME),%sp	! buy a stack frame
	sll	%g1, 2, %l0		! save the class entry index
! Do we really need the following instruction???
	mov	%g1, %o1		! index is second paramater(???)
	call	_class_Lookup		! call class_Lookup ...
	mov	%i0, %o0		! ... copying first parameter

	tst	%o0			! test return value
	bnz,a	L001			! if zero, error
	ld	[%o0 + %l0], %g1	! if not, get address of function

	sethi	%hi(_class_ErrorReturnValue), %l0
	ld	[%lo(_class_ErrorReturnValue) + %l0], %l0
	ret				! so return with error code
	restore	%l0, %g0, %o0

L001:
	jmp	%g1			! go there and
	restore				! pop the stack frame

#ifdef _STDC__
#define ClassEntry(n) \
	.globl	_ClassEntry ## n ;\
_ClassEntry ## n: ;\
	ba	L000 ;\
	mov	n,%g1
#else
#define ClassEntry(n) \
	.globl	_ClassEntry/**/n ;\
_ClassEntry/**/n: ;\
	ba	L000 ;\
	mov	n,%g1
#endif

#include <../common/entrydefs.h>
