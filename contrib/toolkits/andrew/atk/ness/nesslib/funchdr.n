-- funchdr.n
--	Convert method declarations from a .ch file into a routine header
--
--    Instructions:
--	- Copy the method declarations from your .ch file into the .c file.
--	- Select them and type ESC-ESC.
--	- At the Ness: prompt type 
--		funchdr_cvt("<classname>")
--	- replacing <classname> with the name of the class

--	a .ch header has an initial indent of a tab and the form:
--		functionNameTail ( type-1 arg-1 , ... ) returns type-r;
--			/* comment*/
--	where the  -returns type-r-  is optional  (-void- if omitted)

--	type-i is one of 
--		unsigned char [*]     char [*]     long [*]    unsigned long [*]
--		struct xxx *    boolean [*]    real [*]
--	actually we take everything to the comma and assume the last word is the arg
--	The list of words is only used when trying to identify a functionNameTail ( ...

-- 	corresponding output:
--		/* comment
--		*/
--			type-r
--		classname__functionNameTail(self, arg-1, arg-2, ...)
--			struct classname *self;
--			type-1 arg-1;
--			. . .
--		{
--		}


--	The basic approach is to produce a converted version of the header 
--	and replace the entire header with the converted value.

--	any syntax error in the input is processed by inserting the string "ERROR"
--	and quitting
	
	



marker CurTok;	-- current token about to be processed
marker EndTok;	-- end of text to search for decls 

marker Letters;	-- the set which may start a word
marker IdChars;	-- the set of characters that may appear in words

marker LastName; -- side result from ParseAnArg

function init()

	Letters := "qwertyuiopasdfghjklzxcvbnm_"
		~ "QWERTYUIOPASDFGHJKLZXCVBNM";
	IdChars := Letters ~ "0123456789";

end function

-- ParseAnArg
--	accumulate argument description
--	ending at "," or unmatched ")"
--	set LastName to last word encountered
--
function ParseAnArg()
	integer parencnt;
	marker thebeginning;
	parencnt := 0;
	thebeginning := CurTok;
	while CurTok /= "," and (CurTok /= ")" or parencnt > 0) do
		if CurTok = "(" then
			parencnt := parencnt + 1;
		elif CurTok = ")" then
		elif search(Letters, front(CurTok)) /= "" then
			LastName := CurTok;
		end if;
		CurTok := tokens_getC(CurTok);
	end while;
	return extent(thebeginning, start(CurTok));
end function


function DoADecl(classname)
	marker funcname;
	marker functype;
	marker names;
	marker types;
	marker comment;
	marker m;

	funcname := CurTok;
--printline("funcname: " ~ funcname);
	CurTok := tokens_getC(CurTok);	-- get "("

	names := newbase() ~ "self";
	types := "\tstruct " ~ classname ~ " *self;\n";
	CurTok := tokens_getC(CurTok);	-- get ")" or first token of an arg
	while CurTok /= ")" do
		if CurTok = "," then
			-- advance to start of arg decl
			CurTok := tokens_getC(CurTok);
		end if;
		types ~:= "\t" ~ ParseAnArg() ~ ";\n";
		names ~:= ", " ~ LastName;		-- side result of ParseAnArg
--printline("	arg name: " ~ LastName);
	end while;

	CurTok := tokens_getC(CurTok);	-- get token after ")"
	-- CurTok is either ";" or "returns"
	if CurTok = "returns" then
		functype := newbase();
		CurTok := tokens_getC(CurTok);	-- get token after "returns"
		while CurTok /= ";" do
			functype ~:= CurTok;
			CurTok := tokens_getC(CurTok);
		end while
	else
		functype := "void";
	end if;

	-- now CurTok is ";"
	CurTok := tokens_getC(CurTok);  -- skip ";"
				-- and load trailing comment into tokens_PreSpace()
	comment := tokens_PreSpace();
	m := search(comment, "/*");
	if m = "" or extent(m, comment) = "" then
		-- there was no comment
		comment := "\t" ~ extent(finish(match(names, "self, ")), names) ~ " - \n";
		m := search(comment, ", ");
		while m /= "" do
			replace (m, " - \n\t");
			m := search(finish(m), ", ");
		end while;
		if functype /= "void" then
			comment ~:= "\tReturns: ";
		end if;
	else
		-- strip comment to the part between /* and */
		comment := extent(next(m), comment);
		m := search(m, "*/");
		if previous(m) = "\n" then
			m := previous(m);
		end if;
		comment := extent(comment, start(m));
	end if;
	comment :=  "/* " ~ classname ~ "__" ~ funcname ~"(" ~ names ~ ")\n"
			~ comment ~ "\n"
			~ "*/\n";

	return 
		"\n"  ~  comment 
		~ "\t" ~ functype ~ "\n"
		~ classname ~ "__" ~ funcname ~ "(" ~ names ~ ")\n"
		~ types
		~ "{\n}\n";	
end function;


function funchdr_convertsection(s, classname)
	marker tok1 tok2;
	marker cvted;
	marker m;
	EndTok := finish(s);
	tok1 := tokens_getC(start(s));	-- get first token
	tok2 := tokens_getC(tok1);		-- get second token
	if tok2 /= ":" then
		CurTok := tok1;
	else 
		CurTok := tokens_getC(tok2);
	end if;

	cvted := newbase();
	while CurTok /= "" and extent(CurTok, s) /= "" do
		cvted ~:= DoADecl(classname);
	end while;
	return cvted; 
end function;


function funchdr_cvt(classname)
	marker s;
	s := currentselection();
	replace (s, funchdr_convertsection(s, classname));
end function;



-- SectionStart(t)
--	finds the next section start after the end of text
--	a section start is a colon preceded by one of the words
--		methods  overrides  classprocedures  macromethods  data
--
function SectionStart(t)
	marker w;
	while True do
		t := search(finish(t), ":");
		if t = "" then return t; end if;
		-- find word before the colon
		w := previous(t);
		while search(" \t\r\n", w) /= "" do w := previous(w); end while;
		while search(Letters, w) /= "" do w := previous(w); end while;
--printline("SS: " ~ extent(finish(w), start(t)));
		if search(" methods overrides classprocedures macromethods macros data ",
				" " ~ extent(finish(w), start(t)) ~ " ") /= "" then 
			-- bingo
			return extent(w, t);
		end if;
	end while
end function


-- NextSection(text)
--	returns the next section following the argument, which must be a section
--	a Section extends from one keyword-colon until just before the next
function NextSection(text)
	marker m;
	text := SectionStart(finish(text));
	if text = "" then return allnext(start(text)); end if;	-- everything after the arg section
	m := SectionStart(finish(text));
	if m = "" then 
		return allnext(start(text));		-- everything after the arg section
	else
		return extent(text, start(m));		-- from one keyword to the next
	end if;
end function


function main(args)
	marker filename;
	marker outname;
	marker text;
	marker outtext;
	marker ClassName;
	marker keyword;
	marker m;

	filename := token(args, IdChars ~ "./");

	m := extent(previous(previous(last(filename))), filename);  -- last 3 characters
	if m /= ".ch" then
		outname := filename ~ ".c";		-- append .c
	else 
		outname := extent(filename, start(m)) ~ ".c";  -- change .ch to .c
	end if;

	text := readfile(filename);
	if text = "" then
		printline("empty input file: " ~ filename);
		return;
	end if;

	keyword := search(text, "class");
	if keyword /= "" then
		ClassName := token(finish(keyword), IdChars);
	else
		-- use filename as classname
		classname := start(filename);
		m := search(classname, "/");
		while m = "/" and extent(m, filename) /= "" do
			classname := finish(m);
			m := search(classname, "/");
		end while;
		ClassName := span(ClassName, IdChars);
	end if;

	printline("funchdr: " ~ filename ~ " >> " ~ outname 
			~ "   Class: " ~ ClassName);

	outtext := newbase();
	m := NextSection(finish(keyword));
	keyword := token(m, Letters);
	while m /= "" and keyword /= "" do
--printline("Found section: " ~ keyword);
		if keyword = "methods" or keyword = "overrides" then
			outtext ~:= funchdr_convertsection(m, ClassName) 
					~ "\n";
		end if;
		m := NextSection(finish(m));
		keyword := token(m, Letters);
	end while

	m := "/tmp/t" ~ system("echo -n $$");
	writefile(m, outtext);
	system("cat " ~ m ~ " >> " ~ outname);
	printline("Appended to " ~ outname);
	system ("rm " ~ m);
end function;

