-- format.ness
--
--	Convert the current selection from ASCII to ATK by
--	removing newlines that are not the ends of paragraphs


-- The main routine
--	We process each newline in turn.
--	If it is preceded by a backslash, 
--		replace it and the backslash with one space
--	otherwise, it stays as is if
--		it is followed by white space or a newline
--		it is preceded by a newline
--		there is a tab or triple space before the next newline
--	otherwise, delete all preceding spaces and
--		if it is after the end of a sentence,
--			replace it with two spaces,
--		otherwise replace it with one space
--
--	The end of a sentence is one of  .  :  ;  ?  ! or one of these characters
--	followed by one of  '  "  }  ]  )

function wraplines(m)
	marker tab, triple, newline, nextnewline, p

	tab := start(m)
	triple := start(m)
	newline := search(m, "\n")

	while newline /= "" do
		if extent(newline, tab) = "" then
			tab := search(extent(newline, m), "\t")
		end if
		if extent(newline, triple) = "" then
			triple := search(extent(newline, m), "   ")  -- three spaces
		end if
		nextnewline := search(extent(next(newline), m), "\n")

		-- at this point, newline refers to a \n within m
		-- nextnewline, tab, and triple refer to the earlier of finish(m)
		-- or the next, respectively, \n, \t, or three spaces.

		if previous(newline) = "\\" then
			replace(extent(previous(newline), newline), " ")
		elif 
			previous(newline) = "\n"
			or search(" \t\n", next(newline)) /= "" 
			or extent(tab, nextnewline) /= ""
			or extent(triple, nextnewline) /= ""
		then
			-- leave the newline as is
		else
			p := previous(newline)
			while p = " " and extent(m, p) /= "" do
				-- replace preceding space
				replace (p, "")
				p := previous(newline)
			end while

--		if it is after the end of a sentence,
--			replace it with two spaces,
--		otherwise replace it with one space
--
--	The end of a sentence is one of  .  :  ;  ?  ! or one of these characters
--	followed by one of  '  "  }  ]  )

			if search("'\"}])", p) /= "" then
				p := previous(p)
			end if		-- {we may go before start(m)}
			if search(".:;?!", p) /= "" then
				replace(newline, "  ")   -- two spaces
			else
				replace(newline, " ")   -- one space
			end if
		end if

		newline := nextnewline
	end while
end function


function format_wrap()
	wraplines(currentselection(currentinset))
end function


extend "view:textview"
	on menu "Search/Spell,Wrap lines"
		wraplines(currentselection(currentinset))
	end menu
end extend


function main(args)
	marker filename, outname, text

	filename := token(args, "qwertyuiopasdfghjklzxcvbnm"
			~ "QWERTYUIOPASDFGHJKLZXCVBNM"
			~ "./0123456789")
	outname := search(filename, ".")
	text := search(finish(outname), ".")
	while text /= "" do
		outname := text
		text := search(finish(outname), ".")		
	end while
	if outname = "" or search(outname, "/") /= ""
			or extent(next(outname), filename) = "d" then
		outname := filename ~ ".d"
	else 
		outname := extent(filename, outname) ~ "d"
	end if


	printline("wc: " ~ filename ~ " -> " ~ outname)
	text := readfile(filename)
	system("mv " ~ outname ~ " " ~ outname ~ ".BAK")
	wraplines(text)
	writefile(outname, text)
end function
