/* ********************************************************************** *\
 *         Copyright IBM Corporation 1988,1989 - All Rights Reserved      *
\* ********************************************************************** */
/* $Header: /afs/andrew.cmu.edu/itc/sm/releases/X.V11R4/andrew/atk/ness/objects/RCS/compdefs.hn,v 1.4 89/09/03 22:46:43 wjh Exp $ */
/* $ACIS:$ */
/* $Source: /afs/andrew.cmu.edu/itc/sm/releases/X.V11R4/andrew/atk/ness/objects/RCS/compdefs.hn,v $ */

#ifndef _ness_compdefs_h_
#define _ness_compdefs_h_

#if !defined(lint) && !defined(LOCORE) && defined(RCS_HDRS)
static char *compdefs_hn_rcsid = "$Header: /afs/andrew.cmu.edu/itc/sm/releases/X.V11R4/andrew/atk/ness/objects/RCS/compdefs.hn,v 1.4 89/09/03 22:46:43 wjh Exp $";
#endif

/* compdefs.hn  -  definitions for nesscomp 

	THIS FILE IS PROCESSED BY nodeclass.n TO PRODUCE compdefs.h
	DO NOT EDIT compdefs.h

A source file which imports compdefs.h should also import nodeclass.h

*/
/* $Log:	compdefs.hn,v $
Revision 1.4  89/09/03  22:46:43  wjh
newness

Revision 1.3  89/06/01  15:58:30  wjh
campus release version

 */

#include "toksym.ih"
#include "nesssym.ih"
#include "envt.h"	/* for TSysMarkRef */

typedef union {
	struct nesssym *s;
	long i;
	struct varnode *varnode;
	struct exprnode *exprnode;
	struct predstatenode *predstatenode;
} YYSTYPE;


/* definitions of various flavors of nodes */

nodeclass varnode {
	long loc, len;
	struct nesssym *sym;
	struct toksym *paren;
};

nodeclass funcnode {
	TSysMarkRef SysMarkOffset;
	nesssym_scopeType outerscope, ownscope;
	long srcloc, srclen;
	struct nesssym *locallist;
	struct nesssym *parmlist;
	long functype;
};

nodeclass exprnode {
	Texpr type;
	struct exprnode *next;
	boolean IsCat;		/* TRUE if is the result of catenation */
	long loc, len;
};
#define exprnode_Combine(x,y,newtype) ( \
		x->len = y->loc+y->len-x->loc, \
		x->IsCat = FALSE, \
		x->type = newtype, \
		exprnode_Destroy(y),  x  )


nodeclass predstatenode {
	long fixuploc;	/* for ELIF */
	long objloc;	/* location at start of predicate (for WHILE) */
	long loc;		/* start of expr */
	struct gotonode *targetlist, *dropthrulist;
	boolean cond;
	char construct;	/* 'I'-if  'W'-while  'L'-function  'X'-expr  
				'A'-arg  'E'-extend  'V'-event  */
};

nodeclass gotonode {
	long gotoloc;		/* the obj code location of the branch opcode */
	struct gotonode *next;
};


/* these flags are in the flags field of a nesssym */

#define  flag_globalvar	(1<<0)
#define  flag_function	(1<<1)
#define  flag_parmvar	(1<<2)
#define  flag_localvar	(1<<3)
#define  flag_const		(1<<4)
#define  flag_builtin	(1<<5)
#define  flag_proctable	(1<<6)
#define  flag_classdefn	(1<<7)
#define  flag_var		(1<<8)
#define  flag_undef		(1<<9)
#define  flag_xobj		(1<<10)
#define  flag_event		(1<<11)
#define  flag_xfunc		(1<<12)
#define  flag_ness		(1<<13)
#define  flag_forward	(1<<14)

/* valid options:

flag_function | flag_ness		top level function in a script	funcnode
flag_function | flag_ness | flag_xfunc	function within an 'extend'	funcnode
flag_function | flag_builtin		a builtin function	  	builtindef	
flag_function | flag_proctable	  	function from proctable	callnode
flag_function | flag_classdefn  	function from class 	callnode
flag_function | flag_undef		undefined function		NULL or 1
		(the value 1 indicates that it is a for-sure undefined func)
flag_function | flag_forward		possibly a forward func call	callnode
flag_const			a constant		TSysMarkRef
flag_var | flag_parmvar		parameter of a function	none
flag_var | flag_localvar		local within a function	none
flag_var | flag_globalvar		global to a script		none
flag_var | flag_builtin		predefined variable	  	builtindef
flag_var | flag_undef		undefined variable		callnode
flag_undef			undefined identifier		none
flag_xobj				an extended object   	objnode
flag_event			an event			eventnode

*/

/* enum exprType {
 *	Tunk, Tlong, Tbool, Tdbl, Tstr, Tptr, Tfunc
 * }; 
 */
/* defn of Texpr is in nesssym.H as
 *	typedef unsigned long Texpr;  
 */
#define Tend	((Texpr) 0)   /* end of list of types */
#define Tlong	((Texpr) 1)   /* integer */
#define Tbool	((Texpr) 2)   /* boolean (unsigned long) */
#define Tbra	((Texpr) 3)   /* d.o. via branch predicates */
#define Tdbl	((Texpr) 4)   /* float */
#define Tstr	((Texpr) 5)   /* marker */
#define Tptr	((Texpr) 6)   /* pointer to object */
#define Tfunc	((Texpr) 7)   /* function */
#define Tvoid	((Texpr) 8)   /* function with no value */
#define Tunk	((Texpr) 9)   /* unknown type */

/* types in C code (w/ corresponding Ness type) */
#define Tcstr	((Texpr) 10)	/* char *  	(Tstr)  */
#define Tshrt	((Texpr) 11)	/* short  	(Tlong) */
#define Tchr	((Texpr) 12)	/* char   	(Tlong) */

extern char *TypeName[];  /* see gen.c */

#endif _ness_compdefs_h_
