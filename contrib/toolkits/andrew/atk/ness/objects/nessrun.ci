/* ********************************************************************** *\
 *         Copyright IBM Corporation 1988,1989 - All Rights Reserved      *
\* ********************************************************************** */
/* $Header: /afs/andrew.cmu.edu/itc/sm/releases/X.V11R4/andrew/atk/ness/objects/RCS/nessrun.ci,v 1.12 89/10/08 08:38:22 wjh Exp $ */
/* $ACIS:$ */
/* $Source: /afs/andrew.cmu.edu/itc/sm/releases/X.V11R4/andrew/atk/ness/objects/RCS/nessrun.ci,v $ */

#if !defined(lint) && !defined(LOCORE) && defined(RCS_HDRS)
static char *rcsid = "$Header: /afs/andrew.cmu.edu/itc/sm/releases/X.V11R4/andrew/atk/ness/objects/RCS/nessrun.ci,v 1.12 89/10/08 08:38:22 wjh Exp $";
#endif

/* nessrun.c
	run a ness program

	first argument is file name containing the ness program
		it must have a function main, which will be called
		to initiate execution
	remaining args are concatenated and passed as a single parameter to main()

*/

/*
 * $Log:	nessrun.ci,v $
 * Revision 1.12  89/10/08  08:38:22  wjh
 * fixed to return an exit value: zero for success
 * 
 * Revision 1.11  89/09/19  10:23:12  wjh
 * remove excess include of mark.ih
 * 
 * Revision 1.10  89/09/17  17:08:33  wjh
 * move  printallerrors out of here and into ness.c
 * 
 * Revision 1.9  89/06/23  17:24:35  wjh
 * (Items that should not be sent to downstairs are marked "R4".)
 * 
 * Added a call to CheckForInterrupt in the function calls and internal gotos.  Thus loops can be terminated with ^G.   (interp.c)  R4
 * 
 * Changed dokeys() so it uses im_DoKeySequence.  This means it is now possible to send a key sequence which involves the message line.  (interp.c)  R4
 * 
 * Implemented DoMenu(object, menustring).   This function causes the same behavior as if the user selected the menu option.  At present the menu string must be exactly as originally defined;  see the warning above for im_DoMenu().  (interp.c, call.c)  R4
 * 
 * Changed access to Ness library routines so they are always compiled.  (They used ot get the default of NoCompilation, so they were useless.)  (call.c)  
 * 
 * Removed a superflous {} pair.  {This is purely a cosmetic change.}  (nessmark.c) 
 * 
 * Fixed value_GetStringValue.  Formerly it was getting an invalid initial value.  {The fix was done by adding a call to nessmark_Initialize() in the stackString section.}  (nevent.c) 
 * 
 * Modified the data stream so errors will not occur when a ness object is the outermost object.  The fix was to add two bytes, "00", at the end of the origin string to prevent the former occurence of a spurious "\}".  (ness.c) 
 * 
 * Fixed menu handling so Ness and child menus get posted when there is a mouse click in an inset within the Ness.  Formerly neither set of menus was posted. (nessv.c) 
 * 
 * Fixed dostmt, the function called from ness-load, which is recommended to be bound to ESC-ESC.  It was using a NULL pointer, so people were getting core dumps if they typed ESC-ESC before doing a compile.  (ness.c) 
 * 
 * Avoided an infinite loop which occurred if a library function referred to a non-existent entry point within itself.  Did this by checking to see if the library function is already Compiling just before trying to compile it.  (call.c call.hn, call.h) 
 * 
 * Revised system marker allocation so the compilation will not get a subsequent error.  (gen.c)
 * 
 * Revised system marker allocation so it expands the space available if necessary. This will make it possible to compile larger programs.  (gen.c)
 * 
 * Changed the type of TType to long from struct object *.  This will allow compilation on stricter compilers.  (interp.h) 
 * 
 * Fixed nessmark_FinalizeObject so it would not reference a NULL pointer.  {Somehow the assembler noticed this bug!}  (nessmark.c) 
 * 
 * Changed functions which deal with constant strings to have (char *) as there argument type (SaveError, exprnode_Create, ReportError, ExprError, RunError, LocateErrorFunc, QueryReadOnly, makeConst, printallerrors) or return type (Freeze, argcounterr, argtypeerr).  This prevents compile errors on picky compilers.  (interp.c, error.c, call.c, ness.c, nessv.c, search.c, nevent.c, nessmark.c, nessrun.ci)  R4 
 * 
 * Changed Imakefile to store Imakefile in checkin rule.  (Imakefile)
 * 
 * 
 * Revision 1.8  89/06/01  16:03:11  wjh
 * campus release version
 * 
 * Revision 1.5  88/12/07  22:43:56  wjh
 * 
 * 9 Nov
 * implemented access level control
 * skip first line of script if starts with # (for shell script)
 * changed so the name of all initialization functions is init()
 * added ness-load
 * moved execution of init() from compilation to first execution
 * deferred compilation to first FullUpdate time
 * 
 * 22 Nov
 * proc table calls now work correctly with type-free procs  (the first arg can be anything)
 * added "cheat_" functions which will remain undocumented
 * changed inset() to a function
 * fixed some bugs in initial access
 * 
 * 25 November
 * added long strings
 * added Next Error menu option
 * made replace() work correctly in all cases
 * added class() and new()
 * 
 * 29 Nov
 * added ^<upper-case> and \e as characters in strings
 * added nextn() and length()
 * 
 * 6 Dec
 * added functions: parseint(), parsereal(), firstobject(), whereitwas(), replacewithobject(), addstyles(), nextstylegroup(), enclosingstylegroup(), clearstyles(), hasstyles()
 * catch bus and segmentation errors
 * 
 * 
 * Revision 1.4  88/11/16  12:01:25  wjh
 * 
 * implemented access level control
 * skip first line of script if starts with # (for shell script)
 * changed so the name of all initialization functions is init()
 * added ness-load
 * moved execution of init() from compilation to first execution
 * deferred compilation to first FullUpdate time
 * 
 * Revision 1.3  88/11/01  17:42:11  wjh
 * 
 * an empty Ness is now given a template (ness.template or default.template)
 * implemented:  extend proctable on proc "name" ...
 * added currentmark()
 * fixed a core dump by not recompile during UnlinkTree()
 * 
 * Revision 1.2  88/10/26  11:53:38  wjh
 * fixed a malloc abort bug that happened when certain error messages were discarded
 * added call to init() when initial compilation is done
 * fixed so events are posted to views whenever the view name is registered with the arbiter
 * 
 * Revision 1.1  88/10/21  11:00:33  wjh
 * Initial revision
 * 
 * Revision 1.0  88/07/11  09:57:23  wjh
 * Created from nesstest.c
 */


#include <stdio.h>
#include <event.ih>
#include <mark.ih>
#include <nessmark.ih>
#include <ness.ih>
#include <xgetchar.h>
#include <filetype.ih>
#include <text.ih>
#include <textv.ih>
#include <error.h>

/* include .ih files to be loaded with the binary of the file but none of whose
		methods are called in this file itself */
#define class_StaticEntriesOnly
#	include <observe.ih>
#	include <proctbl.ih>
#	include <dataobj.ih>
#	include <im.ih>

#if defined(GOODNESSRUN) || defined(STATICNESS)
#	include <lexdef.ih>
#	include <lex.ih>
#	include <sym.ih>
#	include <toksym.ih>
#	include <nesssym.ih>
#endif

#ifdef GOODNESSRUN
#	include <cursor.ih>
#	include <stylesht.ih>
#	include <nstdmark.ih>
#	include <envrment.ih>
#	include <bind.ih>
#	include <keyrec.ih>
#	include <updlist.ih>
#	include <atom.ih>
#	include <winsys.ih>
#	include <menulist.ih>
#	include <keymap.ih>
#	include <environ.ih>
#	include <namespc.ih>
#	include <view.ih>
#ifdef WM
#	include <wws.ih>
#	include <mrl.ih>
#	include <wcursor.ih>
#	include <wgraphic.ih>
#	include <wfontd.ih>
#	include <wim.ih>
#endif WM

/* if one were really trying to get arbiterview, too, one would need also all of the following
*	at present, goodnessrun gets a non-fatal error when it calls
*		arbiterview_GetNamedView()
*		if the version is out-of-date
*	#include <arbiterv.ih>
*	#include <dict.ih>
*	#include <atomlist.ih>
*	#include <celv.ih>
*	#include <value.ih>
*	#include <cel.ih>
*	#include <rm.ih>
*	#include <arbiter.ih>
*	#include <lsetv.ih>
*	#include <message.ih>
*	#include <filetype.ih>
*	#include <complete.ih>
*	#include <arbcon.ih>
*	#include <buffer.ih>
*/
#endif GOODNESSRUN

#undef class_StaticEntriesOnly

struct ness *program;


	void
dumpall()
{
	struct ness *n;
	unsigned char *name;
	for (n = ness_GetList(); n != NULL; n = ness_GetNext(n)) {
		name = ness_GetName(n);
		printf("\nObject code for %s\n", (name != NULL) ? name : (unsigned char *)"unknown");
		ness_dumpattrs(n, stdout);
	}
}


main(argc, argv)
	register int  argc;
	register unsigned char  **argv;
{
	struct errornode *result;
	struct nessmark *arg, *args, *blank;
	long t0, t1;
	unsigned char *fnm;
	boolean debug = FALSE;
	struct text *text;
	struct textview *textview;

	class_Init(AndrewDir("/dlib/atk"));

	observable_StaticEntry;
	proctable_StaticEntry;
	dataobject_StaticEntry;
	im_StaticEntry;

#if defined(GOODNESSRUN) || defined(STATICNESS)
	ness_StaticEntry;
	nessmark_StaticEntry;
	lexdef_StaticEntry;
	lex_StaticEntry;
	sym_StaticEntry;
	toksym_StaticEntry;
	nesssym_StaticEntry;
#endif

#ifdef GOODNESSRUN
	/* statically load whatever we need, so we can run the binary even while
	the system is under development */

	text_StaticEntry;
	filetype_StaticEntry;
	simpletext_StaticEntry;
	cursor_StaticEntry;
	event_StaticEntry;
	stylesheet_StaticEntry;
	nestedmark_StaticEntry;
	environment_StaticEntry;
	textview_StaticEntry;
	bind_StaticEntry;
	keyrec_StaticEntry;
	updatelist_StaticEntry;
	atom_StaticEntry;
	windowsystem_StaticEntry;
	menulist_StaticEntry;
	keymap_StaticEntry;
	environ_StaticEntry;
	namespace_StaticEntry;
	mark_StaticEntry;
	view_StaticEntry;
#ifdef WM
	wmws_StaticEntry;
	mrl_StaticEntry;
	wmcursor_StaticEntry;
	wmgraphic_StaticEntry;
	wmfontdesc_StaticEntry;
	wmim_StaticEntry;
#endif WM
#endif GOODNESSRUN

	fnm = NULL;
	argv++, argc--;		/* skip "nessrun" */
	while (argc-- > 0) {
		unsigned char *arg = *argv++;
		if (*arg == '-')
			switch (*(arg+1)) {
			case 'd': /* Debugging. */
				debug = TRUE;
				break;
			default: 
				printf("\"%s\" is invalid. The only valid switches are r, o, y, g, b, A, d\n",
						arg);
				break;
			}
		else { /* It's a file, right? */
			fnm = arg;
			break;	/* remaining args go the the ness program */
		}
	}

	text = text_New();
	textview = textview_New();
	textview_SetDataObject(textview, text);

	program = ness_New();
	ness_SetDefaultText(program, textview);
	ness_SetName(program, fnm);
	ness_SetAccessLevel(program, ness_codeUV);

	if (fnm == NULL) {
		printf("missing argument: <filename>.n\n");
		exit(1);
	}
	else if (ness_ReadNamedFile(program, fnm) != dataobject_NOREADERROR)
		exit(1);

			t0 = event_TUtoMSEC(event_Now());
	result = ness_Compile(program);
			t1 = event_TUtoMSEC(event_Now());

	if (debug)
		dumpall();

	if (ness_PrintAllErrors("Compile") != 0)
		exit(1);
	else printf ("Compile okay.  Elapsed time is %d msec.\n", t1-t0);


	blank = nessmark_New();
	nessmark_MakeConst(blank, " ");
	arg = nessmark_New();
	args = nessmark_New();
	nessmark_SetText(args, simpletext_New());
	while (argc-- > 0) {
		nessmark_MakeConst(arg, *argv);
		nessmark_Next(args);
		nessmark_Replace(args, arg);
		nessmark_Next(args);
		nessmark_Replace(args, blank);
		argv++;
	}
	nessmark_Base(args);
	ness_SupplyMarkerArg(program, args);

			t0 = event_TUtoMSEC(event_Now());
	result = ness_Execute(program, "main");
			t1 = event_TUtoMSEC(event_Now());

	if (result != NULL) 
		ness_PrintAllErrors("Execution");
	else
		printf ("Execution okay.  Elapsed time is %d msec.\n", t1-t0);
	exit((result == NULL) ? 0 : 1);
}

