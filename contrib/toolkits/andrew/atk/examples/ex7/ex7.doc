\begindata{text,269655076}
\textdsversion{12}
\template{default}
\define{itemize
}
\formatnote{\chapter{Example 7:  The Application Layer}} \indexi{Application 
layer}


Many views are used in two contexts:  as components in programs and in user 
applications.  \italic{textview} might be used by the \italic{frame} object to 
build the message line and it is used by the application program \bold{ EZ}. 
 When used as a component in other programs, it might be inappropriate for 
\italic{textview} to present itself with a scroll bar.  For example, the class 
\italic{label} may want to use \italic{textview} as a component for presenting 
labels on drawings.  However, when used in an user application like a 
text-editor, the scroll bar is appropriate. 


The Andrew Toolkit provides a view method, \italic{GetApplicationLayer},

\indexi{ \italic{GetApplicationLayer}}  

\indexi{ \italic{view_GetApplicationLayer}} 

that allows views to present themselves as they ought to appear in user 
applications.  Example 7 illustrates how to create a view that has an 
application layer, specifically, a view that uses an application layer to 
display its scroll bars.  \indexi{Scroll bars++Application layer}


The example program in this section will build on the program in Example 6. 
 The functionality of the example is exactly the same as in the previous 
example, that is, the program creates a window with "hello world" centered in 
it.  The window will have a horizontal and a vertical scroll bar with which 
you can move the text string, as well as key and menu functions for centering 
the string and inverting the window, and quitting the program.  Only the 
internal structure of the program will be changed. 


The following discussion will present a step-by-step description of how to 
modify the \italic{helloworldview} class in Example 6 to produce Example 7. 
 If you were to follow the steps, you would produce a program, called 
\italic{helloworldapp}, in five files: 


\itemize{
a helloworldview.H file -- will contain the class definition for 
\italic{helloworldview}.  We will modify the class definition from Example 6 
to override \italic{view}'s method for providing and getting rid of an 
application layer. 


a helloworldview.c file -- will contain statements that import Andrew Toolkit 
classes and define the object's methods and class procedures.  We will add to 
Example 6 methods for creating and destroying an application layer. 


a helloworldapp.H file -- will contain the class definition for the 
application program that will display an instance of the class in a window. 
 This will be exactly the same as in Example 6. 


a helloworldapp.c -- will contain declarations needed by the Andrew Toolkit 
linking and loading facilities as well the definition of the 
\italic{helloworldview} application method.  We will include procedures to 
create the scroll bar in an application layer. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as Example 6. 

}

For a complete listing of these files, see \italic{Program listing for Example 
7 } at the end of this section on p. 
\begindata{textref,269761908}
\textdsversion{12}
# ExSevenListing\
\enddata{textref,269761908}
\view{textrefv,269761908,75,0,0}.  The source code is available in the 
directory /usr/andrew/examples/ex7, together with the compiled program. 


Although the discussion of the steps refers directly to this example, the 
information generally applies to the creation of any class that contains 
application layers. 

\begindata{bp,269755660}
\enddata{bp,269755660}
\view{bpv,269755660,76,0,0}
\section{Running the example program}


The program has the same functionality as Example 6, and will behave exactly 
like it.  Refer to the previous chapter for instructions on the scroll bar 
functionality. 


\formatnote{
\bold{Action 1.}   \formatnote{To run the program, at the \bold{Typescript 
}prompt type


runapp /usr/andrew/examples/ex7/helloworldapp


and press the Enter key.

}}

\section{Overview of application layers}


The class view provides two methods, \italic{GetApplicationLayer} and 
\italic{DeleteApplicationLayer}, \indexi{ \italic{DeleteApplicationLayer}} 

\indexi{ \italic{view_DeleteApplicationLayer}}  

\indexi{Application layer++Methods}

that allow views to present a second view of themselves that is appropriate 
for applications.  The multi-media editor \bold{ez} uses these methods.  When 
the multi-media editor encounters an arbitrary application's 
\italic{dataobject} and \italic{view}, it calls the view's 
\italic{GetApplicationLayer} method.  This method should create and return an 
appropriate user application view of its \italic{dataobject}.  For example, 
\italic{textview} returns a view consisting of a view of the text and a scroll 
bar; a drawing application might return a view consisting of a palette, two 
scroll bars and a view of the drawing.  When the application view is about to 
be deleted, the multi-media editor calls \italic{DeleteApplicationLayer}. 
 This method should destroy the application layer view that 
\italic{GetApplicationLayer} created earlier. 


\section{Modifying the class definition}


\subsection{Defining the class}


If you are creating a subclass of view that will have an application layer, 
you must override two methods:  \italic{GetApplicationLayer} and 
\italic{DeleteApplicationLayer}.   The following is the new class declaration 
for the example class \italic{helloworldview}:  \indexi{Class++Declaring}


\formatnote{
class helloworldview: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit(enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetInterface(int type) returns char *;

    \bold{GetApplicationLayer() returns struct view *;

          DeleteApplicationLayer(struct view *);}

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean HaveDownTransition;

    boolean haveInputFocus;

    long x,y;

    long distX,distY;

    long frameX, frameY;

    boolean blackOnWhite;

    long newX,newY;

    boolean newBlackOnWhite;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

\};

}


\subsection{Creating an application layer for a view} \indexi{Application 
layer++Creating}


A \italic{GetApplicationLayer}

\indexi{ \italic{GetApplicationLayer}} 

method takes a view as its only argument and returns the application layer 
view, which usually contains the first view as a child view.  The method used 
to create the application layer view is dependent on the view. 


For example, \italic{helloworldview} will wrap itself in a scrollbar when 
asked to present itself as an application, as defined in the file 
\italic{helloworldview.c}: 


\formatnote{
struct view *helloworldview__GetApplicationLayer(hwv)

struct helloworldview *hwv;

\{

    return (struct view *)scroll_Create(hwv,scroll_LEFT+scroll_BOTTOM);

\}

}

The statement \italic{scroll_Create}

\indexi{Scroll bars++Creating} 

automatically creates a new scroll bar object and makes the first argument 
passed, the \italic{helloworldview} view, \italic{hwv}, a child view of the 
newly created scroll bar object.  The second argument tells it what kinds of 
scrollbars are surrounding the view. In this case, there will be scroll bars 
on the left and on the bottom. 


It is up to the applications programmer to decide to call GetApplicationLayer, 
since there is currently no mechanism for the method to decide whether an 
object is appropriate or not. 


\subsection{Deleting the application layer}  \indexi{Application 
layer++Deleting}


If you are defining a subclass of view that has an application layer, you 
should provide a \italic{DeleteApplicationLayer}

\indexi{ \italic{DeleteApplicationLayer}} 

method to perform any clean up required before deleting the application layer 
view (usually very little), and destroy the view. 


For example, helloworldview provides the following method, defined in 
\italic{helloworldview.c}: 


\formatnote{
void helloworldview__DeleteApplicationLayer(hwv,scrollbar)

struct helloworldview *hwv;

struct scroll *scrollbar;

\{

    scroll_Destroy(scrollbar);

\}

}

The statement \italic{scroll_Destroy(scrollbar) } 

\indexi{Scroll bars++Destroying} suffices to destroy the view.  The 
\italic{Destroy} procedure is defined automatically by Class preprocessor 
program.  \indexi{ \italic{Destroy}}



\subsection{Asking a view for its application layer}  \indexi{Application 
layer++Requesting}


To ask a view for its application layer, you simply call its 
\italic{GetApplicationLayer.}  For example, the multi-media editor, \bold{EZ}, 
may ask an object for its application layer when the object is dynamically 
loaded. 


In this example, we will modify \italic{helloworldapp.c} by declaring an 
application layer structure instead of a scroll bar structure, adding a call 
to GetApplicationLayer, then adding a call to DeleteApplicationLayer to the 
im_Create call.  Finally, the application layer is added into the view tree 
with a call to im_SetView. 

\indexi{ \italic{Start}} 

\indexi{Application layer++View tree hierarchy} 

\indexi{Scroll bars++View tree hierarchy}

 

\formatnote{
#include <class.h>


#include "helloworldapp.eh"


#include "im.ih"

#include "helloworldview.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworldview *hwv;

    \bold{struct view *applayer;}

    struct im *im;


    if(!super_Start(hwapp))

 	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL)

	return FALSE;


    \bold{applayer=helloworldview_GetApplicationLayer(hwv);

          if(applayer==NULL)\{

	      helloworldview_Destroy(hwv);

	      return FALSE;

          \}


           im=im_Create(NULL);

           if(im==NULL)\{

	      helloworldview_DeleteApplicationLayer(hwv,applayer);

	      helloworldview_Destroy(hwv);

	      return FALSE;

          \}


           im_SetView(im,applayer);}


    helloworldview_WantInputFocus(hwv,hwv);


    return TRUE;

\}


}

Since the application layer is not an object in the view tree, it cannot be 
destroyed.  Instead, the DeleteApplicationLayer method is called to remove it 
in case the im_Create

\indexi{Interaction manager++\italic{Create}} 

method fails. 

\begindata{bp,269855752}
\enddata{bp,269855752}
\view{bpv,269855752,77,0,0}
\begindata{texttag,269930780}
\textdsversion{12}
ExSevenListing\
\enddata{texttag,269930780}
\view{texttagv,269930780,78,0,0}
\section{Program listing for Example 7}

\formatnote{
\bold{helloworldview.H}


class helloworldview: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit(enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetInterface(int type) returns char *;

    GetApplicationLayer() returns struct view *;

    DeleteApplicationLayer(struct view *);

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean HaveDownTransition;

    boolean haveInputFocus;

    long x,y;

    long distX,distY;

    long frameX, frameY;

    boolean blackOnWhite;

    long newX,newY;

    boolean newBlackOnWhite;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

\};



\bold{helloworldview.c}


#include <class.h>


#include "helloworldview.eh"


#include "graphic.ih"

#include "rectangle.h"

#include "keymap.ih"

#include "keystate.ih"

#include "menulist.ih"

#include "scroll.ih"

#include "bind.ih"


#define POSUNDEF -1

#define TOTALSIZE 1500


static void xgetinfo(), xsetframe(), ygetinfo(), ysetframe();

static long xwhat(), ywhat();


static struct scrollfns horizInterface = \{

    xgetinfo, xsetframe, NULL, xwhat

\};


static struct scrollfns vertInterface = \{

    ygetinfo, ysetframe, NULL, ywhat

\};


static struct keymap *helloworldviewKeymap;

static struct menulist *helloworldviewMenulist;


boolean helloworldview__InitializeObject(classID, hwv)

    struct classheader *classID;

    struct helloworldview *hwv;   

\{

    hwv->x = POSUNDEF;

    hwv->y = POSUNDEF;

    hwv->HaveDownTransition = FALSE;

    hwv->haveInputFocus = FALSE;

    hwv->keystate = keystate_Create(hwv, helloworldviewKeymap);

    hwv->blackOnWhite = TRUE;

    hwv->newBlackOnWhite = TRUE;

    hwv->menulist = menulist_DuplicateML(helloworldviewMenulist, hwv);

    hwv->newFrameX = hwv->newFrameY = 0;

    return TRUE;

\}


struct view *helloworldview__GetApplicationLayer(hwv)

struct helloworldview *hwv;

\{

    return (struct view *)scroll_Create(hwv,scroll_LEFT+scroll_BOTTOM);

\}


void helloworldview__DeleteApplicationLayer(hwv,scrollbar)

struct helloworldview *hwv;

struct scroll *scrollbar;

\{

    scroll_Destroy(scrollbar);

\}


void helloworldview__FullUpdate(hwv, type, left, top, width, height)

struct helloworldview *hwv;

enum view_UpdateType type;

long left;

long top;

long width;

long height; 

\{

    struct rectangle myVisualRect;


    helloworldview_GetVisualBounds(hwv,&myVisualRect);

    hwv->vrWidth=rectangle_Width(&myVisualRect);

    hwv->vrHeight=rectangle_Height(&myVisualRect);


    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;


    hwv->frameX = hwv->newFrameX;

    hwv->frameY = hwv->newFrameY;


    if (hwv->x == POSUNDEF)  \{

	hwv->x = hwv->frameX + hwv->vrWidth / 2;

	hwv->y = hwv->frameY + hwv->vrHeight / 2;

	hwv->newX = hwv->x;

	hwv->newY = hwv->y;

    \}

    else \{

	hwv->x = hwv->newX;

	hwv->y = hwv->newY;

    \}


    helloworldview_SetTransferMode(hwv, graphic_COPY);


    if (hwv->blackOnWhite)  \{

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_WhitePattern(hwv));

    \}

    else  \{

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_BlackPattern(hwv));

    \}


    helloworldview_SetTransferMode(hwv, graphic_INVERT);


    helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

    helloworldview_DrawString(hwv,"hello world",

			   graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);    

\}



void helloworldview__Update(hwv)

struct helloworldview *hwv;

\{    

      /* TransferMode is graphic_INVERT from the last FullUpdate */


    if (hwv->newBlackOnWhite != hwv->blackOnWhite)  \{

	struct rectangle vr;

	helloworldview_GetVisualBounds(hwv,&vr);

	helloworldview_FillRect(hwv, &vr, helloworldview_BlackPattern(hwv));

	hwv->blackOnWhite = hwv->newBlackOnWhite;

    \}


    if (hwv->newX != hwv->x || hwv->frameX != hwv->newFrameX || hwv->newY != 
hwv->y || hwv->frameY != hwv->newFrameY) \{

	helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

	helloworldview_DrawString(hwv, "hello world", graphic_BETWEENTOPANDBASELINE | 
graphic_BETWEENLEFTANDRIGHT);


	hwv->x = hwv->newX;

	hwv->y = hwv->newY;

	hwv->frameX = hwv->newFrameX;

	hwv->frameY = hwv->newFrameY;


	helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

	helloworldview_DrawString(hwv, "hello world", graphic_BETWEENTOPANDBASELINE | 
graphic_BETWEENLEFTANDRIGHT);

    \}

\}



struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hwv->newX=x-hwv->distX;

		hwv->newY=y-hwv->distY;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hwv->newX=x;

		hwv->newY=y;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->distX=x-hwv->x;

		hwv->distY=y-hwv->y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworldview_WantUpdate(hwv,hwv);


    return (struct view *)hwv;

\}



void helloworldview__ReceiveInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = TRUE;

    hwv->keystate->next = NULL;

    helloworldview_PostKeyState(hwv, hwv->keystate);

    helloworldview_PostMenus(hwv, hwv->menulist);

\}



void helloworldview__LoseInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = FALSE;

\}



static void Center(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    hwv->newX = hwv->newFrameX + hwv->vrWidth / 2;

    hwv->newY = hwv->newFrameY + hwv->vrHeight / 2;

    helloworldview_WantUpdate(hwv, hwv);

\}



static void Invert(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    hwv->newBlackOnWhite = ! hwv->newBlackOnWhite;

    helloworldview_WantUpdate(hwv, hwv);

\}



static void xgetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameX;

    seen->end = hwv->frameX + hwv->vrWidth;

    dot->beg = dot->end = hwv->x;

\}


static void ygetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameY;

    seen->end = hwv->frameY + hwv->vrHeight;

    dot->beg = dot->end = hwv->y;

\}


static void xsetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameX = posn - hwv->vrWidth * cord / outof;

    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    else if (hwv->newFrameX < 0)

	hwv->newFrameX = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static void ysetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameY = posn - hwv->vrHeight * cord / outof;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;

    else if (hwv->newFrameY < 0)

	hwv->newFrameY = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static long xwhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameX + hwv->vrWidth * cord / outof;

\}


static long ywhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameY + hwv->vrHeight * cord / outof;

\}



char *helloworldview__GetInterface(hwv, type)

struct helloworldview *hwv;

char *type;

\{

    if (strcmp(type, "scroll,vertical") == 0)

	return (char *) &vertInterface;

    else if (strcmp(type, "scroll,horizontal") == 0)

	return (char *) &horizInterface;

    else

	return NULL;

\}



static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003",0, "Hello World,Center",0,0, Center, 
"Center the helloworld string."\},

    \{"helloworld-invert", "\\011",0, "Hello World,Invert",0,0, Invert, 
"Invert the helloworld string."\},

    NULL

\};


boolean helloworldview__InitializeClass(classID)

    struct classheader *classID;

\{

    helloworldviewMenulist=menulist_New();

    helloworldviewKeymap=keymap_New();

    bind_BindList(helloworldviewBindings, 

    helloworldviewKeymap,helloworldviewMenulist,

                          &helloworldview_classinfo);

    return TRUE;

\}



\bold{helloworldapp.H}


class helloworldapp : application\{

    overrides:

	Start() returns boolean;

\};



\bold{helloworldapp.c}


#include <class.h>


#include "helloworldapp.eh"


#include "im.ih"

#include "helloworldview.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworldview *hwv;

    struct view *applayer;

    struct im *im;


    if(!super_Start(hwapp))

	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL)

	return FALSE;


    applayer=helloworldview_GetApplicationLayer(hwv);

    if(applayer==NULL)\{

	helloworldview_Destroy(hwv);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL)\{

	helloworldview_DeleteApplicationLayer(hwv,applayer);

	helloworldview_Destroy(hwv);

	return FALSE;

    \}


    im_SetView(im,applayer);


    helloworldview_WantInputFocus(hwv,hwv);


    return TRUE;

\}

\begindata{bp,269855648}
\enddata{bp,269855648}
\view{bpv,269855648,79,0,0}
\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .H .do


.H.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.H

.H.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.H


.o.do:

	$\{MAKEDO\} $<



all:  helloworldapp.do helloworldview.do


helloworldapp.do: helloworldapp.o helloworldapp.eh

helloworldview.do: helloworldview.o helloworldview.eh


helloworldapp.o: helloworldapp.c

helloworldapp.o: $\{INCLUDESRC\}/application.ih

helloworldapp.o: $\{INCLUDESRC\}/graphic.ih

helloworldapp.o: $\{INCLUDESRC\}/im.ih

helloworldapp.o: $\{INCLUDESRC\}/observable.ih

helloworldapp.o: $\{INCLUDESRC\}/point.h

helloworldapp.o: $\{INCLUDESRC\}/rectangle.h

helloworldapp.o: $\{INCLUDESRC\}/view.ih

helloworldapp.o: $\{SRCDIR\}include/class.h

helloworldapp.o: helloworldview.ih

helloworldapp.o: helloworldapp.eh

helloworldapp.eh helloworldapp.ih: helloworldapp.H

helloworldapp.eh helloworldapp.ih: $\{INCLUDESRC\}/application.ih

helloworldview.o: helloworldview.c

helloworldview.o: $\{INCLUDESRC\}/graphic.ih

helloworldview.o: $\{INCLUDESRC\}/observable.ih

helloworldview.o: $\{INCLUDESRC\}/point.h

helloworldview.o: $\{INCLUDESRC\}/rectangle.h

helloworldview.o: $\{INCLUDESRC\}/view.ih

helloworldview.o: $\{SRCDIR\}include/class.h

helloworldview.o: helloworldview.eh

helloworldview.eh helloworldview.ih: helloworldview.H

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/graphic.ih

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/observable.ih

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/point.h

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/rectangle.h

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/view.ih

helloworldview.eh helloworldview.ih: $\{SRCDIR\}include/class.h




}



\enddata{text,269655076}
