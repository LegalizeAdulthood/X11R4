\begindata{text,269793984}
\textdsversion{12}
\template{default}
\define{itemize
}
\chapter{\formatnote{Example 15 -- Creating Styles in Documents} }

\indexi{Styles++Document} \indexi{Style} \indexi{Class++Style} 
\indexi{Stylesheet} \indexi{Class++Stylesheet}\indexi{Tree23}

\indexi{Class++Tree23} \indexi{Environment}\indexi{Class++Environment}


Example 15 illustrates the use of styles in text documents.  Styles can be 
fonts, predefined title or region formats, justifications, and so on.  In this 
example, we will modify the text class in Example 14 to print "Hello world!" 
with bold-face and italic type, similar to the display in Example 13.  The 
Andrew Toolkit provides several classes for dealing with styles in text 
documents:  \italic{stylesheet}, \italic{style}, \italic{tree23}, and 
\italic{environment}.  Of these, we need only to use the class \italic{style} 
explicitly for this program. 


An Andrew Toolkit text object has an associated tree of \italic{environments}, 
each of which has a position in the text object, a length, and a \italic{style} 
(a different "style" from the font descriptor styles Example 13, but with a 
similar use).  They must be nested, i.e., an environment must be wholly 
contained within its parent.  Any text within the region encompassed by an 
environment is modified by that environment's style, the environment's 
parent's style, and so on.  Styles affect such things as font size, font style 
(the font descriptor style), text layout (justification, indenting), and so 
on. 


The effects of multiple styles on the same piece \indexi{Styles++Multiple}

of text is cumulative:  text contained in an environment with a style that 
turns on bold, whose parent's style turns on italic would be displayed as 
bold-italic.  It is important to note, however, that an environment takes 
precedence over its ancestors.  Styles can also be used turn off various 
attributes, for example, a "plainer" style will strip off a style. 


The discussion that follows presents a step-by-step description of how to 
modify the text class in Example 14 to produce Example 15.  If you were to 
follow the steps, you would produce a program, called \italic{helloworldapp}, 
in three files: 


\itemize{
a helloworldapp.H file -- will contain the class definition for the 
application program that will display an instance of the class in a window. 
 This will be exactly the same as in Example 14. 


a helloworldapp.c -- will contain declarations needed by the Andrew Toolkit 
linking and loading facilities as well the definition of the 
\italic{helloworldview} application method.  We will add to the Start method 
the statementes necessary for creating styled text. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as Example 14. 

}

For a complete listing of these files, see \italic{Program Listing for Example 
15} at the end of this section on p. 
\begindata{textref,269905012}
\textdsversion{12}
# ExFifteenListing\
\enddata{textref,269905012}
\view{textrefv,269905012,119,0,0}.  The source code is available in the 
directory /usr/andrew/examples/ex15, together with the compiled program. 


Although the discussion of the steps refers directly to this example, the 
information generally applies to the creation of any text document with 
styles. 


\begindata{bp,269775624}
\enddata{bp,269775624}
\view{bpv,269775624,120,0,0}
\section{Running the example program}


\formatnote{\bold{Action 1.} \formatnote{To run the program, at the 
\bold{Typescript }prompt type


runapp /usr/andrew/examples/ex15/helloworldapp


and press the Enter key.

}

\bold{Response.}\formatnote{   }The program will produce two windows each 
with\bold{ Hello}

\italic{world! }in the upper-left corner of the window, a vertical scroll

bar, a message line, and the default text menus.



\bold{Action 2.} \formatnote{   }Position the cursor in front of \bold{Hello} 
with the mouse

and type in some characters.


\bold{Response. } \formatnote{   }The characters will be inserted.



\bold{Action 3.}\formatnote{   }Position the cursor within or immediately 
after \bold{Hello}

and type some characters.


\bold{Response. }\formatnote{   }The characters will be inserted in bold-face. 
 Environments

on styles are defined so that the cursor lies within the style at the

end, and outside the style at the beginning of a styled region.  Thus,

any character typed after a styled region is displayed in that style;

any typed in front of the region is not.



\bold{Action 4.}\formatnote{   }Position the cursor immediately in front of 
\italic{world} and

type some characters.


\bold{Response.} \formatnote{   }The characters will be inserted in regular 
type.


\bold{Action 5.}\formatnote{   }Position the cursor within or immediately 
after \italic{world}

and type some characters.


\bold{Response.} \formatnote{   }The characters will be inserted in italic 
font.



\bold{Action 6.}\formatnote{   } Position the cursor immediately after the ! 
and type

some characters.


\bold{Response.} \formatnote{   }The characters will be inserted in regular 
type.



\bold{Action 7.}\formatnote{   }To quit the program, pop-up the menus and 
choose \bold{Quit}

from the top card.


\bold{Response.} \formatnote{   }The windows will disappear from the screen.


}\
\begindata{bp,269839548}
\enddata{bp,269839548}
\view{bpv,269839548,121,0,0}
\section{Overview of Styles}


Here are some basic definitions of the major components of the complete style 
package:  \indexi{Style++Package}


\leftindent{\bold{Templatelist} \indexi{Template list} - the group of most 
recently used templates for a given editor session.  This avoids have to read 
the same templates in repeatedly when switching between text documents. 


\bold{Template} \indexi{Template} - a stylesheet

\indexi{Style sheet} which is saved in a file separate from the rest of the 
document.  Creation of a template allows its styles and global attributes to 
be easily included in multiple documents. 


\bold{Stylesheet} - the group of styles and global attributes which are 
applicable to the current document. 


\bold{Style} -

\indexi{Style} 

the group of devices which are applicable to the current style.  The style is 
most often the object that should be

 referenced.  Style names (e.g. bold, subheading, etc.) are used in the 
external representation to indicate where a styled region begins. 


}

\subsection{External data representation of styles}

\indexi{Styles++External representation} 


The external data representation is entirely in ascii, and is expected to be 
used both for storing objects in files and for cut and paste operations.  A 
stylesheet can contain zero or more styles, each of which can contain multiple 
font/style definitions. 


Text documents which contain no style information or other objects are treated 
as uninterpreted files and stored in a straightforward manner.  Text documents 
which do contain these extra dimensions are written with a special syntax. 
 The general syntax of these interpreted files follows the protocols defined 
in the documentation for stylesheet. 


Here is one example of creating a style:  \indexi{Style++Creating}


\example{
struct stylesheet *ssptr;  struct style *styleptr; 


if ((styleptr = stylesheet_Find(ssptr, "bold")) == NULL) \{


	styleptr = style_New(); 


	style_SetName(styleptr, "bold"); 


	style_SetMenuName(styleptr, "Font~1,Bold~10"); 


	stylesheet_Add(ssptr, styleptr); 


\}


style_AddNewFontFace(bold, fontdesc_Bold); 


}

Notes: 


\itemize{
It is not necessary to add the style to a stylesheet, programs may create and 
use styles independently of the stylesheet. 


It is not necessary to set the menu name for a style.  If no menu name is 
given, the style will not be added to the menu.  (It is also not necessary to 
give prioritization in the menu string). 


}

\subsection{Global vs. default styles}

\indexi{Styles++Global} 

\indexi{Styles++Default}


There are two ways of modifying the style that defines how normal (unstyled) 
text looks for a particular application.  One way is through the global style, 
and the other is through the default style. 


The global style is associated with the text object.  This style is attached 
to the root environment of the 23tree.  Usually, this style would be under 
control of the application program and it defines the basic attributes for all 
text (that is, it is global to the document).  The global style is the place 
to set up application specific attributes such as using a fixed with font and 
left justification (no fill) in ctext. 


The default style is associated with the textview.  This style is attached to 
the textview object.  Usually, this style is defined by the user through the 
preferences file.  The default style is the place to set up user specific 
attributes such as bodyfont (fontfamily and fontsize) in typescript. 


In this example, we will be modifying the default styles for the text inset 
from the previous example. 


\section{Modifying the class definition}


First, we will import procedures from style as well as fontdesc. 
\indexi{Importing}

\indexi{Fontdesc} \indexi{Font descriptor}


\formatnote{
#include <class.h>


#include "helloworldapp.eh"


#include "im.ih"

#include "frame.ih"

#include "text.ih"

#include "dataobject.ih"

#include "view.ih"

\bold{#include "fontdesc.ih"

#include "style.ih"}


}
Then, we will modify the Start

\indexi{ \italic{Start}} 

method to create italic and bold environments, and have the program print the 
text string in different environments on start-up. 


\formatnote{
boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct text *t;

    struct style *bold,*italic;


    if(!super_Start(hwapp))

	return FALSE;


    t=text_New();

    if(t==NULL)

	return FALSE;


    bold=style_New();

    if(bold==NULL) \{

	text_Destroy(t);

	return FALSE;

    \}

    style_AddNewFontFace(bold,fontdesc_Bold);


    italic=style_New();

    if(italic==NULL) \{

	style_Destroy(bold);

	return FALSE;

    \}

 style_AddNewFontFace(italic,fontdesc_Italic);


    text_InsertCharacters

	(t,0,"Hello world!",

	sizeof("Hello world!")-1);

    text_AddStyle(t,0,5,bold);

    text_AddStyle(t,6,5,italic);


    if(!makeWindow((struct dataobject *)t) ||

       !makeWindow((struct dataobject *)t)) \{

	style_Destroy(italic);

	return FALSE;

    \}


    return TRUE;


\}

}

For this example, we create two styles, one for each different type of 
modification we want to make to the text.  The method 
 \italic{style_AddNewFontFace} \indexi{ \italic{style_AddNewFontFace}} asserts 
that text affected by an environment containing this style should have the 
given font descriptor style bits added to the set already turned on. 


After inserting the "hello world" string with text_InsertCharacters

\indexi{ \italic{text_InsertCharacters}} 

as in the previous example, we use the \italic{text_AddStyle}

\indexi{ \italic{text_AddStyle}} 

method, to create an environment \indexi{Environment}  with the given 
position, length, and style objects.  If the position and length given would 
cause the environment to cross the boundary of an existing environment, the 
environments are split up into smaller environments, so that the hierarchical 
nature of the environment tree is preserved. 

\begindata{bp,269964924}
\enddata{bp,269964924}
\view{bpv,269964924,122,0,0}
\begindata{texttag,269839696}
\textdsversion{12}
ExFifteenListing\
\enddata{texttag,269839696}
\view{texttagv,269839696,123,0,0}
\section{Program listing for Example 15}


\formatnote{
\bold{helloworldapp.H}


class helloworldapp : application\{

    overrides:

	Start() returns boolean;

\};


\bold{helloworldapp.c}


#include <class.h>


#include "helloworldapp.eh"


#include "im.ih"

#include "frame.ih"

#include "text.ih"

#include "dataobject.ih"

#include "view.ih"

#include "fontdesc.ih"

#include "style.ih"


static boolean makeWindow(dobj)

struct dataobject *dobj;

\{

    struct view *v;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    v=(struct view *)class_NewObject

		(dataobject_ViewName(dobj));

    if(v==NULL)

	return FALSE;


    applayer=view_GetApplicationLayer(v);

    if(applayer==NULL) \{

	view_Destroy(v);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	view_DeleteApplicationLayer(v,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    view_SetDataObject(v,dobj);

    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    view_WantInputFocus(v,v);


    return TRUE;


\}



boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct text *t;

    struct style *bold,*italic;


    if(!super_Start(hwapp))

	return FALSE;


    t=text_New();

    if(t==NULL)

	return FALSE;


    bold=style_New();

    if(bold==NULL) \{

	text_Destroy(t);

	return FALSE;

    \}

    style_AddNewFontFace(bold,fontdesc_Bold);


    italic=style_New();

    if(italic==NULL) \{

	style_Destroy(bold);

	return FALSE;

    \}

    style_AddNewFontFace(italic,fontdesc_Italic);


    text_InsertCharacters

	(t,0,"Hello world!",sizeof

		("Hello world!")-1);

    text_AddStyle(t,0,5,bold);

    text_AddStyle(t,6,5,italic);


    if(!makeWindow((struct dataobject *)t) ||

       !makeWindow((struct dataobject *)t)) \{

	style_Destroy(italic);

	return FALSE;

    \}


    return TRUE;


\}




\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} 

	-d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .H .do


.H.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.H

.H.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.H


.o.do:

	$\{MAKEDO\} $<



all:  helloworldapp.do 


helloworldapp.do: helloworldapp.o helloworldapp.eh


helloworldapp.o: helloworldapp.c

helloworldapp.o: $\{INCLUDESRC\}/application.ih

helloworldapp.o: $\{INCLUDESRC\}/atom.ih

helloworldapp.o: $\{INCLUDESRC\}/dataobject.ih

helloworldapp.o: $\{INCLUDESRC\}/frame.ih

helloworldapp.o: $\{INCLUDESRC\}/graphic.ih

helloworldapp.o: $\{INCLUDESRC\}/im.ih

helloworldapp.o: $\{INCLUDESRC\}/lpair.ih

helloworldapp.o: $\{INCLUDESRC\}/mark.ih

helloworldapp.o: $\{INCLUDESRC\}/message.ih

helloworldapp.o: $\{INCLUDESRC\}/namespace.ih

helloworldapp.o: $\{INCLUDESRC\}/observable.ih

helloworldapp.o: $\{INCLUDESRC\}/point.h

helloworldapp.o: $\{INCLUDESRC\}/rectangle.h

helloworldapp.o: $\{INCLUDESRC\}/simpletext.ih

helloworldapp.o: $\{INCLUDESRC\}/text.ih

helloworldapp.o: $\{INCLUDESRC\}/view.ih

helloworldapp.o: $\{SRCDIR\}include/class.h

helloworldapp.o: helloworldapp.eh

helloworldapp.eh helloworldapp.ih: helloworldapp.H

helloworldapp.eh helloworldapp.ih: 

	$\{INCLUDESRC\}/application.ih




}
\enddata{text,269793984}
