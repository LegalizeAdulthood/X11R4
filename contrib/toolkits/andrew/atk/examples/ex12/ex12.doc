\begindata{text,269582664}
\textdsversion{12}
\template{default}
\define{itemize
}
\formatnote{\chapter{Example 12:  Multiple Views on One Data Object}} 
\indexi{Multiple views}

\indexi{Views++Multiple} 

\indexi{Data objects++Multiple views}


Example 12 illustrates how to have more than one view on a single data object. 
 While the example in this chapter is a simple case with the same type of view 
displaying the same data, the concepts can be useful in more complex 
applications that have different types of views displaying the same data.  For 
example, it is possible to create an application that consists of a table 
object, a graph object, and a pie chart object all displaying the same data. 
 If data in one object is modified, the other objects change to reflect that 
modification, since the data is shared. 


We will modify the program from Example 11 to produce two windows, each with 
\italic{hello world} in the center.  The two windows are two views onto the 
same data object.  Thus, when the \italic{helloworld} data object is changed 
in one window, (i.e., when the user moves the \italic{hello world} text string 
with mouse, menu, or key commands), the data object in the other window reacts 
in the same way since it is the same data object.  However, you can look at 
different parts of the view in the windows:  if you move the scroll bars in 
one window, you will be seeing a different portion of the view in that window, 
but the view in the other window will not change. 


The discussion that follows presents a step-by-step description of how to 
modify the \italic{helloworld} class in Example 11 to produce Example 12, 
which create two windows looking at the same \italic{helloworld} data object. 
If you were to follow the steps, you would produce a program, called 
\italic{helloworldapp}, in seven files: 


\itemize{
a helloworld.H file -- will contain the class definition for the 
\italic{helloworld }data object.  This will be exactly the same as in Example 
11. 


a helloworld.c file -- will contain statements that import Andrew Toolkit 
classes used by the data object, initialize the class, and define the 
\italic{Read} and \italic{Write} methods.  This will be exactly the same as in 
Example 11. 


a helloworldview.H file -- will contain the class definition for the 
\italic{helloworld} view, and is exactly the same as in Example 11. 


a helloworldview.c file -- will contain statements that import Andrew Toolkit 
classes used by the view and definitions of the methods.  This will be exactly 
the same as in Example 11. 


a helloworldapp.H file -- will contain the class definition for the 
application program that will display an instance of the class in a window. 
 This will be exactly the same as in Example 11. 


a helloworldapp.c -- will contain declarations needed by the Andrew Toolkit 
linking and loading facilities as well the definition of the 
\italic{helloworld} application method.  This will now contain instructions to 
create two windows, and link two views and one data object to each. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as Example 11. 

}

For a complete listing of these files, see \italic{Program Listing for Example 
12 } at the end of this section on p. 
\begindata{textref,269895260}
\textdsversion{12}
# ExTwelveListing\
\enddata{textref,269895260}
\view{textrefv,269895260,102,0,0}.  The source code is available in the 
directory /usr/andrew/examples/ex12, together with the compiled program. 


Although the discussion of the steps refers directly to this example, the 
information generally applies to the creation of any application that provides 
multiple views on one data object. 


\section{Running the example program}


\formatnote{\bold{Action 1.}   \formatnote{To run the program, at the 
\bold{Typescript }prompt type


runapp /usr/andrew/examples/ex12/helloworldapp


and press the Enter key.

}

\bold{Response.}\formatnote{   }The program will produce two windows each with 
\italic{hello

world} centered in the body of the window with horizontal and vertical

scroll bars, and message line strips.



\bold{Action 2.} \formatnote{   }Move \italic{hello world} in the window, by 
using the mouse,

key commands, or a combination of \bold{Read }and \bold{Write} in one of the

windows.


\bold{Response. } \formatnote{  } \italic{hello world} will be redrawn and the 
message line

will display the message "Hello world at" followed by the coordinates

of the text string in both windows simultaneously.



\bold{Action 3.}\formatnote{   }Change the portion of the view in one window 
by moving

the scroll bars in one window.


\bold{Response. }\formatnote{   }The portion of the view in the window will 
change, but

the portion of the view in the other window will not change.


\bold{Action 4.}\formatnote{   }To quit the program, pop-up the menus and 
choose \bold{Quit}

from the top card.


\bold{Response.} \formatnote{   }The window will disappear from the screen.


}\
\begindata{bp,269145532}
\enddata{bp,269145532}
\view{bpv,269145532,103,0,0}
\section{Creating multiple windows}  \indexi{Multiple windows} 
\indexi{Interaction manager++Windows}


With the split between the dataobject and the view, it is very simple to have 
multiple windows open on the same dataobject, especially in an application. 
 The general procedure is to modify the app.c file to simply create another 
view, set its dataobject to the same one as the previous view and create an 
im, frame, etc., for the new view in; note that you cannot merely point a 
second im at the original view. 


\subsection{Displaying a data object in a view}  \indexi{Data 
objects++Displaying in a view}


\formatnote{
#include <class.h>


#include "helloworldapp.eh"


#include "dataobject.ih"

#include "view.ih"

#include "frame.ih"

#include "im.ih"

#include "helloworld.ih"


static boolean makeWindow(dobj)

struct dataobject *dobj;

\{

    struct view *v;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    v=(struct view *)class_NewObject(dataobject_ViewName(dobj));

    if(v==NULL)

	return FALSE;


    applayer=view_GetApplicationLayer(v);

    if(applayer==NULL) \{

	view_Destroy(v);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	view_DeleteApplicationLayer(v,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    view_SetDataObject(v,dobj);

    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    view_WantInputFocus(v,v);


    return TRUE;


\}


}
After importing the necessary class information, we write a procedure to 
create one window with all its associated objects (a frame, a data object, an 
interaction manager) and an application layer.  The definition of the 
makeWindow procedure is simply an encapsulation of the procedures necessary to 
display a view on a given dataobject.  First,  makeWindow creates the 
application layer, then the frame, then the im, destroying all previously 
created objects if any one object cannot be created. 


Next, we set the view to the data object, set the frame to the application 
layer, and also the frame to the interaction manager, completing the view 
tree. 



\subsection{Modifying the Start procedure} 

\indexi{ \italic{Start}} 


The Start procedure in helloworldapp.c uses the \italic{makeWindow} procedure 
twice to create two windows which are views onto the same \italic{helloworld 
}data object. 


\formatnote{
boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworld *hw;


    if(!super_Start(hwapp))

	return FALSE;


    hw=helloworld_New();

    if(hw==NULL)

	return FALSE;


    if(!makeWindow((struct dataobject *)hw) ||

       !makeWindow((struct dataobject *)hw))\{

	helloworld_Destroy(hw);

	return FALSE;

    \}


    return TRUE;

\}

}

The rest of the program files and the compilation procedures are the same as 
in the previous example. 


\begindata{bp,269640460}
\enddata{bp,269640460}
\view{bpv,269640460,104,0,0}
\section{Program listing for Example 
12}\
\begindata{texttag,269812448}
\textdsversion{12}
ExTwelveListing\
\enddata{texttag,269812448}
\view{texttagv,269812448,105,0,0}


\formatnote{

\bold{helloworld.H}


#define POSUNDEF (-1)


class helloworld: dataobject \{

overrides:

    Read(FILE *file,long id) returns long;

    Write(FILE *file,long writeId,int level) returns long;

data:

    long x,y;

    boolean blackOnWhite;

\};



\bold{helloworld.c}


#include <stdio.h>

#include <class.h>


#include "helloworld.eh"


boolean helloworld__InitializeObject(classID,hw)

struct classheader *classID;

struct helloworld *hw;   

\{

    hw->x=POSUNDEF;

    hw->y=POSUNDEF;

    hw->blackOnWhite=TRUE;

    return TRUE;

\}


long helloworld__Read(hw,file,id)

struct helloworld *hw;

FILE *file;

long id;

\{

    char buf[100];


    helloworld_SetID(hw,helloworld_UniqueID(hw));


    if(fgets(buf,sizeof(buf),file)==NULL)

	return dataobject_PREMATUREEOF;

    /* the %hd tells scanf that blackOnWhite is a short, not an int */

    if(sscanf(buf,"%d %d %hd\\n",&hw->x,&hw->y,&hw->blackOnWhite)<3)

	return dataobject_BADFORMAT;


    if(fgets(buf,sizeof(buf),file)==NULL) /* read in the \\enddata\{...\} */

	return dataobject_MISSINGENDDATAMARKER;


    return dataobject_NOREADERROR;

\}


long helloworld__Write(hw,file,writeId,level)

struct helloworld *hw;

FILE *file;

long writeId;

int level;

\{

    if(writeId!=helloworld_GetWriteID(hw))\{ /* only write a given version 
once */

	helloworld_SetWriteID(hw,writeId);

	fprintf(file,"\\\\begindata\{%s,%d\}\\n",

		class_GetTypeName(hw), helloworld_UniqueID(hw));

	fprintf(file,"%d %d %d\\n",hw->x,hw->y,hw->blackOnWhite);

	fprintf(file,"\\\\enddata\{%s,%d\}\\n",

		class_GetTypeName(hw), helloworld_UniqueID(hw));

    \}


    return helloworld_UniqueID(hw);

\}



\bold{helloworldview.H}


class helloworldview: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit (enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetInterface(int type) returns char *;

    GetApplicationLayer() returns struct view *;

    DeleteApplicationLayer(struct view *);

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean HaveDownTransition;

    boolean haveInputFocus;

    long hitX,hitY;

    long x,y;

    boolean blackOnWhite;

    long frameX, frameY;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

    boolean didMove;

\};



\bold{helloworldview.c}


#include <stdio.h>

#include <class.h>


#include "helloworldview.eh"


#include "graphic.ih"

#include "rectangle.h"

#include "keymap.ih"

#include "keystate.ih"

#include "menulist.ih"

#include "scroll.ih"

#include "bind.ih"

#include "message.ih"

#include "im.ih"


#include "helloworld.ih"


#define TOTALSIZE 1500


static void xgetinfo(), xsetframe(), ygetinfo(), ysetframe();

static long xwhat(), ywhat();


static struct scrollfns horizInterface = \{

    xgetinfo, xsetframe, NULL, xwhat

\};


static struct scrollfns vertInterface = \{

    ygetinfo, ysetframe, NULL, ywhat

\};


static struct keymap *helloworldviewKeymap;

static struct menulist *helloworldviewMenulist;


boolean helloworldview__InitializeObject(classID,hwv)

struct classheader *classID;

struct helloworldview *hwv;   

\{

    hwv->haveInputFocus = FALSE;

    hwv->HaveDownTransition=FALSE;

    hwv->keystate = keystate_Create(hwv, helloworldviewKeymap);

    hwv->menulist = menulist_DuplicateML(helloworldviewMenulist, hwv);

    hwv->newFrameX = hwv->newFrameY = 0;

    return TRUE;

\}


struct view *helloworldview__GetApplicationLayer(hwv)

struct textview *hwv;

\{

    return (struct view *)scroll_Create(hwv,scroll_LEFT+scroll_BOTTOM);

\}


void helloworldview__DeleteApplicationLayer(hwv,scrollbar)

struct textview *hwv;

struct scroll *scrollbar;

\{

    scroll_Destroy(scrollbar);

\}


void helloworldview__FullUpdate(hwv, type, left, top, width, height)

struct helloworldview *hwv;

enum view_UpdateType type;

long left;

long top;

long width;

long height; 

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    struct rectangle myVisualRect;


    helloworldview_GetVisualBounds(hwv,&myVisualRect);

    hwv->vrWidth=rectangle_Width(&myVisualRect);

    hwv->vrHeight=rectangle_Height(&myVisualRect);


    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;


    hwv->frameX = hwv->newFrameX;

    hwv->frameY = hwv->newFrameY;


    if (hw->x == POSUNDEF) \{

	hw->x = hwv->frameX + hwv->vrWidth / 2;

	hw->y = hwv->frameY + hwv->vrHeight / 2;

    \}


    hwv->x=hw->x;

    hwv->y=hw->y;

    hwv->blackOnWhite=hw->blackOnWhite;


    helloworldview_SetTransferMode(hwv, graphic_COPY);


    if (hw->blackOnWhite)

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_WhitePattern(hwv));

    else

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_BlackPattern(hwv));


    helloworldview_SetTransferMode(hwv,graphic_INVERT);


    helloworldview_MoveTo(hwv, hw->x - hwv->frameX, hw->y - hwv->frameY);

    helloworldview_DrawString(hwv,"hello world",

			   graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);    

\}



void helloworldview__Update(hwv)

struct helloworldview *hwv;

\{    

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    helloworldview_SetTransferMode(hwv, graphic_INVERT);


    if (hw->blackOnWhite!=hwv->blackOnWhite) \{

	struct rectangle vr;

	helloworldview_GetVisualBounds(hwv,&vr);

	helloworldview_FillRect(hwv,

		&vr,helloworldview_BlackPattern(hwv));

	hwv->blackOnWhite=hw->blackOnWhite;

    \}


    if (hwv->x!=hw->x || hwv->y!=hw->y || hwv->frameX!=hwv->newFrameX || 
hwv->frameY!=hwv->newFrameY) \{

	if(hwv->x!=hw->x || hwv->y!=hw->y)\{

	    static char buf[100];

	    sprintf(buf,"Hello world at (%d,%d)",hw->x,hw->y);

	    message_DisplayString(hwv,0,buf);

	\}	    


	helloworldview_MoveTo(hwv,

	    hwv->x-hwv->frameX,hwv->y-hwv->frameY);

	helloworldview_DrawString(hwv, "hello world",

				  graphic_BETWEENTOPANDBASELINE |

				  graphic_BETWEENLEFTANDRIGHT);

  

	hwv->x=hw->x;

	hwv->y=hw->y;

  	hwv->frameX = hwv->newFrameX;

  	hwv->frameY = hwv->newFrameY;

  

	helloworldview_MoveTo(hwv,

	     hwv->x-hwv->frameX,hwv->y-hwv->frameY);

	helloworldview_DrawString(hwv, "hello world",

				  graphic_BETWEENTOPANDBASELINE |

				  graphic_BETWEENLEFTANDRIGHT);

    \}

\}



struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hw->x+=x-hwv->hitX;

		hw->y+=y-hwv->hitY;

		hwv->hitX=x;

		hwv->hitY=y;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hw->x=x+hwv->frameX;

		hw->y=y+hwv->frameY;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->hitX=x;

		hwv->hitY=y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworld_NotifyObservers(hw,0);


    return (struct view *)hwv;

\}



void helloworldview__ReceiveInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = TRUE;

    hwv->keystate->next = NULL;

    helloworldview_PostKeyState(hwv, hwv->keystate);

    helloworldview_PostMenus(hwv, hwv->menulist);

\}



void helloworldview__LoseInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = FALSE;

\}


static void Center(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->x = hwv->newFrameX + hwv->vrWidth / 2;

    hw->y = hwv->newFrameY + hwv->vrHeight / 2;


    helloworld_NotifyObservers(hw,0);

\}



static void Invert(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->blackOnWhite = !hw->blackOnWhite;

    helloworld_NotifyObservers(hw,0);

\}



static void relocate(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    char buf[100];

    int x,y;


    message_AskForString(hwv,0,"New location (x,y): ",NULL,buf,sizeof(buf));


    if(sscanf(buf,"%d,%d",&x,&y)!=2)

	message_DisplayString(hwv,1,"Bad format; must be: number,number");

    else\{

	hw->x=x;

	hw->y=y;


	helloworld_NotifyObservers(hw,0);

    \}

\}



static void readHW(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    char file[100], msgBuf[100];

    FILE *fp;


    message_AskForString(hwv,0,"Read file: ",NULL,file,sizeof(file));

    fp=fopen(file,"r");

    if(fp==NULL)\{

	sprintf(msgBuf,"Couldn't open %s for reading.", file);

	message_DisplayString(hwv,1,msgBuf);

    \}else\{

	char header[100];


	if(fgets(header,sizeof(header),fp)==NULL)\{

	    sprintf(msgBuf,"Premature end-of-file in %s.",file);

	    message_DisplayString(hwv,1,msgBuf);

	\}else\{

	    char name[20];

	    int id;


	    if(sscanf(header,"\\\\begindata\{%[^,],%d\}\\n",

		name,&id)!=2)\{

		sprintf(msgBuf,

			"%s doesn't contain a valid datastream header.",

			file);

		message_DisplayString(hwv,1,msgBuf);

	    \}else\{

		struct helloworld *hw=

		  (struct helloworld *)hwv->header.view.dataobject;


		if(strcmp(name,class_GetTypeName(hw))!=0)\{

		    sprintf(msgBuf,

			    "%s doesn't contain a helloworld dataobject.",

			    file);

		    message_DisplayString(hwv,1,msgBuf);

		\}else\{

		    /* FINALLY, read the object in... */

		    helloworld_Read(hw,fp,id);

		    fclose(fp);

		    helloworld_NotifyObservers(hw,0);

		\}

	    \}

	\}

    \}

\}



static void writeHW(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    char file[100], msgBuf[100];

    FILE *fp;


    message_AskForString(hwv,0,"Write file: ",NULL,file,sizeof(file));

    fp=fopen(file,"w");

    if(fp==NULL)\{

	sprintf(msgBuf,"Couldn't open %s for writing.",file);

	message_DisplayString(hwv,1,msgBuf);

    \}else\{

	struct helloworld *hw=

	  (struct helloworld *)hwv->header.view.dataobject;

	

	helloworld_Write(hw,fp,im_GetWriteID(),0);

	fclose(fp);

    \}

\}



static void xgetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameX;

    seen->end = hwv->frameX + hwv->vrWidth;

    dot->beg = dot->end = hw->x;

\}


static void ygetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameY;

    seen->end = hwv->frameY + hwv->vrHeight;

    dot->beg = dot->end = hw->y;

\}


static void xsetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameX = posn - hwv->vrWidth * cord / outof;

    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    else if (hwv->newFrameX < 0)

	hwv->newFrameX = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static void ysetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameY = posn - hwv->vrHeight * cord / outof;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;

    else if (hwv->newFrameY < 0)

	hwv->newFrameY = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static long xwhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameX + hwv->vrWidth * cord / outof;

\}


static long ywhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameY + hwv->vrHeight * cord / outof;

\}



char *helloworldview__GetInterface(hwv, type)

struct helloworldview *hwv;

char *type;

\{

    if (strcmp(type, "scroll,vertical") == 0)

	return (char *) &vertInterface;

    else if (strcmp(type, "scroll,horizontal") == 0)

	return (char *) &horizInterface;

    else

	return NULL;

\}



static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003",0, "Hello World,Center",0,0, Center, 
"Center the helloworld string."\},

    \{"helloworld-invert", "\\011",0, "Hello World,Invert",0,0, Invert, 
"Invert the helloworld string."\},

    \{"helloworld-relocate", "\\022",0, "Hello World,Relocate",0,0, relocate, 
"Relocate the helloworld string."\},

    \{"helloworld-read", NULL,0, "Hello World,Read",0,0, readHW, "Read in a 
new hello world."\},

    \{"helloworld-write", NULL,0, "Hello World,Write",0,0, writeHW, "Write out 
the current hello world to a file."\},

    NULL

\};


boolean helloworldview__InitializeClass(classID)

struct classheader *classID;

\{

    helloworldviewMenulist=menulist_New();

    helloworldviewKeymap=keymap_New();

    bind_BindList(helloworldviewBindings, 
helloworldviewKeymap,helloworldviewMenulist, &helloworldview_classinfo);

    return TRUE;

\}



\bold{helloworldapp.H}


class helloworldapp : application\{

    overrides:

	Start() returns boolean;

\};



\bold{helloworldapp.c}


#include <class.h>


#include "helloworldapp.eh"


#include "dataobject.ih"

#include "view.ih"

#include "frame.ih"

#include "im.ih"

#include "helloworld.ih"


static boolean makeWindow(dobj)

struct dataobject *dobj;

\{

    struct view *v;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    v=(struct view *)class_NewObject(dataobject_ViewName(dobj));

    if(v==NULL)

	return FALSE;


    applayer=view_GetApplicationLayer(v);

    if(applayer==NULL) \{

	view_Destroy(v);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	view_DeleteApplicationLayer(v,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    view_SetDataObject(v,dobj);

    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    view_WantInputFocus(v,v);


    return TRUE;


\}


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworld *hw;


    if(!super_Start(hwapp))

	return FALSE;


    hw=helloworld_New();

    if(hw==NULL)

	return FALSE;


    if(!makeWindow((struct dataobject *)hw) ||

       !makeWindow((struct dataobject *)hw))\{

	helloworld_Destroy(hw);

	return FALSE;

    \}


    return TRUE;

\}



\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .H .do


.H.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.H

.H.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.H


.o.do:

	$\{MAKEDO\} $<



all:  helloworldapp.do helloworld.do helloworldview.do


helloworldapp.do: helloworldapp.o helloworldapp.eh

helloworld.do:  helloworld.o helloworld.eh

helloworldview.do: helloworldview.o helloworldview.eh


helloworldapp.o: helloworldapp.c

helloworldapp.o: $\{INCLUDESRC\}/application.ih

helloworldapp.o: $\{INCLUDESRC\}/atom.ih

helloworldapp.o: $\{INCLUDESRC\}/dataobject.ih

helloworldapp.o: $\{INCLUDESRC\}/frame.ih

helloworldapp.o: $\{INCLUDESRC\}/graphic.ih

helloworldapp.o: $\{INCLUDESRC\}/im.ih

helloworldapp.o: $\{INCLUDESRC\}/lpair.ih

helloworldapp.o: $\{INCLUDESRC\}/message.ih

helloworldapp.o: $\{INCLUDESRC\}/namespace.ih

helloworldapp.o: $\{INCLUDESRC\}/observable.ih

helloworldapp.o: $\{INCLUDESRC\}/point.h

helloworldapp.o: $\{INCLUDESRC\}/rectangle.h

helloworldapp.o: $\{INCLUDESRC\}/view.ih

helloworldapp.o: $\{SRCDIR\}include/class.h

helloworldapp.o: helloworld.ih

helloworldapp.o: helloworldview.ih

helloworldapp.o: helloworldapp.eh

helloworldapp.eh helloworldapp.ih: helloworldapp.H

helloworldapp.eh helloworldapp.ih: $\{INCLUDESRC\}/application.ih

helloworld.o: helloworld.c

helloworld.o: $\{INCLUDESRC\}/atom.ih

helloworld.o: $\{INCLUDESRC\}/dataobject.ih

helloworld.o: $\{INCLUDESRC\}/namespace.ih

helloworld.o: $\{INCLUDESRC\}/observable.ih

helloworld.o: $\{SRCDIR\}include/class.h

helloworld.o: helloworld.eh

helloworld.eh helloworld.ih: helloworld.H

helloworld.eh helloworld.ih: $\{INCLUDESRC\}/atom.ih

helloworld.eh helloworld.ih: $\{INCLUDESRC\}/dataobject.ih

helloworld.eh helloworld.ih: $\{INCLUDESRC\}/namespace.ih

helloworld.eh helloworld.ih: $\{INCLUDESRC\}/observable.ih

helloworldview.o: helloworldview.c

helloworldview.o: $\{INCLUDESRC\}/atom.ih

helloworldview.o: $\{INCLUDESRC\}/bind.ih

helloworldview.o: $\{INCLUDESRC\}/dataobject.ih

helloworldview.o: $\{INCLUDESRC\}/graphic.ih

helloworldview.o: $\{INCLUDESRC\}/keymap.ih

helloworldview.o: $\{INCLUDESRC\}/keystate.ih

helloworldview.o: $\{INCLUDESRC\}/menulist.ih

helloworldview.o: $\{INCLUDESRC\}/message.ih

helloworldview.o: $\{INCLUDESRC\}/namespace.ih

helloworldview.o: $\{INCLUDESRC\}/observable.ih

helloworldview.o: $\{INCLUDESRC\}/point.h

helloworldview.o: $\{INCLUDESRC\}/rectangle.h

helloworldview.o: $\{INCLUDESRC\}/scroll.ih

helloworldview.o: $\{INCLUDESRC\}/view.ih

helloworldview.o: $\{SRCDIR\}include/class.h

helloworldview.o: helloworld.ih

helloworldview.o: helloworldview.eh

helloworldview.eh helloworldview.ih: helloworldview.H

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/graphic.ih

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/observable.ih

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/point.h

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/rectangle.h

helloworldview.eh helloworldview.ih: $\{INCLUDESRC\}/view.ih

helloworldview.eh helloworldview.ih: $\{SRCDIR\}include/class.h


}
\enddata{text,269582664}
