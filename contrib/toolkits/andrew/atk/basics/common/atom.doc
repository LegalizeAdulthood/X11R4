\begindata{text,270509580}
\textdsversion{12}
\template{be2guide}
\define{bold
menu:[Font~1,Bold~10]
attr:[FontFace Bold Int Set]}
\define{section
menu:[Title~3,Section~21]
attr:[Justification LeftJustified Point 0]
attr:[Flags KeepPriorNL Int Set]
attr:[Flags KeepNextNL Int Set]
attr:[FontFace Bold Int Set]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 14]}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Atom}}\indexi{Atom class}


Atoms are used only by the resource manager package, \italic{rm}, and as such 
are not ordinarily of interest to the applications programmer. 


The atom package exists to provide convenient handles for strings.  If you try 
to create two atoms having the same name, the atom package will simply return 
the same atom for both calls.  Given this invariant, that calling atom_Intern 
with the same string twice will result in the same pointer being returned, one 
can build a very fast string comparison routine by storing and searching atoms 
instead of strings. 


Note that this is only effective if you reference a string many times for 
every instance of the string, since creating an atom takes somewhat longer 
than a string comparison operation.  For example, one might use atoms for font 
names, increasing the performance of font name searching in the font package. 



\section{Quick reference list for Atom}



\fixedtext{void \bold{atom_}FinalizeObject }\fixedindent{(struct observable 
*\paramname{self});} 

\fixedtext{boolean \bold{atom_}InitializeClass }\fixedindent{();} 

\fixedtext{boolean \bold{atom_}InitializeObject }\fixedindent{(struct atom 
*\paramname{self});} 

\fixedtext{struct atom *\bold{atom_}InternRock }\fixedindent{(long 
\paramname{rock});} 

\fixedtext{struct atom *\bold{atom_}Intern }\fixedindent{(char 
*\paramname{name});} 

\fixedtext{\bold{atom_}Name }\fixedindent{(struct atom *\paramname{atom});} 


\paragraph{Getting an atom by name} \indexi{ \italic{atom_Intern}}

\example{struct atom * atom_Intern( , name )

char * name;} 


\leftindent{\bold{Class procedure description.  }Return a pointer to the atom 
with the name \italic{name}. 


\bold{Return value.}  A new atom pointer. 


\bold{Side effect. } Possibly creates a new atom, if none with this name yet 
exists. 


\bold{Usage.}  Call this when you first encounter the name you're interested 
in. 

}

\paragraph{Getting an atom by rock} \indexi{ \italic{atom_InternRock}}

\example{struct atom * atom_InternRock( rock )

long rock;} 


\leftindent{\bold{Class procedure description.  }  This works just like 
atom_Intern, only the name space is that of 32-bit values.  Since one could 
compare the 32-bit rock just as easily as the 32-bit pointer to the atom, you 
shouldn't use this function unless you need an atom for some procedure that 
normally takes string atoms. 


\bold{Return value.}  A new atom. 


\bold{Side effect.}  Creates a new atom, for the first call with this value of 
rock. 

}
\begindata{bp,270610192}
\enddata{bp,270610192}
\view{bpv,270610192,141,0,0}
\paragraph{Initializing the class} \indexi{ \italic{atom_InitializeClass}}

\example{boolean atom_InitializeClass(  )

}
\leftindent{\bold{Class procedure description. }  Initializes the atom class.} 





\paragraph{Getting an atom name} \indexi{ \italic{atom_Name}}

\example{char * atom_Name(atom)

struct atom * atom;} 


\leftindent{\bold{Method Description.  }Return a pointer to the string name 
associated with a particular atom. 


\bold{Return value.}  The atom's name.} 


\enddata{text,270509580}
