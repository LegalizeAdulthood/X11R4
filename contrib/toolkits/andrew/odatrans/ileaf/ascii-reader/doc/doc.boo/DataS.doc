<!OPS, Version = 6.4>

<!Document,
	Final Output Device =	"ps",
	Default Printer =	"nearest-ps">

<!Font Definitions,
	F20 = Times 10,
	F24 = Times 11,
	F26 = Times 11 Italic,
	F85 = Helvetica 11 Bold,
	F46 = Times 24 Italic,
	F72 = Helvetica 8,
	F47 = Times 24 Bold Italic,
	F77 = Helvetica 9 Bold,
	F76 = Helvetica 9,
	F80 = Helvetica 10,
	F22 = Times 10 Italic,
	F81 = Helvetica 10 Bold,
	F84 = Helvetica 11,
	F68 = Helvetica 6,
	F101 = Helvetica 18 Bold,
	F93 = Helvetica 14 Bold,
	F89 = Helvetica 12 Bold,
	F28 = Times 12,
	F31 = Times 12 Bold Italic,
	F25 = Times 11 Bold,
	F29 = Times 12 Bold,
	F27 = Times 11 Bold Italic,
	F92 = Helvetica 14,
	F816 = Math-8502 18,
	F8 = Times 6,
	F817 = Math-8502 24,
	F41 = Times 18 Bold,
	F33 = Times 14 Bold,
	F21 = Times 10 Bold>

<!Color Definitions,
	C0 = 0, 0, 0,
	C1 = 3.13, 3.13, 3.13,
	C2 = 6.25, 6.25, 6.25,
	C3 = 12.50, 12.50, 12.50,
	C4 = 25, 25, 25,
	C5 = 50, 50, 50,
	C6 = 75, 75, 75,
	C7 = 100, 100, 100>

<!Page,
	Bottom Margin =		0.83 inches,
	Left Margin =		0.87 inches,
	Right Margin =		0.88 inches,
	Inner Margin =		0.50 inches,
	Outer Margin =		0.94 inches,
	First Page =		Right,
	Margins =			Left/Right,
	Starting Page # = 	Inherit,
	Hyphenation =		on,
	Consecutive Hyphens =	2,
	Revision Bar Placement = Right,
	Margin Stretch =	150,
	Margin Shrink =		75,
	Feathering =		off,
	Begin With = Odd>

<!Autonumber Stream, List, 1>

<!Autonumber Stream, chap, 1,
	Level 1 Suffix =	>

<!Autonumber Stream, label, 1,
	Level 1 Prefix =	"Figure ",
	Level 1 Suffix =	>

<!Autonumber Stream, step, 1,
	Level 1 Suffix =	>

<!Autonumber Stream, markers, 1,
	Level 1 Suffix =	,
	Level 1 Starting Value = 0,
	Level 1 Show =		no>

<!Class, "|:exp_list",
	Top Margin =		0.04 inches,
	Bottom Margin =		0.04 inches,
	Line Spacing =		1.162 lines,
	Font =			F24@i*,
	Left Tab =		0/1*3 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<Tab><Tab>

<!Class, "|:list",
	Font =			F24,
	Contents =	Shared>

<Tab><F25>><F0><Tab>

<!Class, "|:listLA",
	Font =			F24>

<Tab><F25>><F0><Tab>

<!Class, "|:listempty1",
	Top Margin =		0.04 inches,
	Bottom Margin =		0.04 inches,
	Line Spacing =		1.162 lines,
	Font =			F24@i*,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<Tab><Tab>

<!Class, "|:note:caution",
	Top Margin =		0.04 inches,
	Bottom Margin =		0.04 inches,
	Line Spacing =		1.162 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<Frame,
	Name =			note:caution,
	Placement =		At Anchor,
	Width =			0.73 inches,
	Height =		0.10 inches,
	Hidden =		yes,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,7,0
   (g9,2,0
     (g9,2,0
       (v6,2,0,0,0.047423,0.706667,0.047423,7,0,4,0)
       (v6,3,0,0.706667,0.047423,0.706667,0.005911,7,0,4,0)
       (v6,4,0,0.706667,0.005911,0,0.005911,7,0,4,0)
       (v6,5,0,0,0.005911,0,0.047423,7,0,4,0))))
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
<Tab><F26>Caution:<F0><Tab>

<!Class, "|:note:note",
	Top Margin =		0.04 inches,
	Bottom Margin =		0.04 inches,
	Line Spacing =		1.162 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<Frame,
	Name =			note:standard,
	Placement =		At Anchor,
	Width =			0.73 inches,
	Height =		0.10 inches,
	Hidden =		yes,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,7,0
   (g9,2,0
     (g9,2,0
       (v6,2,0,0,0.037045,0.706667,0.037045,7,0,4,0)
       (v6,3,0,0.706667,0.037045,0.706667,0.016289,7,0,4,0)
       (v6,4,0,0.706667,0.016289,0,0.016289,7,0,4,0)
       (v6,5,0,0,0.016289,0,0.037045,7,0,4,0))))
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
<Tab><F26>Note:<F0><Tab>

<!Class, "|:note:warning",
	Top Margin =		0.04 inches,
	Bottom Margin =		0.04 inches,
	Line Spacing =		1.162 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<Frame,
	Name =			note:warning,
	Placement =		At Anchor,
	Width =			0.73 inches,
	Height =		0.10 inches,
	Hidden =		yes,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,7,0
   (g9,2,0
     (g9,2,0
       (v6,2,0,0,0.062266,0.706667,0.062266,7,0,4,0)
       (v6,3,0,0.706667,0.062266,0.706667,0,7,0,4,0)
       (v6,4,0,0.706667,0,0,0,7,0,4,0)
       (v6,5,0,0,0,0,0.062266,7,0,4,0))))
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
<Tab><F26>Warning:<F0><Tab>

<!Class, "|:numlist",
	Top Margin =		0.04 inches,
	Bottom Margin =		0.04 inches,
	Line Spacing =		1.162 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<Tab><Autonum, List, 1><Tab>

<!Class, "|:step:OR1",
	Top Margin =		0.04 inches,
	Bottom Margin =		0.04 inches,
	Line Spacing =		1.162 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<F20>. . . or . . .<F26><Tab><F0>

<!Class, "|:step:numb1",
	Top Margin =		0.04 inches,
	Bottom Margin =		0.04 inches,
	Line Spacing =		1.162 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<F85><Autonum, step, 1>.<F0><Tab>

<!Class, "|:titlexcer",
	Font =			F85,
	Contents =	Shared>

<Tab><F20>"<F0><Tab>

<!Class, chapname,
	Top Margin =		0.50 inches,
	Bottom Margin =		1 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F46@K1,
	Begin New Page =		yes,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		7/8.25/0.75*18 Inches,
	TOC Doc Name =		TOC,
	Composition =		Optimum>

<!Class, chaprefs,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Left,
	Font =			F72,
	Left Tab =		0/0.75*13 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<Autonum, label, 1>                            <Autonum, chap, 1>

<!Class, figure,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Allow Page Break Within = no,
	Allow Page Break After = no>

<!Class, keyside,
	Bottom Margin =		0.17 inches,
	Line Spacing =		1.200 lines,
	Font =			F77,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0 Inches,
	Right Tab =		1.50 Inches>

Action<F76><HR>
Apollo<Tab.>Key<HR>
DEC<Tab.>Key<HR>
Sun<Tab.>Key

<!Class, label,
	Top Margin =		0.08 inches,
	Bottom Margin =		0.08 inches,
	Left Margin =		1.75 inches,
	First Indent =		-1.75 inches,
	Line Spacing =		1.152 lines,
	Alignment =		Left,
	Font =			F80,
	Left Tab =		0/0.25/0.75/0.75*10/9.75/0.75*16 Inches,
	TOC Doc Name =		figlist,
	Composition =		Optimum>

<Tab><Autonum, label, 1>

<!Class, list,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Left Margin =		2 inches,
	First Indent =		-1.13 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Allow Page Break Within = no,
	Left Tab =		-0.25/0/0.25/0.75/0.75*18/15.75/0.75*7 Inches,
	Composition =		Optimum,
	Contents =	Prefix>

<"|:list",
	Hidden =		yes,
	Font =			F24,
	Subcomponent =	yes,
	Contents =	Shared><F0><Tab><F25>><F0><Tab><End Sub><F0>

<!Class, listLA,
	Top Margin =		0.08 inches,
	Bottom Margin =		0.17 inches,
	Left Margin =		2 inches,
	First Indent =		-1.13 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Allow Page Break Within = no,
	Left Tab =		-0.25/0/0.25/0.75/0.75*18/15.75/0.75*7 Inches,
	Composition =		Optimum,
	Contents =	Prefix>

<"|:listLA",
	Hidden =		yes,
	Font =			F24,
	Subcomponent =	yes><F0><Tab><F20>H<F0><Tab><End Sub><F0>

<!Class, listempty1,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Left Margin =		2 inches,
	First Indent =		-1.13 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Allow Page Break Within = no,
	Left Tab =		-0.25/0/0.25/0.75/0.75*18/15.75/0.75*7 Inches,
	Composition =		Optimum,
	Contents =	Prefix>

<"|:listempty1",
	Hidden =		yes,
	Font =			@i*,
	Subcomponent =	yes,
	Contents =	Shared><F0><Tab><Tab><End Sub><F0>

<!Class, micro:caption,
	Top Margin =		0.03 inches,
	Bottom Margin =		0.03 inches,
	Line Spacing =		1.114 lines,
	Font =			F22,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum>

<!Class, note:caution,
	Top Margin =		0.17 inches,
	Bottom Margin =		0.08 inches,
	Left Margin =		1.75 inches,
	First Indent =		-1.75 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Allow Page Break Within = no,
	Left Tab =		-0.88/0/0.75*3/3.75/0.75*24 Inches,
	Composition =		Optimum,
	Contents =	Prefix>

<"|:note:caution",
	Hidden =		yes,
	Font =			F24,
	Subcomponent =	yes,
	Contents =	Shared><F0>
<Frame,
	Name =			note:caution,
	Placement =		At Anchor,
	Width =			0.73 inches,
	Height =		0.10 inches,
	Hidden =		yes,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,7,0
   (g9,2,0
     (g9,2,0
       (v6,2,0,0,0.047423,0.706667,0.047423,7,0,4,0)
       (v6,3,0,0.706667,0.047423,0.706667,0.005911,7,0,4,0)
       (v6,4,0,0.706667,0.005911,0,0.005911,7,0,4,0)
       (v6,5,0,0,0.005911,0,0.047423,7,0,4,0))))
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
<Tab><F26>Caution:<F0><Tab><End Sub><F0>

<!Class, option,
	Bottom Margin =		0.17 inches,
	Line Spacing =		1.200 lines,
	Alignment =		Left,
	Font =			F77,
	Hyphenation =		2,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0 Inches,
	Right Tab =		1.50 Inches,
	Wordspace Min =		0.484,
	Wordspace Nom =		0.800,
	Wordspace Max =		1.420,
	Letterspace Max =		0.484,
	Composition =		Optimum>

Optional Feature<HR>
<F76>The <<name> feature is <HR>
available in the <<package><HR>
etc.

<!Class, para,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Composition =		Optimum>

<!Class, paraAT,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Allow Page Break After = no,
	Composition =		Optimum>

<!Class, paraD,
	Top Margin =		0.17 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Composition =		Optimum>

<Frame,
	Name =			sideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Hidden =		yes,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.293 inches,
	Revision Bar Placement = Left>
<titleD,
	Hidden =		yes,
	Bottom Margin =		0.17 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F81,
	Hyphenation =		off,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0 Inches,
	Right Tab =		1.50 Inches,
	Composition =		Optimum>

titleD component in a<HR>
sideD frame

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Class, rule:Adot,
	Bottom Margin =		0.08 inches,
	Line Spacing =		1 lines,
	Alignment =		Left,
	Font =			F84,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		10.50/0.75*15 Inches,
	Right Tab =		6.75/10 Inches,
	Composition =		Optimum,
	Contents =	Shared>

<Tab.>

<!Class, rule:sm,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1 lines,
	Alignment =		Left,
	Font =			F68,
	Hyphenation =		off,
	Straddle =		yes,
	Allow Page Break Within = no,
	Left Tab =		0 Inches,
	Composition =		Optimum>

<!Class, titleA,
	Top Margin =		0.50 inches,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Left,
	Font =			F101@K1,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0/7/8.25/0.75*18 Inches,
	TOC Doc Name =		TOC>

<!Class, titleB,
	Top Margin =		0.50 inches,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Left,
	Font =			F93,
	Straddle =		yes,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		7/8.25/0.75*18 Inches,
	TOC Doc Name =		TOC>

<!Class, titleC,
	Top Margin =		0.25 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F89,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		7/7.50/0.75*19 Inches>

<!Class, titleD,
	Bottom Margin =		0.17 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F81,
	Hyphenation =		off,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0 Inches,
	Right Tab =		1.50 Inches,
	Composition =		Optimum>

titleD component in a sideD frame

<!Class, 6x4:cell,
	Top Margin =		0.03 inches,
	Bottom Margin =		0.03 inches,
	Left Margin =		0.15 inches,
	Line Spacing =		1.114 lines,
	Font =			F28,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum>

<!Class, Cnv:A,
	Top Margin =		0.03 inches,
	Bottom Margin =		0.03 inches,
	Line Spacing =		1.114 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum>

<!Class, Cnv:B,
	Top Margin =		0.03 inches,
	Bottom Margin =		0.03 inches,
	Line Spacing =		1.114 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum>

<!Class, Cnv:C,
	Top Margin =		0.03 inches,
	Bottom Margin =		0.03 inches,
	Line Spacing =		1.114 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum>

<!Class, Cnv:D,
	Top Margin =		0.03 inches,
	Bottom Margin =		0.03 inches,
	Line Spacing =		1.114 lines,
	Font =			F24,
	Left Tab =		0/0.50*3 Inches,
	Composition =		Optimum>

<!Class, exp_list,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Left Margin =		4.25 inches,
	First Indent =		-3.38 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Allow Page Break Within = no,
	Left Tab =		-2.50/-2.25/0/1.50/0.75*17/15.75/0.75*7 Inches,
	Composition =		Optimum,
	Contents =	Prefix>

<"|:exp_list",
	Hidden =		yes,
	Font =			@i*,
	Subcomponent =	yes,
	Contents =	Shared><F0><Tab><Tab><End Sub><F0>

<!Class, foot_prelim,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.308 lines,
	Font =			F31,
	Contents =	Shared>

PRELIMINARY  ( June 19, 1989 )

<!Class, unique,
	Top Margin =		0.07 inches,
	Bottom Margin =		0.07 inches,
	Line Spacing =		1.308 lines,
	Font =			F20>

<!Class, Cpara,
	Top Margin =		0.08 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Composition =		Optimum>

<!Class, Cstuff,
	Top Margin =		0.17 inches,
	Bottom Margin =		0.07 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.308 lines,
	Alignment =		Left,
	Font =			F20,
	Left Tab =		0/0.25*12 Inches>

<Frame,
	Name =			CsideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Hidden =		yes,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.293 inches,
	Revision Bar Placement = Left>
<CtitleD,
	Hidden =		yes,
	Bottom Margin =		0.17 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F81,
	Hyphenation =		off,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0 Inches,
	Right Tab =		1.50 Inches,
	Composition =		Optimum>

CtitleD component in a CsideD frame

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Class, CtitleB,
	Top Margin =		0.50 inches,
	Bottom Margin =		0 inches,
	Line Spacing =		1 lines,
	Alignment =		Left,
	Font =			F93,
	Begin New Page =		yes,
	Straddle =		yes,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		7/8.25/0.75*18 Inches,
	TOC Doc Name =		TOC>

<!Class, CtitleCdesc,
	Top Margin =		0.17 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F24,
	Composition =		Optimum>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Hidden =		yes,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.137 inches,
	Revision Bar Placement = Left>
<CtitleD,
	Hidden =		yes,
	Bottom Margin =		0.17 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F81,
	Hyphenation =		off,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0 Inches,
	Right Tab =		1.50 Inches,
	Composition =		Optimum>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Class, CtitleCfields,
	Top Margin =		0.25 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F89,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		7/7.50/0.75*19 Inches>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Hidden =		yes,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.137 inches,
	Revision Bar Placement = Left>
<CtitleD,
	Hidden =		yes,
	Bottom Margin =		0.17 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F81,
	Hyphenation =		off,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0 Inches,
	Right Tab =		1.50 Inches,
	Composition =		Optimum>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Class, CtitleCns,
	Top Margin =		0.25 inches,
	Bottom Margin =		0 inches,
	Left Margin =		1.75 inches,
	Line Spacing =		1.100 lines,
	Alignment =		Left,
	Font =			F89,
	Allow Page Break Within = no,
	Allow Page Break After = no,
	Left Tab =		7/7.50/0.75*19 Inches>

<!Class, CtitleD,
	Bottom Margin =		0.17 inches,
	Line Spacing =		1.150 lines,
	Alignment =		Left,
	Font =			F81,
	Hyphenation =		off,
	Straddle =		yes,
	Allow Page Break After = no,
	Left Tab =		0 Inches,
	Right Tab =		1.50 Inches,
	Composition =		Optimum>

titleD component in a<HR>
sideD frame

<!Master Frame,
	Name =			floating,
	Placement =		Following Anchor,
	Horizontal Alignment =	Center,
	Width =			Page Without Margins,
	Height =		Page Without Margins * 0.33,
	Diagram =
V6,
(g9,0,0)>

<!Master Frame,
	Name =			Chapter,
	Placement =		At Anchor,
	Vertical Alignment =	Bottom + 1.40 inches,
	Width =			1.75 inches,
	Height =		1.75 inches,
	Diagram =
V6,
(g9,1,0
 (T12,1,268,0.08,1.546667,5,127,5,7,127,8,0,3,
<!Page, Width = 1.547 inches, Height = 0.11 inches,
	Revision Bar Placement = Left>
<chaprefs,
	Hidden =		yes>

<Autonum, label, 1>                            <Autonum, chap, 1>

<End Text>)
 (t14,2,128,0,0.92,0,7,0,0,t1,wst:timsps24bi,)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Master Frame,
	Name =			figure,
	Placement =		At Anchor,
	Width =			5 inches,
	Height =		Contents,
	Diagram =
V6,
(g9,0,0
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Master Frame,
	Name =			note:caution,
	Placement =		At Anchor,
	Width =			0.73 inches,
	Height =		0.10 inches,
	Diagram =
V6,
(g9,0,0)>

<!Master Frame,
	Name =			note:standard,
	Placement =		At Anchor,
	Vertical Alignment =	Baseline - 0.111 inches,
	Width =			0.73 inches,
	Height =		0.111 inches,
	Shared Contents =	yes,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,7,0
   (g9,2,0
     (g9,2,0
       (v6,2,0,0,0.020756,0.706667,0.020756,7,0,4,0)
       (v6,3,0,0.706667,0.020756,0.706667,0,7,0,4,0)
       (v6,4,0,0.706667,0,0,0,7,0,4,0)
       (v6,5,0,0,0,0,0.020756,7,0,4,0))))
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Master Frame,
	Name =			note:warning,
	Placement =		At Anchor,
	Width =			0.73 inches,
	Height =		0.10 inches,
	Diagram =
V6,
(g9,0,0)>

<!Master Frame,
	Name =			rule:intro,
	Placement =		At Anchor,
	Vertical Alignment =	Bottom + 0.04 inches,
	Width =			5 inches,
	Height =		0.10 inches,
	Shared Contents =	yes,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,7,0
   (g9,2,0
     (g9,2,0
       (v6,2,65536,0,0,4.986667,0,7,0,4,0)
       (v6,3,65536,4.986667,0,4.986667,0.041511,7,0,4,0)
       (v6,4,65536,4.986667,0.041511,0,0.041511,7,0,4,0)
       (v6,5,65536,0,0.041511,0,0,7,0,4,0))))
 (E15,0,0,5,8,1,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,1,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Master Frame,
	Name =			sideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.293 inches,
	Revision Bar Placement = Left>
<titleD,
	Hidden =		yes>

titleD component in a<HR>
sideD frame

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Master Frame,
	Name =			CsideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.293 inches,
	Revision Bar Placement = Left>
<CtitleD,
	Hidden =		yes>

CtitleD component in a CsideD frame

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Master Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.137 inches,
	Revision Bar Placement = Left>
<CtitleD,
	Hidden =		yes>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Master Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.137 inches,
	Revision Bar Placement = Left>
<CtitleD,
	Hidden =		yes>

Field Descriptions

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<!Master Table, 6x4,
	Columns =		4,
	Column 1 Width =	1.591 inches,
	Column 2 Width =	1.591 inches,
	Column 3 Width =	1.591 inches,
	Column 4 Width =	1.591 inches,
	Row =			"row",
	Row =			"row",
	Row =			"row",
	Row =			"row",
	Row =			"row",
	Row =			"row">

<Master Row, "row">

<Cell><6x4:cell,
	Hidden =		yes>

<Cell><6x4:cell,
	Hidden =		yes>

<Cell><6x4:cell,
	Hidden =		yes>

<Cell><6x4:cell,
	Hidden =		yes>

<End Table>

<!Master Table, Cnv,
	Columns =		4,
	Left Margin =		2 inches,
	Column 1 Width =	1 inches,
	Column 2 Width =	1.12 inches,
	Column 3 Width =	0.87 inches,
	Column 4 Width =	3.487 inches,
	Row =			"row">

<Master Row, "row">

<Cell><Cnv:A,
	Hidden =		yes>

<Cell><Cnv:B,
	Hidden =		yes>

<Cell><Cnv:C,
	Hidden =		yes>

<Cell><Cnv:D,
	Hidden =		yes>

<End Table>

<Right Page Header, Frame =
V6,
(g9,1,0
 (t14,1,4,6.493333,0.438782,2,7,0,0,,wst:timsps10,)
 (t14,2,4,3.246667,0.438782,1,7,0,0,,wst:timsps10,)
 (t14,3,4,0,0.438782,0,7,0,0,,wst:timsps10,)
 (E15,0,0,5,8,1,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,1,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<Left Page Header, Frame =
V6,
(g9,0,0)>

<Right Page Footer, Frame =
V6,
(g9,1,0
 (t14,1,4,6.493333,0.478772,2,7,0,0,,wst:timsps10,)
 (t14,2,4,3.366667,0.446667,1,7,0,0,,wst:timsps10,\X80a0)
 (t14,3,4,0,0.478772,0,7,0,0,,wst:timsps10,)
 (E15,0,0,5,8,1,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,1,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>

<Left Page Footer, Frame =
V6,
(g9,1,0
 (T12,1,12,0.04,0.32,7,127,5,7,127,8,0,2,
<!Page, Width = 3 inches, Height = 0.167 inches>
<unique>

<foot_prelim, Subcomponent = yes><F31>PRELIMINARY  ( June 19, 1989 
)<End Sub><F0>

<End Text>))>

<chapname>

<|,45>
<Frame,
	Name =			Chapter,
	Placement =		At Anchor,
	Vertical Alignment =	Bottom + 1.40 inches,
	Width =			1.75 inches,
	Height =		1.75 inches,
	Diagram =
V6,
(g9,4,0
 (g9,4,0
   (O5,4,8,1,wst:bsdutch0bi,52
     (s@"8"637
       (s@"8"0
         (J0"8"7"6"2"7
           (s@"8"0
             (J0"8"5738"6"2"532
               (s@"8"5713
                 (s@"8"5713
                   (D4"8"7"7/538276"7/0@7210"7/4782@1"7/852301"2"532"0"7)
                   (D4"6"7"7/4782@1"7/852301"7/82@325"7/0@7210"2"532"0"7)
                   (D4"4"7"7/82@325"7/0@7210"7/538276"7/0@7210"2"532"0"7))))
             (J0"0"5738"6"2"532
               (s@"0"5713
                 (s@"0"5713
                   (D4"0"7"7/141634"5/131323"7/811433"5/745442"2"532"0"7)
                   (D4"@"7"7/811433"5/745442"7"5/745442"2"532"0"7)
                   (D4"57"7"7"5/745442"7/780@78"7/025803"2"532"0"7)
                   (D4"55"7"7/780@78"7/025803"7/2@10@8"7/510032"2"532"0"7)
                   (D4"53"7"7/2@10@8"7/510032"7/0@285"7/510032"2"532"0"7)
                   (D4"51"7"7/0@285"7/510032"7/4@2253"7/0@7210"2"532"0"7)
                   (D4"58"7"7/4@2253"7/0@7210"7/051862"7/0@7210"2"532"0"7)
                   (D4"56"7"7/051862"7/0@7210"7/242053"5/745442"2"532"0"7)
                   (D4"54"7"7/242053"5/745442"7/463742"5/745442"2"532"0"7)
                   (D4"52"7"7/463742"5/745442"7/603208"5/131323"2"532"0"7)
                   (D4"50"7"7/603208"5/131323"7/141634"5/131323"2"532"0"7)))))))
      
       (s@"5@"0
         (D4"5@"54222678"7/75842"7"7/75842"7"2"532"0"7)
         (D4"37"54222678"7/0@8@48"7"7/0@8@48"7"2"532"0"7)
         (D4"35"54222678"7/75842"5/211111"7/75842"5/211111"2"532"0"7)
         (D4"33"54222678"7/0@8@48"5/211111"7/0@8@48"5/211111"2"532"0"7)))))
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DATA STRUCTURES

<rule:sm>

<Frame,
	Name =			rule:intro,
	Placement =		At Anchor,
	Vertical Alignment =	Bottom + 0.04 inches,
	Width =			5 inches,
	Height =		0.10 inches,
	Shared Contents =	yes>

<para>

This chapter presents the <F25>ASCII Reader<F0> data structures and 
usage considerations.

<para>

The description of each structure includes its <F25>typedef <F0>and 
a description of each of its fields, legal values, and intended use.

<rule:sm>

<Frame,
	Name =			rule:intro,
	Placement =		At Anchor,
	Vertical Alignment =	Bottom + 0.04 inches,
	Width =			5 inches,
	Height =		0.10 inches,
	Shared Contents =	yes>

<titleA,
	Begin New Page =		yes>

<|,46>Basic Definitions

<rule:Adot>

<Tab.>

<paraAT>

The early part of <F25>ar5defs.h<F0> has basic #define constants and 
useful macros. A boolean truth-value is represented in a <F25>short 
int<F0> variable. The #define values <F25>TRUE<F0> and <F25>YES<F0> 
indicate success, while <F25>FALSE<F0> and <F25>NO<F0> indicate failure.

<para>

Distances are measured in very small integral units referred to as <F25>Ridicul
ously small unit<F0>s, or <F25>Rsu<F0>'s. The default basis of<F25> 
Rsu'<F0>s is 900 <F25>Rsu<F0>'s per inch, but this can be changed 
by a client. <F25>Rsu'<F0>s are stored in <F25>long<F0> variables.

<titleB>

Constants

<Cstuff>

#define AR_MAX_TABS (30)<HR>
etc.

<para>

There are default values for various properties, that may be useful 
to a client program. They are given values in <F25>ar5defs.h<F0>. 
The example above shows that a component may have between 0 and 30 
tab settings.

<titleB>

Commonly used types

<Cstuff>

typedef short measure_t;<HR>
typedef short Num_style_t;<HR>
typedef short Direction_t;

<para>

These values are used in more than one place in other data structures, 
and so a common typedef eliminates redundant definitions. For example, 
a <F25>Num_style_t<F0> is used within an autonumber and within a page 
number.

<titleB>

Identifiers and self-identifying data structures

<Cstuff>

typedef short Identifier_t;<HR>
#define Identify ( thing ) ( thing ? ( * ( Identifier_t * ) thing 
) : ( ID_Error ))

<Cstuff>

typedef struct nullobj_t<HR>
{<HR>
<Tab>Identifier_t<Tab><Tab>id;<HR>
<Tab>struct nullobj_t<Tab>*nextP;<HR>
<Tab>struct nullobj_t<Tab>*spareP;<HR>
} NullObj_t;

<para>

Each high-level data structure in AR is self-identifying. Its first 
member is always an <F25>Identifier_t<F0>, and if it is part of a 
linked-list data structure, its second member is a <F25>(NullObj_t<SP>*)<F0> 
named <F25>nextP<F0>. This allows these data structures to represent 
the varying contents of the document and still be processed reliably. 
For example, a component and a table both have these same first two 
fields, and dif
<|,47>ferent fields following. A program can identify the type of 
data structure without knowing it in advance, and a program can find 
the <#7f>next" element of a linked list in a uniform way even when 
the list is a mixture of different types of structures.

<para>

Note that not all high-level objects have a <F25>nextP<F0>. Only those 
that can meaningfully be put on a list or can occur more than once 
will have it. For example, a <F25>Doc_info_t<F0>, which occurs only 
once per document, has an initial <F25>Identifier_t<F0> field but 
not a <F25>nextP<F0>.

<para>

The third field in a <F25>NullObj_t<F0> is available for use by a 
client. AR sets it to NULL initially, and ignores it thereafter. The 
client can use it as a tail pointer, for ease in building onto the 
end of a list. Or it can be used as a back-pointer, to make a doubly-linked 
list.

<para,
	Allow Page Break After = no>

Client programs will use the <F25>Identify()<F0> macro to identify 
and then <F25>switch()<F0> based on the type of the identified object:

<Cstuff>

<Tab>NullObj_t *next_thingP;<HR>
<HR>
<Tab>switch( Identify(next_thingP) ) {<HR>
<Tab>case ID_Cmpn:<HR>
<Tab><Tab>...<HR>
<Tab><Tab>break;<HR>
<Tab>case ID_Table:<HR>
<Tab><Tab>...<HR>
<Tab><Tab>break;<HR>
<Tab>case ID_Comment:<HR>
<Tab><Tab>/** ignore it **/<HR>
<Tab><Tab>break;<HR>
<Tab>default:<HR>
<Tab><Tab>fprintf(stderr, "Unexpected object type %d. Exiting.\n", <HR>
<Tab><Tab><Tab>Identify(next_thingP) );<HR>
<Tab><Tab>exit( -1 );<HR>
<Tab><Tab>break;<HR>
<Tab>}

<para>

The current list of identified objects is this:
<Autonum, markers, 1, First = Yes, Restart = Yes, Tagname = "structure ident">

<Cstuff>

#define ID_Error<HR>
#define ID_NullObj<HR>
#define ID_OpsDecl<HR>
#define ID_Document<HR>
#define ID_Font<Tab><HR>
#define ID_Colo<HR>
#define ID_Pattern<HR>
#define ID_Page<HR>
#define ID_MasterFrame<HR>
#define ID_Frame<HR>
#define ID_ClassDef<HR>
#define ID_MasterCmpn<Tab><HR>
#define ID_Cmpn<HR>
#define ID_MasterTable<HR>
#define ID_Table<HR>
<|,48>#define ID_MasterRow<HR>
#define ID_Row<HR>
#define ID_Cell<HR>
#define ID_HeadFoot<HR>
#define ID_AutoStream<HR>
#define ID_FileInfo<HR>
#define ID_State<HR>
#define ID_Comment<HR>
#define ID_UnknownDecl<HR>
#define ID_UnknownProp<HR>

<para>

The type <F25>NullObj_t<F0> is never assigned to an AR data object; 
it is merely the unifying concept and the type used to cast an unknown 
type of pointer. The identifier <F25>ID_NullObj<F0> will never be 
put into a structure by an AR routine, but the client program is free 
to set that value into a structure if it wants to. The identifier <F25>ID_Error
<F0> is used only to defend against dereferencing a NULL pointer and 
is never associated with a real object.

<para>

The macro <F25>DECLARE_NullObjFields<F0> is used to insure that the 
same declaration is used in all objects that should conform to a <F25>NullObj_t
<F0>.

<titleB>

Unknown Objects

<Cstuff>

typedef struct unknown_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>Ssave_t<Tab><Tab>text;<HR>
} Unknown_t;

<para>

The preservation of <#7f>unknown properties" is a forward-looking 
feature of the <F25>ASCII Reader<F0>. Wherever possible, an unrecognized 
keyword in the markup language does not generate an error. Instead, 
the text of the markup is preserved in an <F25>Unknown_t<F0> object. 
The <#7f>unknown text" goes from the unrecognized keyword to the next 
recognizable delimiter in the markup language: a comma or a greater-than 
sign `<F25>><F0>'. The output functions in AR will re-emit the markup 
text, hopefully preserving the original information in the output 
document.

<para>

This approach does not always work. In some places the markup language 
is irregular, so AR can not make an <F25>Unknown_t<F0>. Other times, 
properties must be ordered a particular way, and AR does not preserve 
the order of unknown properties.

<para>

AR 5.0 fully understands the markup language for TPS 5.0. The purpose 
of preserving unknowns is to allow AR 5.0 to serve TPS 6.0 documents, 
or incremental changes to the TPS 5.0 markup language. It is a limited 
and experimental approach to the problem of downward inter-operability 
among Interleaf document-processing systems.

<titleB>

Comment Objects

<Cstuff>

typedef struct Comment_t<HR>
{<HR>
<|,49><Tab>DECLARE_NullObjFields;<HR>
 <Tab>Ssave_t<Tab><Tab>text;<HR>
} Comment_t;

<para,
	Left Tab =		0/0.25/1.50/0.75*27 Inches>

Interleaf ASCII markup has two forms of comments, a lexical comment 
and a comment object. A lexical comment occurs inside a markup statement, 
between opening and closing <#7f>--" tokens. Lexical comments are 
read and ignored by AR. Comment objects are different. They have the 
form of declarations, and they become real objects in the data structures 
describing a document. They can be read and written using AR functions. 
These two lines illustrate the two forms of comments:<HR>
<HR>
<Tab><<!Ops, -- a lexical comment, discarded by AR -- Version = 6.11><HR>
<Tab><<!Comment, saved by AR><HR>
<HR>
Comment objects look like declarations since they start with <#7f><<!", 
but unlike other declarations they can occur in the body-text of the 
document. <F25>ArDocRead()<F0> pulls all comment objects out of their 
contexts, storing them together in the order of their occurrence. 
This is because there is no space in the <F25>Il_state_t<F0> data 
structure to store them.

<para>

The comment is terminated by a <#7f><F25>><F0>" character. The text 
of the comment, including any whitespace, is saved in <F26>text<F0> 
field. See the section on dynamically-growing character strings (page <Ref, Page #, Page Value = 166, Tag = ssave> 
) to see how to access the text. The comment text is a zero-terminated <F25>sha
r<F0> string and can be printed by <F25>ArFprintf()<F0>.

<titleA>

Data Structures Overview

<rule:Adot>

<Tab.>

<paraAT>

<F25>ASCII Reader<F0> data structures can be visualized as an inverted 
tree structure. At the top of the tree is the <F25>Il_state_t <F0>structure. 
Access to definitions of graphic elements (fonts, colors, patterns), 
autonumber streams, page definitions, master object definitions (components, 
frames, tables), headers and footers, and the top level component 
and table instances are all available through this structure. In addition, 
the top-level structure contains bookkeeping information about printing, 
A-pages, and measurement units.

<paraD>

<Frame,
	Name =			sideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		49,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<titleD>

Master definitions

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The master object definitions and their instances are contained in 
linked lists connected to the <F25>Il_state_t <F0>structure. Gaining 
access to any of these structures is a simple exercise in searching 
the proper linked list; each type of object has its own list. This 
search is simplified by the self-identifying nature of each object: 
each object has its name in its structure.

<para>

Some components - row definitions, diagramming objects, autonumber 
naming structures, effectivity attributes - are nested within higher-level 
objects. Access to any of these is available through its containing 
object.

<paraD>

<Frame,
	Name =			sideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		49,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.299 inches,
	Revision Bar Placement = Left>
<titleD>

Shared content components

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
Initial content, shared content, and component prefix information 
are all stored in the body of a master object definition. Access to 
this information is through the body of the containing object. Although 
shared content exists in the instance of a component read by <F25>ArDocRead()
<F0>, it is not required when building an AR data structure for output. 
The TPS loader will reconstruct all instances appropriately.

<paraD>

<|,50>
<Frame,
	Name =			sideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		50,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<titleD>

Special tokens

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The last class of objects in the AR data structure - frames, index 
tokens, autonumber references, attribute references, and font changes 
- are embedded within the text body of their containing components. 
Access to these structures is through the body of the containing object.

<para>

Recall that<F26> <F0>Interleaf <F26>characters<F0> are 16-bit shorts 
(<F25>shar<F0>s). If a <F25>shar <F0>is one of a set of special values, 
called tokens, the next four bytes in the body of the component constitute 
a pointer to the specified object. Thus, the body of a component is 
a mixture of text and special tokens. The discussion on <F26>tokens<F0> 
in this chapter has an example of code for processing them. 

<titleA>

Fonts Overview

<rule:Adot>

<Tab.>

<para>

The expression of font information in TPS is very flexible; there 
are several aspects to its markup. An Interleaf ASCII markup document 
has a declaration that establishes a set of font <F26>definitions<F0>. 
A font definition names a font family, a size, and an emphasis (such 
as bold or italic), without specifying attributes or inheritance.

<para>

An <F26>attribute<F0> of a font is a property such as underlining 
or revision bars. Font <F26>inheritance<F0> specifies how an in-line 
component <F26>inherits<F0> some of its properties from its surrounding 
component. A font inheritance setting can say that a font property 
should be be made <F26>more<F0>, made <F26>less<F0>, <F26>toggled<F0>, 
set <F26>directly<F0>, or left <F26>unchanged<F0>.

<para>

The font part of a <<!Class, <F26>component_name<F0>> declaration 
can set either attributes or inheritance, since an instance of the 
class can be either a top-level component or an in-line component.

<para>

The font part of a component instance can set attributes, and inheritance 
if it is an in-line component.

<para>

A font-change token in the body of a component can set attributes, 
but not inheritance.

<para>

These three domains - definitions, attributes, and inheritance - are 
each represented by a different data structure, the <F25>Font_info_t,<F0> 
the <F25>Font_attr_t<F0>, and the <F25>Font_inherit_t<F0>.

<titleA>

Diagramming Overview

<rule:Adot>

<Tab.>

<paraAT>

Business charts, scanned images, and graphic artwork are all examples 
of diagrams. Diagrams can exist inside page headers and footers, frames, 
and table cells. The content of a frame is always a diagramming object.

<para>

The basic units in a diagram - lines, circles, images, charts, etc. 
- are grouped into larger objects, and finally into a complete diagram.

<para>

The properties used to control the appearance of a diagram are maintained 
in the containing object: a frame or table cell. 

<titleB>

Diagram Object Classes

<para>

Diagramming objects can be divided into three classes based upon their 
structure. 

<titleC>

<|,51>Primitive objects

<para>

<F26>Primitive objects<F0> include lines, arcs, boxes, and so forth. 
Some primitive objects are quite complex; for example, a chart is 
a primitive object that has a complex internal structure. 

<titleC>

Microdocuments

<para>

A <F26>microdocument<F0> is a tiny text-editing environment, with 
a page definition and a sequence of components containing text. It 
is fully parallel to the sequence of components at the top level of 
a document.

<titleC>

Groups

<para>

A <F26>group<F0> is a diagramming object that glues together other 
diagramming objects. For example, a microdocument and a circle can 
be aligned on their centers and grouped. Thereafter, TPS will operate 
on the two objects as a whole, moving them together and maintaining 
their centered-ness. Grouping is a recursive operation; a group can 
contain sub-groups to any level.

<para>

The entire diagram is structured as a group, containing the set of 
primitive objects and sub-groups that make up the diagram. Thus a 
diagram can be represented as a tree, where the root is the total 
diagram, the internal branches are subgroups, and the leaves of the 
tree are primitive objects.

<para>

Currently, TPS does not allow a frame to contain a frame, so a diagram 
will never occur within a diagram. This may change in a future release. 
AR does allow a frame within a frame. A diagram can hold a microdocument, 
for example, with a component that has a frame in its body-text. Such 
a document will never be created by TPS 4.0, and TPS 4.0 would fail 
to load it if a client of AR constructed one.

<titleB>

Diagramming Limitations

<para>

The <F25>ASCII Reader <F0>does not currently support the following 
diagramming objects.

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Encapsulated
-PostScript

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Tracing 
objects

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Outline 
objects

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>The 
data in outline-fonts are encrypted (for commercial license reasons 
required by the vendor of the outlines) and we do not provide the 
method of decryption. But the client has full access to the structure 
of the diagram, just as there is full access to the text content of 
the document.

<titleB>

Diagramming Structure

<para>

Some types of information are common to all diagramming objects. These 
are an object-type identifier, a Z-coordinate for the object's depth 
in the diagram, flag bits, and a version number. Each type of object 
has this universal information in an <F25>ArDgObject_t<F0>, and its 
own, distinctive information in a separate data struc
<|,52>ture pointed to by the <F25>info <F0>field of the <F25>ArDgObject_t<F0>. 
The client program must cast the <F25>info<F0> pointer to the appropriate 
C pointer type, based on the <F25>type<F0> field, before using it.

<titleB>

Z-coordinate

<para>

The Z-coordinate in a diagramming object specifies the depth within 
an object for selection and display overlap purposes. Objects with 
higher Z-coordinates overlay those with lower coordinates. Groups 
should be given the Z-coordinate of the lowest member in the group.

<para>

By manipulating the Z-coordinates you can get an object to overlay 
some objects in a group and underlay others. Getting this right can 
be tricky. It is best done through experimentation with TPS. In general, 
for purposes of determining the overlay, ignore group Z-coordinates 
and concentrate on the underlying basic objects.

<titleA>

Tables Overview

<rule:Adot>

<Tab.>

<paraAT>

In TPS, a <F26>table<F0> is a rectangular object made up of rows and 
columns. The intersection of a row and column is called a <F26>cell<F0>. 
An important aspect of a table is that each cell has its width and 
height adjusted to accommodate the widest and highest member of its 
row and column; this is called <F26>autosizing.<F0> A table has optional <F26>r
ulings<F0>, or lines separating rows and columns, or bordering the 
table as a whole; rulings can be single or double lines, in various 
widths. A table can have a header row or a footer row, which will 
be repeated whenever the table grows so large that it crosses a page 
boundary. As an exception to the fixed column widths of a table, an 
individual cell can <F26>straddle<F0> its neighbor, essentially joining 
the area of two cells into one. Straddling a column is called a <F26>horizontal 
straddle<F0>. Straddling a row is called a <F26>vertical straddle<F0>; 
it is not yet supported in TPS.

<titleB>

Cells

<para>

A table-cell can be specified by a <F26><<Frame,...><F0> command, 
with all the graphics objects that TPS allows (including microdocuments), 
or by a <F26><<Cell,...> <F0>command. A <F26>Cell<F0> is a type of 
frame that contains only text. When it is selected for editing, the 
user is put directly into a microdocument-edit rather than the diagramming 
editor.

<titleB>

Table Inheritance

<para>

The relationship between table masters and instances is more complex 
than the similar arrangement for components. When a table is created 
it is a copy of its master table, inheriting the properties of its 
master table's rows and columns. Once the new table is created, the 
link between the master's and instance's rows and columns is broken. 
Each table instance maintains its own set of master rows. 
<|,53>Thus, two tables with the same table name and row names will 
not share row or columns property information.

<titleB>

Cell Masters

<para>

Cells and frames in a table do not inherit any properties from their 
like-named masters. Within a cell, or within a microdocument within 
a Frame, components <F24@U>do<F0> inherit properties from their master 
definitions in the normal way.

<titleB>

Table Masters

<para>

A master table has properties and a name. It has information about 
each column (mostly its width). And it has three sets of row information, 
each used in a different way.

<titleC>

Create rows

<para>

The <F26>create rows<F0> are used when an instance of a table is created 
by TPS. They are the <F26>names<F0> of the rows and the order in which 
they occur. For example, a table of parts-lists might have a header 
row named <F26>head<F0>, a footer row named <F26>foot<F0>, and an 
entry row named <F26>PartItem<F0>. When created, the table might have 
10 (empty) items in it; as the user fills in the table, he or she 
inserts <F26>PartItem<F0> rows as needed, and the final table may 
have 50 or 100 <F26>PartItem<F0> rows. The <F26>create rows<F0> give 
only the names of the rows when the table is initially created.

<titleC>

Master rows

<para>

The <F26>master rows<F0> are the master definitions for the set of 
unique row names. A table can have many copies of a <F26>PartItem<F0> 
row, but there will be only one <F26>master row<F0> definition for 
PartItem.

<titleC>

Content rows

<para>

The <F26>content rows<F0> are the actual body of the table. <F26>Master 
rows<F0> and <F26>content rows<F0> both use the same type of data 
structure; they are distinguished by their <F25>Identifier_t<F0> fields.

<para>

Within a row, there are various row properties, and then the contents 
of the row. TPS restricts the contents of a row to be only frames 
or cells. AR does not limit a row that way; its contents can be anything 
that conforms to a <F25>NullObj_t<F0> pointer.

<titleA>

<Autonum, markers, 1, Tagname = tokens>Component-body Tokens

<rule:Adot>

<Tab.>

<paraAT>

A component can hold a large variety of objects. Besides plain text 
characters, there may be font-change tokens, frame anchors, autonumbers, 
hard returns, tabs, and so on. These are collectively called <F26>tokens<F0>. 
Plain text and tokens are both represented in the component body by <F25>shar
<F0>s. If a <F25>shar<F0> is numerically less than 16384, it is considered 
a plain text character. Otherwise, it is considered to be the 
<|,54><F25>token<F0> field of a <F25>Token_t<F0> structure. A <F25>Token_t
<F0> has as its first field an identifier to discriminate among the 
various types of tokens. The second field is a C union. It is usually 
a pointer to a secondary data structure that holds token-specific 
data. In other cases the secondary information is small (fits in a <F25>long
<F0> variable) and is held directly in the union.

<para>

On computers that require structures to be aligned on particular addresses, 
it may be necessary to pad the component buffer with one or more shars, 
to get to an acceptable address. There is a special token type used 
for this purpose, <F25>tok_PaddingNOP<F0>. It should be ignored whenever 
a client finds it in the buffer. 

<para>

In the picture below, the component body holds four plain text characters, 
then a <F25>Token_t<F0> structure, and then more characters. The <F25>token
<F0> field of the <F25>Token_t<F0> has value 0x400E, which is an integer 
composed of two parts. The bit 0x4000 identifies this as a token, 
not a plain text character. The value 0x0E is the value assigned to 
a font-change token. Accordingly, the second field of the <F25>Token_t<F0> 
is used as <F25>u.fontvalP<F0> and it points to a <F25>Font_value_t<F0> 
variable allocated elsewhere in memory. In this example, the effect 
of the font-change token is to make the current font <F25>bold<F0>; 
and the characters that follow reflect that change.

<figure>

<Frame,
	Name =			figure,
	Placement =		At Anchor,
	Width =			5 inches,
	Height =		Contents,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,5,127
   (g9,2,0
     (g9,2,0
       (v6,2,65536,0,0,4.96,0,7,0,25,0)
       (v6,3,65536,4.96,0,4.96,1.773333,7,0,25,0)
       (v6,4,65536,4.96,1.773333,0,1.773333,7,0,25,0)
       (v6,5,65536,0,1.773333,0,0,7,0,25,0))))
 (p8,7,8,5,5,127
   (g9,7,0
     (g9,7,0
       (v6,7,65536,0.12,0.066667,0.52,0.066667,7,0,8,0)
       (v6,8,65536,0.52,0.066667,0.52,1.533333,7,0,8,0)
       (v6,9,65536,0.52,1.533333,0.12,1.533333,7,0,8,0)
       (v6,10,65536,0.12,1.533333,0.12,0.066667,7,0,8,0))))
 (p8,12,8,5,5,127
   (g9,12,0
     (g9,12,0
       (v6,12,65536,0.866667,0.266667,1.466667,0.266667,7,0,8,0)
       (v6,13,65536,1.466667,0.266667,1.466667,0.4,7,0,8,0)
       (v6,14,65536,1.466667,0.4,0.866667,0.4,7,0,8,0)
       (v6,15,65536,0.866667,0.4,0.866667,0.266667,7,0,8,0))))
 (v6,16,0,1.2,0.6,1.2,0.4,7,0,8,5)
 (v6,17,0,1.066667,0.4,1.066667,0.266667,7,0,8,0)
 (v6,18,0,1.333333,0.4,1.333333,0.266667,7,0,8,0)
 (T12,19,12,0.76,0.806667,5,127,5,7,0,12,0,7,
<!Page, Width = 2.313 inches, Height = 0.167 inches>
<micro:caption,
	Alignment =		Left,
	Font =			F28>

T e x t    0x400E <F29>          c h a r s <F0>   

<End Text>)
 (v6,20,0,1.693333,0.806667,1.693333,0.98,7,0,8,0)
 (v6,21,0,2.44,0.806667,2.44,0.98,7,0,8,0)
 (v6,22,0,2.893333,0.933333,2.893333,0.98,7,0,8,0)
 (v6,23,0,4.266667,0.806667,4.266667,0.98,7,0,8,0)
 (v6,24,0,4.586668,0.806667,4.586668,0.98,7,0,8,0)
 (p8,26,8,5,5,127
   (g9,26,0
     (g9,26,0
       (v6,26,65536,1.693333,0.733333,3.293333,0.733333,7,0,25,0)
       (v6,27,65536,3.293333,0.733333,3.293333,1.06,7,0,25,0)
       (v6,28,65536,3.293333,1.06,1.693333,1.06,7,0,25,0)
       (v6,29,65536,1.693333,1.06,1.693333,0.733333,7,0,25,0))))
 (p8,31,8,5,5,127
   (g9,31,0
     (g9,31,0
       (v6,31,65536,3.32,1.266667,3.986667,1.266667,7,0,12,0)
       (v6,32,65536,3.986667,1.266667,3.986667,1.666667,7,0,12,0)
       (v6,33,65536,3.986667,1.666667,3.32,1.666667,7,0,12,0)
       (v6,34,65536,3.32,1.666667,3.32,1.266667,7,0,12,0))))
 (v6,35,0,3.986667,1.533333,3.32,1.533333,7,0,12,0)
 (v6,36,0,3.986667,1.4,3.32,1.4,7,0,12,0)
 (T12,37,12,3.36,1.093333,5,127,5,7,127,8,0,7,
<!Page, Width = 0.707 inches, Height = 0.139 inches>
<micro:caption,
	Alignment =		Left,
	Font =			F20>

Font_value_t

<End Text>)
 (T12,38,12,4.093333,1.226668,5,127,5,7,127,8,0,3,
<!Page, Width = 1 inches, Height = 0.448 inches>
<micro:caption,
	Alignment =		Left,
	Font =			F20>

font_token<HR>
font_inherit<HR>
font_attr

<End Text>)
 (T12,39,12,0.12,1.56,5,127,5,7,127,8,0,7,
<!Page, Width = 0.926 inches, Height = 0.139 inches>
<micro:caption,
	Alignment =		Left,
	Font =			F20>

Cmpn_t variable

<End Text>)
 (v6,40,0,0.533333,0.333333,0.866667,0.333333,7,0,8,0)
 (p8,42,0,5,5,127
   (g9,42,0
     (g9,42,0
       (v6,42,0,0.8,0.4,0.866667,0.333333,7,0,8,0)
       (v6,43,0,0.866667,0.333333,0.8,0.266667,7,0,8,0))))
 (T12,44,12,-11.667777,0.293333,5,127,5,7,127,8,0,7,
<!Page, Width = 0.267 inches, Height = 0.139 inches>
<micro:caption,
	Alignment =		Center,
	Font =			F20>

body

<End Text>)
 (T12,45,12,2,0.56,5,127,5,7,127,8,0,7,
<!Page, Width = 1.004 inches, Height = 0.139 inches>
<micro:caption,
	Alignment =		Left,
	Font =			F20>

Token_t structure 

<End Text>)
 (v6,46,0,1.4,0.413333,1.4,0.493333,7,0,8,5)
 (v6,47,0,1.4,0.493333,4.426668,0.493333,7,0,8,5)
 (v6,48,0,4.426668,0.493333,4.426668,0.733333,7,0,8,5)
 (v6,49,0,2.84,1.06,2.84,1.466667,7,0,8,0)
 (v6,50,0,2.84,1.466667,3.266667,1.466667,7,0,8,0)
 (v6,51,0,0.973333,0.4,0.973333,0.733333,7,0,8,5)
 (p8,53,0,5,5,127
   (g9,53,0
     (g9,53,0
       (v6,53,0,0.906667,0.666667,0.973333,0.733333,7,0,8,0)
       (v6,54,0,0.973333,0.733333,1.04,0.666667,7,0,8,0))))
 (p8,56,0,5,5,127
   (g9,56,0
     (g9,56,0
       (v6,56,0,4.36,0.666667,4.426668,0.733333,7,0,8,0)
       (v6,57,0,4.426668,0.733333,4.493333,0.666667,7,0,8,0))))
 (p8,59,0,5,5,127
   (g9,59,0
     (g9,59,0
       (v6,59,0,3.207407,1.4,3.266667,1.466667,7,0,8,0)
       (v6,60,0,3.266667,1.466667,3.207407,1.533333,7,0,8,0))))
 (v6,61,0,1.2,0.6,1.8,0.6,7,0,8,5)
 (v6,62,0,1.8,0.6,1.8,0.666667,7,0,8,0)
 (p8,64,0,5,5,127
   (g9,64,0
     (g9,64,0
       (v6,64,0,1.733333,0.64,1.8,0.706667,7,0,8,0)
       (v6,65,0,1.8,0.706667,1.866668,0.64,7,0,8,0))))
 (E15,0,0,5,8,1,0.053333,1,15,0,0,2,0.013333,0.013333,0,1,5,127,7,0,0,7,0,0,1,0.
  066667,0.066667,6,6,0,0.066667,6))>

<label>

<Tab><Autonum, label, 1, First = Yes, Value = "Figure 8">. Nested 
structures in the body of a component.

<para>

The identifier for a token is typedef'd as a <F25>TOK_t<F0> and it 
is a <F25>short<F0>, equivalent to a <F25>shar<F0>. There are #define 
values for each of the individual token types, and macros to test, 
set, and reset the token bit.

<para>

The tokens <F25>tok_CharSpecial<F0>, <F25>tok_FJ<F0>,<F25> tok_HR<F0>,<F25> 
tok_SP<F0>,<F25> tok_Tab<F0>,<F25> tok_TabDash<F0>,<F25> tok_TabDot<F0>, 
and<F25> tok_TabUnder<F0> do not have secondary data structures. Each 
of the tab tokens encodes the tab-leader type in its identifier. Among 
these tokens only <F25>tok_CharSpecial<F0> has any secondary information. 
It uses <F25>u.token_data<F0> to hold the character value. Any character 
value can be held in a plain character <F25>shar<F0> in the component 
body or in a <F25>tok_CharSpecial<F0> token. The AR read routines 
use a token for any character value that is outside of the range of 
printable ASCII (that is, outside the range 0x20 to 0x7E). This is 
done as a convenience to the client. 

<para>

Note how AR treats ASCII tab and newline characters under this rule. 
A tab (0x09) character goes into a char-special token. But TPS does 
not put any tab characters into an Interleaf ASCII markup file. A 
tab in the text is represented by a <<Tab> command. Thus an actual 
0x09 character goes into a char-special token. Similarly, TPS represents 
a hard return not by a newline character but by the <<HR> command. 
A newline becomes a space if the component has the property <F26>Fill=blank
<F0>.

<titleB>

<|,55>Token Values

<Cstuff>

typedef short<Tab><Tab><Tab><Tab>TOK_t;<HR>
<HR>
#define TOK<Tab><Tab><Tab><Tab>(0x4000)<HR>
#define IS_TOKEN(it)<Tab><Tab>((it)&TOK)<Tab><Tab>Returns YES if a 
token<HR>
#define TOKEN_SET(it)<Tab>((it)|TOK)<Tab><Tab>Mark a token<HR>
#define TOKEN_RESET(it)<Tab>((it)&~TOK)<Tab>Strip token mark<HR>
<HR>
#define tok_Unknown<Tab><Tab><Tab><Tab><Tab><Tab>A placeholder<HR>
#define tok_Autonum<Tab><Tab><Tab><Tab><Tab><Tab>An autonumber instance<HR>
#define tok_CharSpecial<Tab><Tab><Tab><Tab><Tab><Tab>Special characters<HR>
#define tok_Comment<Tab><Tab><Tab><Tab><Tab><Tab>Comment structure<HR>
#define tok_Cmpn<Tab><Tab><Tab><Tab><Tab><Tab><Tab>Inline component<HR>
#define tok_FJ<Tab><Tab><Tab><Tab><Tab><Tab><Tab><Tab>Forced justify<HR>
#define tok_Font<Tab><Tab><Tab><Tab><Tab><Tab><Tab>Font change<HR>
#define tok_Frame<Tab><Tab><Tab><Tab><Tab><Tab><Tab>Frame<HR>
#define tok_HR<Tab><Tab><Tab><Tab><Tab><Tab><Tab><Tab>Hard return<HR>
#define tok_Index<Tab><Tab><Tab><Tab><Tab><Tab><Tab>Index markup<HR>
#define tok_PaddingNOP<Tab><Tab><Tab><Tab><Tab>word alignment token<HR>
#define tok_Ref<Tab><Tab><Tab><Tab><Tab><Tab><Tab><Tab>Attr, page 
or autonum reference<HR>
#define tok_SP<Tab><Tab><Tab><Tab><Tab><Tab><Tab><Tab>Hard space<HR>
#define tok_Tab<Tab><Tab><Tab><Tab><Tab><Tab><Tab><Tab>Regular tab<HR>
#define tok_TabDash<Tab><Tab><Tab><Tab><Tab><Tab>Tabs with dashes<HR>
#define tok_TabDot<Tab><Tab><Tab><Tab><Tab><Tab><Tab>Tabs with dots<HR>
#define tok_TabUnder<Tab><Tab><Tab><Tab><Tab><Tab>Tabs with underscore<HR>
#define tok_PageBreak<Tab><Tab><Tab><Tab><Tab><Tab>Page break marker<HR>

<Cstuff>

typedef struct token_t<HR>
{<HR>
<Tab>TOK_t token;<HR>
<Tab>union {<HR>
<Tab><Tab>long<Tab><Tab><Tab>token_data;<HR>
<Tab><Tab>Cmpn_t<Tab><Tab><Tab>*subcmpnP;<HR>
<Tab><Tab>Font_value_t<Tab>*fontvalP;<HR>
<Tab><Tab>Autonum_t<Tab><Tab>*anumP;<HR>
<Tab><Tab>Ssave_t<Tab><Tab><Tab>*textP;<HR>
<Tab><Tab>Frame_t<Tab><Tab>*frameP;<HR>
<Tab><Tab>Index_t<Tab><Tab><Tab>*indexP;<HR>
<Tab><Tab>Ref_t<Tab><Tab><Tab>*refP;<HR>
<Tab><Tab>Comment_t<Tab><Tab>*commentP;<HR>
<Tab>} u;<HR>
} Token_t;

<Cstuff>

<Frame,
	Name =			CsideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		55,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.299 inches,
	Revision Bar Placement = Left>
<CtitleD>

Macro to put tokens in shrings.

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This macro is called with a (Token_t *) and an (Ssave_t *). It assumes 
that sizeof(Token_t) is a multiple of sizeof(short), and AR assumes 
that the first field is located zero bytes from the start of the Token_t 
structure. It does not assume dense-packed structures.<HR>
<HR>
#define BufEnter(thingP, whereP) \<HR>
<|,56><Tab>/** make caller's buffer refer to this item. **/ \<HR>
<Tab>{\<HR>
<Tab><Tab>/** note this is the LONGALIGNED way to do this. **/ \<HR>
<Tab><Tab>register short *sP; \<HR>
<Tab><Tab>register int i; \<HR>
<Tab><Tab>for (sP=(short*)thingP, i=sizeof(*thingP)/sizeof(short); 
i--; ) {\<HR>
<Tab><Tab><Tab>SsSaveS(*sP++, whereP); \<HR>
<Tab><Tab>} \<HR>
<Tab>}

<para>

If a client is building a component body directly, it should use <F25>SsSaveS()
<F0> to add characters through the <F25>Ssave_t<F0> control block 
(see the section on dynamically growing characters string services 
on page <Ref, Page #, Page Value = 166, Tag = ssave> ). To enter a 
token into the buffer, use the <F25>BufEnter()<F0> macro. It is (mostly) 
independent of structure-alignment and structure-padding assumptions, 
and code that uses it will be portable.

<para>

To traverse the body of a component, do something like the following, 
or do a similar loop using SsAmount() to get the number of <F25>shar<F0>s 
in the buffer. Note that the buffer is <F27>not<F0> NULL-terminated.

<Cstuff>

{<HR>
<Tab>shar *sP;<HR>
<Tab>for (sP = SsBufStart(&cmP->body); sP << SsBufEnd(&cmP->body); 
) {<HR>
<Tab><Tab>if (IS_PADDING(*sP) {<HR>
<Tab><Tab><Tab>sP++;<Tab>/* ignore it. */<HR>
<Tab><Tab>}<HR>
<Tab><Tab>else if (IS_TOKEN(*sP)) {<HR>
<Tab><Tab><Tab>switch (TOKEN_RESET(*sP)) {<HR>
<Tab><Tab><Tab>case tok_FRAME: .... break;<HR>
<Tab><Tab><Tab>case tok_AUTONUM: .... break;<HR>
<Tab><Tab><Tab>etc.<HR>
<Tab><Tab><Tab>}<HR>
<Tab><Tab><Tab>sP += sizeof(Token_t)/sizeof(shar);<HR>
<Tab><Tab>}<HR>
<Tab><Tab>else {<HR>
<Tab><Tab><Tab>/* it is a plain shar character. */<HR>
<Tab><Tab><Tab>/* process it. */<HR>
<Tab><Tab>}<HR>
<Tab>}<HR>
}

<paraD>

<Frame,
	Name =			sideD,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		56,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<titleD>

Adding tokens

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The following example demonstrates the adding of tokens to a component 
body, the creation of subcomponents; the initialization of components 
and fonts; the use of the <F25>BufEnter<F0> macro; and the use of 
font tokens.

<Cstuff>

/*<HR>
** Find the first component and place its contents in an<HR>
** inline component. <HR>
*/<HR>
{<HR>
<Tab>Cmpn_t<Tab><Tab><Tab>*cmpnP;<HR>
<Tab>Cmpn_t<Tab><Tab><Tab>*inline_cmpnP;<HR>
<|,57><Tab>Cmpn_t<Tab><Tab><Tab>*master_cmpnP;<HR>
<Tab>Token_t<Tab><Tab><Tab>token;<HR>
<Tab>Ssave_t<Tab><Tab><Tab>save_t;<HR>
<Tab>shar<Tab><Tab><Tab>shar_char;<HR>
<Tab>Font_value_t<Tab>*font_valueP;<HR>
<HR>
<Tab>/* find the first component */<HR>
<Tab>/* the body of the Il_state_t structure is a linked<HR>
<Tab>** list of top-level components and tables are a linked list 
of Null objects.<HR>
<Tab>** Convert them to the appropriate type before using.<HR>
<Tab>*/<HR>
<Tab>cmpnP = (Cmpn_t*) input_state.bodyP;<HR>
<HR>
<Tab>/* allocate the inline component */<HR>
<Tab>inline_cmpnP = (Cmpn_t*) ArSafeMalloc( sizeof ( Cmpn_t ) );<HR>
<HR>
<Tab>/* initialize the inline component */<HR>
<Tab>inline_cmpnP = ArCmpnInit ( inline_cmpnP );<HR>
<HR>
<Tab>/* copy relevant master information */<HR>
<HR>
<Tab>/* find the master. Note that the nextP points to a NullObj_t 
and<HR>
<Tab>** must be converted.<HR>
<Tab>*/<HR>
<Tab>for (master_cmpnP = input_state.cmpnP; master_cmpnP; <HR>
<Tab><Tab>master_cmpnP = (Cmpn_t*) master_cmpnP->nextP)<HR>
<Tab>{<HR>
<Tab><Tab>/* find the current component's master */<HR>
<Tab><Tab>if (ArShrcmp(master_cmpnP->cmpn_name, <HR>
<Tab><Tab><Tab>cmpnP->cmpn_name) == 0)<HR>
<Tab><Tab>break;<HR>
<Tab>}<HR>
<Tab><HR>
<Tab>if ( master_cmpnP == (Cmpn_t*) NULL )<HR>
<Tab>{<HR>
<Tab><Tab>ArFprintf(stdout, <HR>
<Tab><Tab><#7f>Couldn't find a master component for '%S'", cmpnP->cmpn_name 
);<HR>
<Tab><Tab>exit ( -1 );<HR>
<Tab>}<HR>
<HR>
<Tab>/* copy relevant master information */<HR>
<Tab>*inline_cmpnP = *master_cmpnP;<HR>
<HR>
<Tab>/* change appropriate fields */<HR>
<Tab>inline_cmpnP->id = ID_Cmpn;<HR>
<Tab>inline_cmpnP->subcmpn = YES;<HR>
<HR>
<Tab>/* save the old font information for the subcomponent.<HR>
<Tab>** If we change something other than the font_inherit<HR>
<Tab>** field, make the same change to this saved structure.<HR>
<|,58><Tab>*/<HR>
<Tab>font_valueP = (Font_value_t*) ArSafeMalloc( sizeof( Font_value_t 
) );<HR>
<Tab>*font_valueP = inline_cmpnP->font_value;<HR>
<HR>
<Tab>/* change the font to inherit the opposite strike-through info 
*/<HR>
<Tab>inline_cmpnP->font_value.font_inherit.str = fn_INHERIT_TOGGLE;<HR>
<Tab>inline_cmpnP->font_value.font_attr.str = YES;<HR>
<Tab>font_valueP->font_attr.str = YES;<Tab>/* copy the contents of 
the parent */<HR>
<HR>
<Tab>/* to add an inline component, TPS requires that the<HR>
<Tab>** first part of the new inline be the font of the inline<HR>
<Tab>*/<HR>
<Tab>token.token = TOKEN_SET( tok_Font );<HR>
<Tab>token.u.fontvalP = font_valueP;<HR>
<Tab>inline_cmpnP->body = SsInitEmpty();<HR>
<Tab>BufEnter( &token, &inline_cmpnP->body );<HR>
<HR>
<Tab>/* copy the Ssave_t structure so that we don't change<HR>
<Tab>** its values.<HR>
<Tab>*/<HR>
<Tab>save_t = cmpnP->body;<HR>
<Tab>while (( shar_char = SsGetS( &save_t )) != EOF )<HR>
<Tab><Tab>SsSaveS( shar_char, &inline_cmpnP->body );<HR>
<HR>
<Tab>/* insert the inline into the outer component */<HR>
<Tab>token.u.subcmpnP = inline_cmpnP;<HR>
<Tab>token.token = TOKEN_SET( tok_Cmpn );<HR>
<Tab>BufEnter( &token, &cmpnP->body );<HR>
<HR>
<Tab>/* change the font back to the main component */<HR>
<Tab>font_valueP = (Font_value_t*) ArSafeMalloc( sizeof( Font_value_t 
) );<HR>
<Tab>*font_valueP = ArFontValueInit();<HR>
<Tab>font_valueP->font_token = 0;<HR>
<Tab>token.token = TOKEN_SET( tok_Font );<HR>
<Tab>token.u.fontvalP = font_valueP;<HR>
<Tab>BufEnter( &token, &cmpnP->body );<HR>
}

<titleA,
	Begin New Page =		yes>

<|,59>Structure Definitions

<rule:Adot>

<Tab.>

<paraAT>

The following sections describe each data structure that may be processed 
by the <F25>ASCII Reader.<F0> For more information, examine <F25>ar5defs.h
<F0>. For more information on the contents of the data structures 
consult the <F26>TPS Release 4.0 File Formats <F0>document. To gain 
more information on the meaning of each parameter, consult the Interleaf 
reference manuals.

<para>

The structure definitions are organized as follows:

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Miscellaneou
s structures

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Structure 
for the Document

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Structure 
for Text

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Structure 
for Tables

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Structure 
for Diagrams

<list>

<"|:list", Subcomponent = yes><F0><Tab><F25>><F0><Tab><End Sub><F0>Structure 
for Charts

<listLA>

<"|:listLA", Subcomponent = yes><F0><Tab><F20>H<F0><Tab><End Sub><F0>Structure 
for Images

<para>

Keep in mind that you do not have to initialize each component when 
generating an output document as long as you have read a template 
or source ASCII Markup document with <F25>ArDocRead()<F0>. You only 
need to generate complete structures for those objects you are adding 
to a document.

<titleA,
	Begin New Page =		yes>

<|,60>Miscellaneous Structures

<rule:Adot>

<Tab.>

<paraAT>

The data structures described in this section are not specific to 
any one type of Interleaf object.

<CtitleB>

<|,61>Ar_init_t

<Cstuff>

#define ARINITFIELDS (2)

<Cstuff>

typedef struct ar_init_t <HR>
{<HR>
<Tab>short<Tab><Tab><Tab>entries;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>client_rsu;<HR>
<Tab>bool<Tab><Tab><Tab>double_markup;<Tab><Tab>/** control of ArEmitChar() 
& '<<' **/<HR>
} Ar_init_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		61,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
entries

<Cpara>

Number of fields following in this structure. Initialize to ARINITFIELDS.

<CtitleCns>

client_rsu

<Cpara>

The number of <F25>Rsu<F0>s per inch. An <F25>Rsu <F0>(Ridiculously 
Small Unit) is the smallest unit of measure in a document.

<CtitleCns>

double_markup

<Cpara>

If YES, generate an additional '<<' when emitting a '<<' to the output 
file.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		61,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
Some of the internal values of AR can be controlled by the client. 
In the absence of a call to <F25>ArInit()<F0>, default values will 
be used. <F25>ArInit()<F0> takes one parameter, a pointer to an <F25>Ar_init_t
<F0> object. It is designed to allow a newer version of AR to continue 
to serve a client program written for an older version of AR. The 
first field in the <F25>Ar_init_t<F0> is guaranteed to be a <F25>short<F0> 
that holds the number of fields following. Also, the <F25>Ar_init_t<F0> 
is guaranteed to grow only in upward-compatible ways. This means that 
new fields will be added at the end, and older fields will never be 
removed or have their interpretation changed. 

<Cpara>

Suppose that AR 4.0 supports two fields and AR 5.0 will support three. 
A client written for AR 4.0 will pass an <F25>entries<F0> field of 
2. AR 5.0 will know not to look for a third field, and will read only 
the first two. AR 5.0 will leave unchanged the default value for the 
third field.

<Cpara>

The <F25>client_rsu<F0> field sets the internal basis of <F25>Rsu<F0>'s 
per inch. This is a convenience to the client, designed for filter 
programs. For example, Microsoft Word uses a measure called a <#7f>twip" 
which is 1/20th of a point, or 1/1440 of an inch. By setting AR's 
internal measure to 1440 per inch, the filter will not have to convert 
a measure from a Word file into a different measure for the Interleaf 
ASCII markup output file. Interleaf ASCII markup measures are expressed 
as floating-point measures such a <#7f>1.375 inches" rather than in 
integral multiples of a small integer unit. This allows AR to use 
any basis for its <F25>Rsu<F0>'s; it needs only to be used consistently.

<Cpara>

The default basis of <F25>Rsu<F0>'s is 900 per inch.

<Cpara>

The boolean value <F25>double_markup<F0> is used when writing to the 
output file. The character <#7f><<" must be written twice when it 
is written into the body text of an output Interleaf ASCII markup 
document. Clearly, this is not desirable if the output is a file of 
raw ASCII text.

<CtitleB>

<|,62>File_info_t

<Cstuff>

typedef struct file_info_t<HR>
{<HR>
<Tab>Identifier_t<Tab><Tab>id;<HR>
<Tab>FILE<Tab><Tab><Tab>*ifile;<HR>
<Tab>Ssave_t<Tab><Tab><Tab>inqueue;<HR>
<Tab>shar<Tab><Tab><Tab>saved_char;<HR>
} File_info_t;

<Cpara>

The client never needs to modify the fields in the <F25>File_info_t<F0>.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		62,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
AR provides a full parser for Interleaf ASCII markup. A client never 
needs to read the language itself. Instead, by using AR read routines, 
the client receives a data structure that holds the internal form 
of the markup information. However, the parsing process requires some 
internal state information to be maintained between calls to the AR 
read routines. This state information is kept in the <F25>File_info_t<F0> 
structure. It is mostly a push-back queue of characters that have 
been read ahead by the parser.

<Cpara>

Currently, AR can read from only one file at a time. This limitation 
may be removed in a future release.

<CtitleB>

<|,63>NullObj_t

<Cstuff>

typedef short Identifier_t;

<Cstuff>

#define Identify ( thing ) ( thing ? ( * ( Identifier_t * ) thing 
) : ( ID_Error ) )

<Cstuff>

typedef struct nullobj_t<HR>
{<HR>
<Tab>Identifier_t<Tab><Tab>id;<HR>
<Tab>struct nullobj_t<Tab>*nextP;<HR>
<Tab>struct nullobj_t<Tab>*spareP;<HR>
} NullObj_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		63,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
id

<Cpara>

Identifies the structure. The recognized object names are on page <Ref, Page #, Page Value = 47, Tag = "structure ident">
.

<CtitleCns>

nextP

<Cpara>

Next object in a linked list.

<CtitleCns>

spareP

<Cpara>

This field is not used by the <F25>ASCII Reader<F0>. It is initialized 
to NULL, but the user can use it for any purpose. Some possibilities 
are a back-pointer (for a doubly-linked list) and a second linked 
list.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		63,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This structure is included at the top of data structures that can 
appear in lists. Its purpose is to allow an interface to sequence 
through a list of objects and find specific objects quickly.

<CtitleB>

<|,64>Unknown_t

<Cstuff>

typedef struct unknown_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>Ssave_t<Tab><Tab>text;<HR>
} Unknown_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		64,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Self-identifying and linking fields common to all linkable structures.

<CtitleCns>

text

<Cpara>

Text of unknown markup.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		64,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The preservation of <#7f>unknown properties" is a forward-looking 
feature of the <F25>ASCII Reader<F0>. Wherever possible, an unrecognized 
keyword in the markup language does not generate an error. Instead, 
the text of the markup is preserved in an <F25>Unknown_t<F0> object. 
The <#7f>unknown text" goes from the unrecognized keyword to the next 
recognizable delimiter in the markup language: a comma<F25>,<F0> or 
a greater-than sign <F25>><F0>. The output functions in AR will re-emit 
the markup text, hopefully preserving the original information in 
the output document.

<Cpara>

The user should not need to use this structure.

<titleA,
	Begin New Page =		yes>

<|,65>Structure for the Document

<rule:Adot>

<Tab.>

<paraAT>

The data structures in this section describe the document as a whole. 
This is the top level of the AR data structures through which access 
to the components, master definitions, frames, tables, charts, and 
images is obtained.

<CtitleB>

<|,66>Il_state_t

<Cstuff>

typedef struct il_state_t<HR>
{<HR>
<Tab>Identifier_t<Tab><Tab><Tab>id;<HR>
<Tab>Ops_info_t<Tab><Tab><Tab>ops_info;<HR>
<Tab>Document_info_t<Tab>doc_info;<HR>
<Tab>Font_info_t<Tab><Tab><Tab>*fontP;<HR>
<Tab>Color_info_t<Tab><Tab>*colorP;<HR>
<Tab>Pattern_info_t<Tab><Tab>*patternP;<HR>
<Tab>Page_info_t<Tab><Tab><Tab>page_info;<HR>
<Tab>An_stream_info_t<Tab>*an_streamP;<HR>
<Tab>Cmpn_t<Tab><Tab><Tab><Tab>*class_defaultsP;<HR>
<Tab>Cmpn_t<Tab><Tab><Tab><Tab>*cmpnP;<HR>
<Tab>Frame_t<Tab><Tab><Tab>*frameP;<HR>
<Tab>Table_t<Tab><Tab><Tab><Tab>*tableP;<HR>
<Tab>HeaderFooter_t<Tab><Tab>*hdftP;<HR>
<Tab>NullObj_t<Tab><Tab><Tab>*bodyP;<HR>
} Il_state_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		66,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
id

<Cpara>

Identifies the structure. Should be <F25>ID_State<F0>.

<CtitleCns>

ops_info

<Cpara>

Version of the ASCII Markup used and whether metric measures will 
be used.

<CtitleCns>

doc_info

<Cpara>

Values for the Printer property sheet.

<CtitleCns>

fontP

<Cpara>

List of font definitions. All fonts are defined here and given a number. 
The font number is then used throughout the document.

<CtitleCns>

colorP

<Cpara>

List colors that the document can use. Colors are referenced by number 
throughout the document. By default, zero is white and seven is black.

<CtitleCns>

patternP

<Cpara>

List of patterns that the document can use. Patterns are referenced 
by number. Each pattern is described with a bitmap.

<CtitleCns>

page_info

<Cpara>

Values for the Page property sheet. This includes such items as number 
of columns, margins, and vertical justification.

<CtitleCns>

an_streamP

<Cpara>

Autonumber stream definitions.

<CtitleCns>

<|,67>class_defaultsP

<Cpara>

Default properties for all components. Master component definitions 
and component instances override these settings.

<CtitleCns>

cmpnP

<Cpara>

A list of component master definitions. All text component instances 
have a master in this list.

<CtitleCns>

frameP

<Cpara>

A list of frame master definitions. All frame instances have a master 
definition in this list.

<CtitleCns>

tableP

<Cpara>

A list of table master definitions. All tables have a master definition 
in this list.

<CtitleCns>

hdftP

<Cpara>

List of headers and footers for the document. There are different 
definitions for first header (footer), right header (footer), left 
header (footer), etc.

<CtitleCns>

bodyP

<Cpara>

List of component and table instances. Each is listed according to 
the order it will appear in in the output document. Each object type 
is identified by its <F25>id<F0> field. Note that frame instances 
are anchored within component instances and can be accessed through 
the token structure.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		67,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F25>Il_state_t<F0> structure is an umbrella structure that holds 
all the information present in an Interleaf ASCII markup document. 
All of the fixed properties are represented in their own substructures. 
The variable parts of the document are represented as linked lists, 
any of which may be empty. The content of the document is a linked 
list pointed to by the <F25>bodyP<F0> field. It is a list of <F25>Cmpn_t, 
Table_t,<F0> or <F25>Comment_t<F0> objects in the order in which they 
occur in the document, Comments that occur among the declarations 
are placed at the start of the body list, since there is no other 
place to put them.

<CtitleB>

<|,68>Ops_info_t

<Cstuff>

#define OPS_STYLE_DEFAULT  (0)<HR>
#define OPS_STYLE_METRIC  (1+OPS_STYLE_DEFAULT)

<Cstuff>

typedef short Ops_version_t;

<Cstuff>

typedef struct ops_decl_t<HR>
{<HR>
<Tab>Identifier_t<Tab><Tab>id;<HR>
<Tab>Ops_version_t<Tab>version;<HR>
<Tab>short<Tab><Tab><Tab>style;<HR>
} Ops_info_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		68,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
id

<Cpara>

Identifies the structure. Should be <F25>ID_OpsDecl<F0>.

<CtitleCns>

version

<Cpara>

Version of ASCII Markup. Currently version 6.1.

<CtitleCns>

style

<Cpara>

Whether default (English) or metric measures. Use the <F26>defines<F0> 
listed above.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		68,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This structure's purpose is to identify the document as an Interleaf 
ASCII markup document, to set the level number of Interleaf ASCII 
markup language support, and to indicate whether this document uses 
metric measures.

<CtitleB>

<|,69>Document_info_t

<Cstuff>

typedef struct document_flags_t<HR>
{<HR>
<Tab>unsigned header_page<Tab><Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned double_sided<Tab><Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned manual_feed<Tab><Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned print_rev<Tab><Tab><Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned print_strikes<Tab><Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned print_underlines<Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned underline_at_descender<Tab><Tab>: 1;<HR>
<Tab>unsigned orient_inverted<Tab><Tab><Tab><Tab>: 1;<HR>
} Document_flags_t;<HR>

<Cstuff>

typedef struct document_info_t<HR>
{<HR>
<Tab>Identifier_t<Tab><Tab><Tab>id;<HR>
<Tab>Document_flags_t<Tab>flags;<HR>
<Tab>shar<Tab><Tab><Tab><Tab>final_output_dev[AR_MAX_PRINTER_SIZE];<HR>
<Tab>shar<Tab><Tab><Tab><Tab>def_printer[AR_MAX_PRINTER_SIZE];<HR>
<Tab>Measure_t<Tab><Tab><Tab>measure_unit;<HR>
<Tab>Num_style_t<Tab><Tab>A_Pg_style;<HR>
<Tab>shar<Tab><Tab><Tab><Tab>A_Pg_prefix[AR_MAX_WORD];<HR>
<Tab>short<Tab><Tab><Tab><Tab>max_page;<HR>
<Tab>short<Tab><Tab><Tab><Tab>spot_color_sep;<HR>
} Document_info_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		69,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
id

<Cpara>

Identifies the structure. Should be <F89>ID_Document<F0>.

<CtitleCns>

flags

<Cpara>

Each bitfield represents a Yes/No field in the Printer property sheet. 

<Cpara>

<F25>header_page <F0>determines whether a header page prints after 
the document is printed. The header page contains such information 
as who printed the document and when. 

<Cpara>

<F25>double_sided <F0>determines whether the document prints on one 
side of the paper or on both sides.

<Cpara>

<F25>manual_feed <F0>determines whether the paper is fed into the 
printer automatically or manually.

<Cpara>

<F25>print_rev <F0>determines whether revision bars are printed.

<Cpara>

<F25>print_strikes <F0>determines whether<F25> <F0>strikethrough lines 
are printed.

<Cpara>

<F25>print_underlines <F0>determines whether underlines are printed.

<Cpara>

<F25>underline_at_descender <F0>determines whether underlines are 
drawn at the descender or at the baseline of the text.

<Cpara>

<F25>orient_inverted <F0>determines whether pages will be printed 
in the same orientation as they are displayed. If true, a landscape 
display will print as a portrait.

<CtitleCns>

<|,70>final_output_dev

<Cpara>

Type of output device ("cx" or "ps").

<CtitleCns>

def_printer

<Cpara>

The specific device to which your document is sent; you specify a 
device such as "nearest cx" or the name of the device, such as "bones" 
or "sherlock."

<CtitleCns>

measure_unit

<Cpara>

The display unit for numerical values. It controls whether TPS shows 
e.g., <#7f>1 inch" or <#7f>2.54 cm" on a property-sheet. This field 
does not affect the basis of <F25>Rsu<F0>'s within AR, nor does it 
affect the unit of measure that AR uses in its own output. AR always 
writes its measures in inches.

<CtitleCns>

A_pg_style

<Cpara>

The numbering style for A-pages (revision pages).

<CtitleCns>

A_pg_prefix

<Cpara>

The A-page prefix. You can use a decimal point, for example, to get 
5.1. Or you can specify a word such as <F26>(insert)<F0> to get 5(insert)1.

<CtitleCns>

max_page

<Cpara>

The threshold beyond which the system will generate A-pages. For example, 
if the <F25>max_page<F0> field is set to 5, then any page after 5 
will be numbered 5a, 5b, 5c, etc., depending upon <F25>A_Pg_style <F0>and 
<F25>A_pg_prefix<F0>.

<CtitleCns>

spot_color_sep

<Cpara>

How pages are printed for color separation.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F25>spot_color_sep_
OFF <F0>prints each color on a single page.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F25>spot_color_sep_
SOLID <F0>prints each color on a separate page.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F25>spot_color_sep_
SCREENED <F0>prints each hue on the same page, different hues on separate 
pages.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		70,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F25>Document_info_t<F0> object contains the properties expressed 
in the <<!Document> declaration of the ASCII Markup. The values in 
the <F25>flags<F0> field are C bitfields and are accessed as (e.g.) <F25>flags.
header_page<F0>.

<Cpara>

<CtitleB>

<|,71>Font_info_t

<Cstuff>

# define face_UNKNOWN<HR>
# define face_PLAIN<HR>
# define face_BOLD<HR>
# define face_ITALIC<HR>
# define face_BOLD_ITALIC

<Cstuff>

typedef short Font_face_t;

<Cstuff>

typedef struct font_info_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>short<Tab><Tab><Tab>font_token;<HR>
<Tab>shar<Tab><Tab><Tab>font_name[AR_MAX_WORD];<HR>
<Tab>short<Tab><Tab><Tab>font_size;<HR>
<Tab>Font_face_t<Tab><Tab>font_face;<HR>
} Font_info_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		71,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Contains the <F25>id<F0> field as well as the linking pointers to 
other <F25>font_info_t<F0> structures (the other font definitions). 
The <F25>id<F0> field should be <F25>ID_Font<F0>.

<CtitleCns>

font_token

<Cpara>

A number greater than zero for referencing this font definition in 
the document.

<CtitleCns>

font_name

<Cpara>

A non-quoted string defining the font family (Thames, Swiss, Classic, 
etc).

<CtitleCns>

font_size

<Cpara>

Point size of the font (i.e., 6, 8, 10, 12, 14, etc).

<CtitleCns>

font_face

<Cpara>

Appearance of the font (i.e., bold, italic, bold-italic, plain). Use 
the constants defined above.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		71,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
Given the markup, <F26>F61 = Thames 12 Bold Italic,<F0> the <F25>font_token
<F0> field would have value 61. In the text of the document, the markup 
<<F61> will render text in font Thames, 12 point size, and in both 
bold and italic. 

<note:caution>

<"|:note:caution", Subcomponent = yes><F0>
<Frame,
	Name =			note:caution,
	Placement =		At Anchor,
	Width =			0.73 inches,
	Height =		0.10 inches,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,7,0
   (g9,2,0
     (g9,2,0
       (v6,2,0,0,0.047423,0.706667,0.047423,7,0,4,0)
       (v6,3,0,0.706667,0.047423,0.706667,0.005911,7,0,4,0)
       (v6,4,0,0.706667,0.005911,0,0.005911,7,0,4,0)
       (v6,5,0,0,0.005911,0,0.047423,7,0,4,0))))
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
<Tab><F26>Caution:<F0><Tab><End Sub><F0>Note that it is <F27>not<F0> 
correct to quote a font name. Even though in another context Interleaf 
ASCII markup would require quotes for a name like <#7f>New York", 
that is not the case here. This is a historical anomaly.

<CtitleB>

<|,72>Color_info_t

<Cstuff>

typedef struct color_desc_t<HR>
{<HR>
<Tab>float<Tab><Tab><Tab>r, g, b;<HR>
} Color_desc_t;

<Cstuff>

typedef struct color_t<HR>
{<HR>
<Tab>shar<Tab><Tab><Tab>type;<HR>
<Tab>short<Tab><Tab><Tab>index;<HR>
<Tab>Color_desc_t<Tab>desc;<HR>
} Color_t;

<Cstuff>

typedef struct color_info_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>Color_t<Tab><Tab><Tab>color;<HR>
} Color_info_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		72,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_nullObjFields

<Cpara>

Links color descriptions. The <F25>id<F0> field is <F25>ID_Color<F0>.

<CtitleCns>

color

<Cpara>

Complete color description, reference number, and type. 

<Cpara>

<F25>r, g, b<F89> <F0>refer to the percentages of red, green, and 
blue in the color.

<Cpara>

<F25>type<F0>, "C" or "c." An entry with type "C" is displayed on 
the color palette editor in TPS. Those with type "c" are not displayed 
but can still be referenced.

<Cpara>

<F25>index <F0>A value between 0 and 255 that is used as the reference 
number within the document body.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		72,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
In TPS, a color is a set of three floating-point values, representing 
percentages of red, green, and blue in a standard RGB color model.

<para>

A document may define as many as 256 distinct colors. If a document 
uses only the standard TPS color palette, TPS will not put a color 
declaration into the Interleaf ASCII markup file. Such a document 
may still refer to colors in its body-text, using an index into the 
standard color palette.

<para>

The standard color palette is described in the <F26>TPS Release 4 
File Formats<F0> reference manual in the discussion of color definitions.

<CtitleB>

<|,73><Autonum, markers, 1, Tagname = patterns>Pattern_info_t

<Cstuff>

typedef struct pattern_t<HR>
{<HR>
<Tab>shar<Tab><Tab><Tab>type;<HR>
<Tab>short<Tab><Tab><Tab>index;<HR>
<Tab>unsigned short<Tab>pattern[AR_PATTERN_SIZE];<HR>
} Pattern_t;

<Cstuff>

typedef struct pattern_info_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>Pattern_t<Tab><Tab>pattern;<HR>
} Pattern_info_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		73,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Links pattern definitions together. The <F25>id<F0> field is <F25>ID_Pattern
<F0>.

<CtitleCns>

pattern

<Cpara>

The pattern definition.

<Cpara>

<F25>type<F0>, "P" or "p." An entry with type "P" is displayed on 
the pattern editor in TPS. Those with type "p" is not displayed but 
can still be referenced.

<Cpara>

<F25>index <F0>A value between 0 and 255 that is used as the reference 
number within the document body.

<Cpara>

<F25>pattern <F0>The 16 pixel by 16 scan line pattern.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		73,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
Pattern definitions are similar to color definitions. The <F26>pattern<F0> 
field is a bitmap of the pattern, currently 16 by 16 pixels. 

<para>

A document may define as many as 256 distinct patterns. If a document 
uses only the standard TPS patterns, TPS will not put a pattern declaration 
into the Interleaf ASCII markup file. Such a document may still refer 
to patterns in its body-text, using an index into the standard patterns.

<para>

The standard patterns are described in the <F26>TPS Release 4 File 
Formats<F0> reference manual in the discussion of pattern definitions.

<CtitleB>

<|,74>The Page_info_t object

<Cstuff>

typedef struct page_flags_t<HR>
{<HR>
<Tab>unsigned<Tab><Tab>bleed<Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>hyphenation<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>bal_columns<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>vert_just<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>feathering<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>vert_just_pages<Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>frozen_autonums<Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>pgnum_absolute<Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>rev_bar_place<Tab>: 2;<HR>
<Tab>unsigned<Tab><Tab>page_parity<Tab><Tab>: 2;<HR>
<Tab>unsigned<Tab><Tab>turned_pages<Tab>: 2;<HR>
} Page_flags_t;

<Cstuff>

typedef struct page_info_t<HR>
{<HR>
<Tab>Identifier_t<Tab><Tab>id;<HR>
<Tab>Page_flags_t<Tab><Tab>flags;<HR>
<Tab>Unknown_t<Tab><Tab>*unkP;<HR>
<Tab>bool<Tab><Tab><Tab>micro_props_only;<HR>
<Tab>short<Tab><Tab><Tab>columns;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>gutter;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>height;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>width;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>top_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>bottom_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>left_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>right_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>inner_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>outer_margin;<HR>
<Tab>Direction_t<Tab><Tab>first_page;<HR>
<Tab>short<Tab><Tab><Tab>l_r_margins;<HR>
<Tab>short<Tab><Tab><Tab>start_page_num;<HR>
<Tab>shar<Tab><Tab><Tab>pgnum_prefix[AR_MAX_WORD];<HR>
<Tab>Num_style_t<Tab>pgnum_style;<HR>
<Tab>short<Tab><Tab><Tab>ladder_count;<HR>
<Tab>short<Tab><Tab><Tab>margin_stretch;<HR>
<Tab>short<Tab><Tab><Tab>margin_shrink;<HR>
<Tab>short<Tab><Tab><Tab>frame_margin_stretch;<HR>
<Tab>short<Tab><Tab><Tab>max_feathering;<HR>
<Tab>short<Tab><Tab><Tab>depth_pbreak;<HR>
<Tab>short<Tab><Tab><Tab>depth_no_pbreak;<HR>
} Page_info_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		74,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
id

<Cpara>

Structure identifier. Should be <F25>ID_Page<F0>.

<CtitleCns>

<|,75>flags

<Cpara>

Some page property values.

<Cpara>

<F25>bleed <F0>If YES, the header and footer frames expand to the 
full width of the page.

<Cpara>

<F25>hyphenation <F0>If YES, hyphenation is <F26>On<F0> for the entire 
document. This must be set to YES for the other hyphenation properties 
to be in effect.

<Cpara>

<F25>bal_columns <F0>If YES, TPS will try to balance the columns on 
a page. Otherwise, a column will only wrap to the next column when 
it hits the bottom margin.

<Cpara>

<F25>vert_just <F0>If YES, TPS will adjust vertical spacing by expanding 
or compressing the white space between components, lines, and frames. 
How TPS goes about justifying, and by what percentages, are determined 
by other flags.

<Cpara>

<F25>feathering<F0> If YES, TPS will adjust the space between lines 
in a component.

<Cpara>

<F25>vert_just_pages <F0>If YES, TPS will try to balance the depth 
of text on the pages.

<Cpara>

<F25>frozen_autonums <F0>If YES, the value of autonumbers will not 
change when tokens are added to or removed from the stream.

<Cpara>

<F25>pgnum_absolute <F0>If NO, the page number will be inherited. 
If YES, <F25>start_page_num<F0> has the starting page number for this 
document.

<Cpara>

<F25>rev_bar_place <F0>determines the placement of revision bars.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>REV_BAR_DEFAULT 
sets revision bar placement to automatic. Behavior depends on page 
layout.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>REV_BAR_LEFT 
places revision bars in the left margin of the page.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>REV_BAR_RIGHT 
places revision bars in the right margin.

<Cpara>

<F25>page_parity <F0>determines whether the first page will be even- 
or odd-numbered. This is meaningful only for double-sided documents. 
This is the <F26>begin with<F0> property on the Page property sheet.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>PG_PARITY_DEFAUL
T sets the page number to be either odd or even depending upon preceding 
pages in the book.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>PG_PARITY_EVEN 
sets the page number to be even.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>PG_PARITY_ODD 
sets the page number to be odd.

<Cpara>

<F25>turned_pages <F0>rotates the contents of a page between headers 
and footers. The headers and footers maintain their orientation. Pages 
rotated clockwise have the header on the right margin of the page.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>TURNED_0 
does nothing

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>TURNED_90 
rotates the page clockwise.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>TURNED_270 
rotates the page counterclockwise.

<CtitleCns>

micro_props_only

<Cpara>

Set to YES if this is a microdocument. Not all fields in the page 
object are meaningful in a microdocument. The following objects are 
not allowed: <F25>vert_just, frame_margin_stretch, depth_pbreak, depth_no_pbrea
k, first_page, page_parity, pgnum_prefix, pgnum_style, bleed, pgnum_absolute
<F0>.

<CtitleCns>

columns

<Cpara>

The number of columns on a page (i.e., 1, 2, 3).

<CtitleCns>

<|,76>gutter

<Cpara>

The amount of white space between columns in a multicolumn document. 
This must be a positive number.

<CtitleCns>

height

<Cpara>

The length of the page (the paper, if you are printing). Letter size 
is generally 11 inches high by 8.5 inches wide.

<CtitleCns>

width

<Cpara>

The width of the paper.

<CtitleCns>

top_margin

<Cpara>

Distance from top of page to the top of the first component or table.

<CtitleCns>

bottom_margin

<Cpara>

Distance from the bottom of the last component or table to end of 
page.

<CtitleCns>

left_margin

<Cpara>

Distance from left edge of page to left-most end of text.

<CtitleCns>

right_margin

<Cpara>

Distance from right-most end of text to right edge of page.

<CtitleCns>

inner_margin

<Cpara>

On a double sided document, the distance between the inner-most edge 
of text and the edge of the page.

<CtitleCns>

outer_margin

<Cpara>

On a double sided document, the distance between the outer-most edge 
of text and the edge of the page.

<CtitleCns>

first_page

<Cpara>

In a double sided document, if <F25>d_LEFT<F0> is set, the first page 
begins on the left-hand side of the binding. If <F25>d_RIGHT <F0>is 
set, the first page begins on the right-hand side.

<CtitleCns>

l_r_margins

<Cpara>

If YES, the <F25>left_margin<F0> and <F25>right_margin<F0> values 
are used for a double-sided document, instead of the <F25>inner_margin <F0>and 
<F25>outer_margin <F0>values.

<CtitleCns>

start_page_num

<Cpara>

If <F25>pgnum_absolute <F0>is set, then this field contains the starting 
page number.

<CtitleCns>

<|,77>pgnum_prefix

<Cpara>

The prefix that will be displayed where page numbers are referenced 
(through the page number token).

<CtitleCns>

pgnum_style

<Cpara>

The style in which the page number will be displayed. The options 
are: Arabic, Lowercase Roman, Uppercase Roman, Lowercase Alpha, and 
Uppercase Alpha. These are represented by the following tokens: <F25>tok_ARABIC
, tok_LOWROMAN, tok_UPROMAN, tok_LOWALPHA, <F0>and <F25>tok_UPALPHA<F0>.

<CtitleCns>

ladder_count

<Cpara>

The maximum number of consecutive lines broken by hyphens (the <F26>Consecutive 
Hyphens <F0>property). Either <F25>AR_HYPHEN_ANY<F0> or a number between 
one and four inclusive.

<CtitleCns>

margin_stretch

<Cpara>

Determines how much TPS can stretch margins to achieve column and 
page justification. The default is 200%. Specify this value as an 
integer (i.e., 200% is 200).

<CtitleCns>

margin_shrink

<Cpara>

Determine how much TPS can shrink margins to achieve column and page 
justification. Specify this value an an integer (i.e., 50% is 50).

<CtitleCns>

frame_margin_stretch

<Cpara>

The percentage of the height of the frame by which TPS can increase 
the margin around a frame to achieve vertical justification.

<CtitleCns>

max_feathering

<Cpara>

The percentage by which TPS can increase space between lines to achieve 
vertical justification. 

<CtitleCns>

depth_pbreak

<Cpara>

This field specifies the percentage of a page ended by a forced page 
break that must be filled before TPS will attempt vertical justification.

<CtitleCns>

depth_no_pbreak

<Cpara>

This field specifies the percentage of the last page of a document 
that must be full before TPS will attempt vertical justification.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		77,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A document has a single <F26>Page<F0> declaration that sets basic 
properties of the document such as its width and height. A <F26>microdocument
<F0>, or rectangle of text contained within a frame, uses a page declaration 
to establish its properties within that smaller context. The boolean <F25>micro
_props_only<F0> is <F25>YES<F0> when the structure is used in a microdocument.

<Cpara>

<|,78>Any properties that are not recognized in this level of the 
markup language are strung together on a linked list of <F25>Unknown_t<F0> 
objects, with the head of the list in <F25>unkP<F0>. They will have <F25>ID_Unk
nownProp<F0> in their <F25>id<F0> fields. The text for each will be 
the string of characters from the unrecognized keyword to the last 
character prior to the delimiter of the property statement.

<CtitleB>

<|,79>An_stream_info_t

<Cstuff>

typedef struct an_level_t<HR>
{<HR>
<Tab>Num_style_t<Tab>an_symbol;<HR>
<Tab>shar<Tab><Tab><Tab>an_prefix[AR_MAX_ANFIX];<HR>
<Tab>shar<Tab><Tab><Tab>an_suffix[AR_MAX_ANFIX];<HR>
<Tab>short<Tab><Tab><Tab>start_value;<HR>
<Tab>bool<Tab><Tab><Tab>an_last_only;<HR>
<Tab>bool<Tab><Tab><Tab>an_show;<HR>
} An_level_t;

<Cstuff>

typedef struct an_stream_info_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>shar<Tab><Tab><Tab>*an_name;<HR>
<Tab>short<Tab><Tab><Tab>an_levels;<HR>
<Tab>An_level_t<Tab><Tab>an_level_info[AR_MAX_ANLEVELS];<HR>
} An_stream_info_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		79,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Links autonumber stream definitions together. The <F25>id<F0> field 
should be <F25>ID_AutoStream<F0>.

<CtitleCns>

an_name

<Cpara>

Name of the autonumber stream. Specify this value as a <F25>shring<F0>.

<CtitleCns>

an_levels

<Cpara>

A stream can have a fixed number of levels. Specify the number (between 
1 and 8).

<CtitleCns>

an_level_info

<Cpara>

Each level has different properties.

<Cpara>

<F25>an_symbol<F0> specifies number style: Arabic, Upper Roman, Lower 
Roman, Upper Alpha, and Lower Alpha. These are represented by the 
following tokens: <F25>tok_ARABIC, tok_LOWROMAN, tok_UPROMAN, tok_LOWALPHA, 
<F0>and <F25>tok_UPALPHA<F0>.

<Cpara>

<F25>an_prefix<F0> specifies the string that precedes the display 
of the number.

<Cpara>

<F25>an_suffix<F0> specifies the string that is displayed after the 
number.

<Cpara>

<F25>start_value<F0> specifies the initial value for the string. The 
value 1 is generally used, but isn't required.

<Cpara>

<F25>an_last_only<F0> can be YES or NO. If YES, only the last number 
at a given level will display. For example, if <F25>an_last_only <F0>is 
YES, then <F26>1.2.3 <F0>would display as <F26>3.

<Cpara>

<F25>an_show<F0>  can be YES or NO. If YES, the token will display. 
If NO, tokens from this stream at this level will be invisible.

<CtitleCdesc>

<|,80>
<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		80,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A document may have any number of autonumber streams. The streams 
are defined and linked together by the <F25>An_stream_info_t<F0> data 
structure. Each stream has a name and an established number of levels 
(1 - 8), and then information about the properties of each level. 
The fields within an <F25>An_level_t<F0> closely follow the markup 
and the properties visible within TPS.

<titleA,
	Begin New Page =		yes>

<|,81>Structure for Text

<rule:Adot>

<Tab.>

<paraAT>

This section describes the markup for components (text), their masters, 
and the tokens found within them. Included are font references, font 
attributes, and other structures used in the definition of component 
masters and instances.

<CtitleB>

<|,82>Autonum_t

<Cstuff>

typedef struct autonum_t<HR>
{<HR>
<Tab>bool<Tab><Tab><Tab>first;<HR>
<Tab>bool<Tab><Tab><Tab>restart;<HR>
<Tab>short<Tab><Tab><Tab>level;<HR>
<Tab>shar<Tab><Tab><Tab>name [AR_MAX_ANTAGSIZE];<HR>
<Tab>shar<Tab><Tab><Tab>tag [AR_MAX_ANTAGSIZE];<HR>
<Tab>shar<Tab><Tab><Tab>value[AR_MAX_ANVALUESIZE];<HR>
} Autonum_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		82,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
first

<Cpara>

YES or NO. If YES, this is the first token in a stream.

<CtitleCns>

restart

<Cpara>

YES or NO. If YES, and at level one, restart the numbering for this 
stream with this token.

<CtitleCns>

level

<Cpara>

Determines the level in the autonumber stream.

<CtitleCns>

name

<Cpara>

The name of the autonumber stream from which the number is drawn.

<CtitleCns>

tag

<Cpara>

A tagname that can be referenced by an autoreference token. The autoreference 
token will take on the value of this autonumber token.

<CtitleCns>

value

<Cpara>

The current value of the autonumber token.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		82,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This structure will be found embedded in the body of text components. 
It references an Autonumber Stream and produces a number at the indicated 
location. The value displayed is a function of the values of previous 
Autonumber tokens.

<CtitleB>

<|,83>Font_value_t

<Cstuff>

typedef struct font_inherit_t<HR>
{<HR>
<Tab>unsigned size<Tab>: 2;<HR>
<Tab>unsigned fam<Tab>: 2;<HR>
<Tab>unsigned lang<Tab>: 2;<HR>
<Tab>unsigned bold<Tab>: 2;<HR>
<Tab>unsigned ital<Tab>: 2;<HR>
<Tab>unsigned str<Tab><Tab>: 2;<HR>
<Tab>unsigned und<Tab>: 2;<HR>
<Tab>unsigned rev<Tab>: 2;<HR>
<Tab>unsigned sup<Tab>: 2;<HR>
<Tab>unsigned sub<Tab>: 2;<HR>
<Tab>unsigned kpr<Tab>: 2;<HR>
<Tab>unsigned trk<Tab><Tab>: 2;<HR>
<Tab>unsigned cap<Tab>: 2;<HR>
<Tab>unsigned clr<Tab><Tab>: 2;<HR>
<Tab>unsigned ovr<Tab>: 2;<HR>
} Font_inherit_t;

<Cstuff>

typedef struct font_attr_t<HR>
{<HR>
<Tab>unsigned str<Tab><Tab>: 1;<HR>
<Tab>unsigned und<Tab>: 1;<HR>
<Tab>unsigned lang<Tab>: 4;<HR>
<Tab>unsigned rev<Tab>: 1;<HR>
<Tab>unsigned sub<Tab>: 1;<HR>
<Tab>unsigned sup<Tab>: 1;<HR>
<Tab>unsigned kpr<Tab>: 1;<HR>
<Tab>unsigned trk<Tab><Tab>: 3;<HR>
<Tab>unsigned dbl<Tab>: 1;<HR>
<Tab>unsigned ovr<Tab>: 1;<HR>
<Tab>unsigned clr<Tab><Tab>: 8;<HR>
<Tab>unsigned cap<Tab>: 2;<HR>
} Font_attr_t;

<Cstuff>

typedef struct font_value_t<HR>
{<HR>
<Tab>short<Tab><Tab><Tab>font_token;<HR>
<Tab>Font_inherit_t<Tab>font_inherit;<HR>
<Tab>Font_attr_t<Tab><Tab>font_attr;<HR>
} Font_value_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		83,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
font_token

<Cpara>

Reference number of the font.

<CtitleCns>

font_inherit

<Cpara>

The font specified for a subcomponent can inherit attributes from 
the surrounding component. This field dictates what will be inherited 
and how it will be inherited. 
<|,84>All the fields are described in the table at the end of this 
section. Each field can take one of the following values.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fn_INHERIT_NONE. 
No inheritance.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fn_INHERIT_LESS. 
For attributes with a progression of choices, pick the next smaller 
value from that of the parent.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fn_INHERIT_MORE. 
For attributes with a progression of choices, pick the next larger 
value from that of the parent.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fn_INHERIT_TOGGL
E. For attributes with only two choices, pick the opposite of the 
parent's selection.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fn_INHERIT_DIREC
T. Copy the parent's value.

<Cpara>

Note that the concepts <#7f>more" (<#7f>or less") and <#7f>toggle" 
are never both meaningful for an attribute. For example, there is 
no <#7f>more" for strike-through; it is either on or off, and its 
setting can be toggled. On the other hand, there is a progression 
for size, or for underlining. The underlining progression is from 
no underlining to single underlining to double underlining, and <#7f>more" 
and <#7f>less" can be applied to the current setting of that attribute.

<CtitleCns>

font_attr

<Cpara>

This field describes attributes of the font such as strike-through 
and pair-kerning. The fields that are only 1 bit take <F25>YES<F0> 
and <F25>NO<F0> values. The <F25>lang<F0> field represents the 13 
languages supported by TPS plus the no-language setting. The <F25>trk<F0> 
field represents the settings of track-kerning, and the <F25>cap<F0> 
field represents normal/all caps/small caps/caps & small. The table 
below shows the meaning of each field in the structure.

<Cpara>

<F25>lang <F0>can take the following values:<Autonum, markers, 1, Tagname = languages>

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_AM.<Tab>Ame
rican English

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_BR.<Tab>Bri
tish English

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_CA.<Tab>Can
adian French

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_DA.<Tab>Dan
ish

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_DU.<Tab>Dut
ch

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_FI.<Tab>Fin
nish

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_FR.<Tab>Fre
nch

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_GE.<Tab>Ger
man

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_IT.<Tab>Ita
lian

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_NL.<Tab>No 
language specified

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_NO.<Tab>Nor
wegian

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_PO.<Tab>Por
tuguese

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_SP.<Tab>Spa
nish

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_SW.<Tab>Swe
dish

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>lang_DEFAULT.<Tab>
American English

<Cpara>

<F25>trk<F0> can take the following values:

<listempty1>

<|,85><"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>trk_OFF.<Tab><Tab>
No track kerning.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>trk_MINTIGHT.<Tab>
Minimum tightness.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>trk_MEDTIGHT.<Tab>
Medium tightness.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>trk_MAXTIGHT.<Tab>
Maximum tightness.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>trk_MINLOOSE.<Tab>
Minimum looseness.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>trk_MEDLOOSE.<Tab>
Medium looseness.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>trk_MAXLOOSE.<Tab>
Maximum looseness.

<Cpara>

<F25>clr<F0> can take the following values:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>clr_BLACK.<Tab>B
lack text

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>Other 
colors from the color palette.

<Cpara>

<F25>cap <F0>can take the following values:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>cap_NORMAL<Tab>N
ormal text (no capitalization mapping)

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>cap_ALL<Tab><Tab>
All large capital letters

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>cap_LOWSMALL<Tab>
Mix of large and small capital letters

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>cap_ALLSMALL<Tab>
All small capital letters

<Table, 6x4,
	Columns =		4,
	Top Margin =		0.093 inches,
	Bottom Margin =		0.093 inches,
	Left Margin =		1.75 inches,
	Top Border Weight =	2,
	Bottom Border Weight =	2,
	Left Border Weight =	2,
	Right Border Weight =	2,
	Header Border Weight =	2,
	Footer Border Weight =	2,
	Column 1 Width =	0.957 inches,
	Column 2 Width =	1.536 inches,
	Column 3 Width =	0.957 inches,
	Column 4 Width =	1.551 inches>

<Master Row, "row">

<Cell><Cpara,
	Hidden =		yes,
	Left Margin =		0 inches>

<Cell,
	Left Ruling Visible =	no><Cpara,
	Hidden =		yes,
	Left Margin =		0 inches>

<Cell,
	Left Ruling Weight =	2><Cpara,
	Hidden =		yes,
	Left Margin =		0 inches>

<Cell,
	Left Ruling Visible =	no><Cpara,
	Hidden =		yes,
	Left Margin =		0 inches>

<Row, "row">
<Cell><Cpara,
	Left Margin =		0 inches>

str

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

strike-through

<Cell,
	Left Ruling Weight =	2><Cpara,
	Left Margin =		0 inches>

kpr

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

pair kerning

<Row, "row">
<Cell><Cpara,
	Left Margin =		0 inches>

und

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

underline

<Cell,
	Left Ruling Weight =	2><Cpara,
	Left Margin =		0 inches>

trk

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

track kerning

<Row, "row">
<Cell><Cpara,
	Left Margin =		0 inches>

lang

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

language

<Cell,
	Left Ruling Weight =	2><Cpara,
	Left Margin =		0 inches>

dbl

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

double-underline

<Row, "row">
<Cell><Cpara,
	Left Margin =		0 inches>

rev

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

revision bars

<Cell,
	Left Ruling Weight =	2><Cpara,
	Left Margin =		0 inches>

ovr

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

overbar

<Row, "row">
<Cell><Cpara,
	Left Margin =		0 inches>

sub

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

subscript

<Cell,
	Left Ruling Weight =	2><Cpara,
	Left Margin =		0 inches>

clr

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

color

<Row, "row">
<Cell><Cpara,
	Left Margin =		0 inches>

sup

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

superscript

<Cell,
	Left Ruling Weight =	2><Cpara,
	Left Margin =		0 inches>

cap

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

capitalization

<Row, "row">
<Cell><Cpara,
	Left Margin =		0 inches>

size

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

size

<Cell,
	Left Ruling Weight =	2><Cpara,
	Left Margin =		0 inches>

fam

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

font family

<Row, "row">
<Cell><Cpara,
	Left Margin =		0 inches>

bold

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

bold

<Cell,
	Left Ruling Weight =	2><Cpara,
	Left Margin =		0 inches>

ital

<Cell,
	Left Ruling Visible =	no><Cpara,
	Left Margin =		0 inches>

italics

<End Table>

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		85,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F25>Font_value_t<F0> is used in component masters, in component 
instances, and in text in the body of a component, that is, everywhere 
except in the font definitions list. It provides a uniform representation 
of font information. It holds all possible information about a font 
setting; the font token number, which refers back to an entry in the 
font definitions list, the settings for direct font attributes, and 
inheritance information for a font attribute.

<Cpara>

Not all this information is always relevant. For instance, a top-level 
component can not inherit any settings (its <F25>font_inherit<F0> 
field will have all members set to <F25>fn_INHERIT_NONE<F0>). 

<Cpara>

In Interleaf ASCII markup, it is legal to have redundant or contradictory 
markup in a font token. <F25><<F22@iU@U@~U><F0> seems to present conflicting 
information about the setting of the underline attribute. This markup 
is parsed from left to right, under a <#7f>last guy wins" rule. The 
net result is stored in the <F25>Font_inherit_t<F0> structure.

<CtitleB>

<|,86>Index_t

<Cstuff>

typedef struct index_t<HR>
{<HR>
<Tab>short<Tab><Tab><Tab>scope;<HR>
<Tab>short<Tab><Tab><Tab>count;<HR>
<Tab>short<Tab><Tab><Tab>typeface;<HR>
<Tab>short<Tab><Tab><Tab>dictionary<HR>
<Tab>shar<Tab><Tab><Tab>see_string[AR_MAX_IXSIZE];<HR>
<Tab>shar<Tab><Tab><Tab>to_named[AR_MAX_IXSIZE];<HR>
<Tab>shar<Tab><Tab><Tab>doc[AR_MAX_IXSIZE];<HR>
<Tab>shar<Tab><Tab><Tab>*sort_strings[AR_MAX_IXLEVELS];<HR>
<Tab>shar<Tab><Tab><Tab>*headings[AR_MAX_IXLEVELS];<HR>
} Index_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		86,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
scope

<Cpara>

Criterion limiting the range of pages cited in the index. Legal values 
are:

<Table, Cnv,
	Columns =		3,
	Left Margin =		1.75 inches,
	Top Border Visible =	no,
	Bottom Border Visible =	no,
	Left Border Visible =	no,
	Right Border Visible =	no,
	Header Border Visible =	no,
	Footer Border Visible =	no,
	Column 1 Width =	1.179 inches,
	Column 2 Width =	1.321 inches,
	Column 3 Width =	2.50 inches>

<Master Row, "row">

<Cell,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:A,
	Hidden =		yes>

<Cell,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:B,
	Hidden =		yes>

<Cell,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:D,
	Hidden =		yes>

<Row, "row">
<Cell, Straddle = 2,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:A,
	Alignment =		Left>

index_SCOPE_LINE

<Cpara>

<Cell,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:D,
	Alignment =		Left>

Cite the current page only. This is the default behavior.

<Row, "row">
<Cell, Straddle = 2,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:A,
	Alignment =		Left>

index_SCOPE_CMPN

<Cell,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:D,
	Alignment =		Left>

Cite pages through the end of this component.

<Row, "row">
<Cell, Straddle = 2,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:A,
	Alignment =		Left>

index_SCOPE_COUNT

<Cell,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:C,
	Alignment =		Left>

Cite pages through the specified number of components. The number 
is stored in <F25>count<F0>.

<Row, "row">
<Cell, Straddle = 2,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:A,
	Alignment =		Left>

index_SCOPE_NAMED_CMPN

<Cell,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:D,
	Alignment =		Left>

Cite pages until the component named in <F25>to_named<F0>.

<Row, "row">
<Cell, Straddle = 2,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:A,
	Alignment =		Left>

index_SCOPE_SEE_ALSO

<Cell,
	Top Ruling Visible =	no,
	Left Ruling Visible =	no><Cnv:C,
	Alignment =		Left>

Cross-reference. The cross-reference name is given in <F25>see_string<F0>.

<End Table>

<CtitleCns>

count

<Cpara>

The number of components to reference when the scope is <F26>index_SCOPE_COUNT
<F0>.

<CtitleCns>

typeface

<Cpara>

Determines how the reference will appear in the index:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>face_PLAIN<Tab>R
oman typeface.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>face_BOLD<Tab>Bo
ld typeface.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>face_ITALIC<Tab>
Italic typeface.

<CtitleCns>

dictionary

<Cpara>

The language dictionary for the index. Use any of the codes for a 
language specified on page <Ref, Page #, Page Value = 84, Tag = languages>.

<CtitleCns>

see_string

<Cpara>

Cross-reference name.

<CtitleCns>

<|,87>to_named

<Cpara>

The name of the component ending the reference when the <F25>scope<F0> 
is <F26>index_SCOPE_NAMED_CMPN<F0>.

<CtitleCns>

doc

<Cpara>

The name of the index containing this reference. 

<CtitleCns>

sort_strings

<Cpara>

The headings in sort order if different from word precedence (see <F26>Document 
Management Reference Volume 4<F0>). Within a set of index entries 
for a given level, the sort order determines how these words are sorted. 
To change the sort order, enter the heading with different letters, 
capitalization, and word spacing.

<CtitleCns>

headings

<Cpara>

The index entry headings in the order that they appear in the index 
property sheet.  This determines indentation in the final index.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		87,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
An <F25>Index_t<F0> object holds index token information. The information 
contained in these tokens is used to build the document's index.

<CtitleB>

<|,88>Ref_t

<Cstuff>

typedef struct lookuppair_t<HR>
{<HR>
<Tab>struct lookuppair_t<Tab>*nextP;<HR>
<Tab>shar*<Tab><Tab><Tab><Tab>nameP;<HR>
<Tab>shar*<Tab><Tab><Tab><Tab>stringP;<HR>
} LookupPair_t;

<Cstuff>

typedef struct ref_t<HR>
{<HR>
<Tab>long<Tab><Tab><Tab><Tab>frame_start;<HR>
<Tab>shar<Tab><Tab><Tab><Tab>tag[AR_MAX_REFTAGSIZE];<HR>
<Tab>shar<Tab><Tab><Tab><Tab>attribute[AR_MAX_REFTAGSIZE];<HR>
<Tab>shar<Tab><Tab><Tab><Tab>result[AR_MAX_REFTAGSIZE];<HR>
<Tab>shar<Tab><Tab><Tab><Tab>value[AR_MAX_REFTAGSIZE];<HR>
<Tab>short<Tab><Tab><Tab><Tab>range;<HR>
<Tab>short<Tab><Tab><Tab><Tab>operation;<HR>
<Tab>short<Tab><Tab><Tab><Tab>type;<HR>
<Tab>LookupPair_t<Tab><Tab>*pairsP;<HR>
} Ref_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		88,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
frame_start

<Cpara>

When <F25>type <F0>is ref_CUR_FRAME or ref_TOTAL_FRAME, this field 
specifies the starting number for counting pages of multi-page tables 
(for references like  <F26>Sheet 2 of 10)<F0>. Generally, set this 
value to one.

<CtitleCns>

tag

<Cpara>

When <F25>type <F0>is ref_ANUM_NUM<F26> <F0>or ref_ANUM_PAGE, this 
field specifies the tagname from the referenced <F26>Autonum<F0> token.

<CtitleCns>

attribute

<Cpara>

When <F25>type <F0>is ref_ATTR_VALUE, this field specifies the referenced 
attribute (see Effectivity Control in the <F26>Interleaf Reference 
Manuals<F0>).

<CtitleCns>

result

<Cpara>

When <F25>type <F0>is ref_ATTR_VALUE, this field specifies the result 
of the attribute reference - the value that will appear in the token. 
This field should be considered<F24@A> read-only <F0>by users of the <F25>ASCII 
Reader<F0>, since changes to its value will be ignored by TPS.

<CtitleCns>

value

<Cpara>

When <F25>type <F0>is ref_CUR_PAGE_PLAIN<F26> <F0>or ref_CUR_PAGE_BLANK 
or ref_ANUM_NUM<F26> <F0>or ref_ANUM_PAGE, and the referenced autonumber 
stream has been frozen, the auto-reference takes this value.

<CtitleCns>

range

<Cpara,
	Allow Page Break After = no>

When <F25>type <F0>is ref_ATTR_VALUE, this field specifies the range 
searched for attribute values. The possible values are:

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>attr_RANGE_PAGE<Tab>
Search the current page.

<exp_list>

<|,89><"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>attr_RANGE_S
HEET<Tab>Search both sides of a double sided page.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>attr_RANGE_CMPN<Tab>
Search just the current component.

<CtitleCns>

operation

<Cpara>

When <F25>type <F0>is <F26>ref_ATTR_VALUE<F0>, this field specifies 
the operation to perform on the attribute values found in the specified 
range. The operation determines which value for an attribute is displayed. 
The valid options are:

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>attr_OPER_MAX<Tab>
Pick the maximum value.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>attr_OPER_MIN<Tab>
Pick the minimum value.

<CtitleCns>

type

<Cpara>

The type of reference:

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ref_CUR_PAGE_PLAIN<Tab>
Reference the current page number.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ref_CUR_PAGE_BLANK<Tab>
Reference the number of the following blank page.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ref_ANUM_NUM<Tab>R
eference the value of an autonumber.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ref_ANUM_PAGE<Tab>
Reference the page that an autonumber is on.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ref_ATTR_VALUE<Tab>
Reference an attribute value.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ref_CUR_FRAME<Tab>
Reference the current page of a range of table pages.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ref_TOTAL_FRAME<Tab>
Reference the total number of pages in a table.

<CtitleCns>

pairsP

<Cpara>

A list of pairs of strings associated with the attribute. The value 
printed for an attribute match may be different than the value itself. 
This field specifies the alternate printing values.

<Cpara>

<F25>nextP<F0> The next value set.

<Cpara>

<F25>nameP<F0> The attribute value.

<Cpara>

<F25>stringP <F0>The printing value.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		89,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
References can be made to attributes, autonumber tokens, blank pages, 
and tables. A given field in the <F25>Ref_t<F0> structure may be used 
for one kind of reference and not for another. The <F25>type<F0> field 
indicates the use of any particular <F25>Ref_t<F0> variable.

<CtitleB>

<|,90>Attr_t

<Cstuff>

typedef struct attr_t<HR>
{<HR>
<Tab>struct attr_t<Tab><Tab>*nextP;<HR>
<Tab>shar*<Tab><Tab><Tab>nameP;<HR>
<Tab>shar*<Tab><Tab><Tab>stringP;<HR>
} Attr_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		90,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
nextP

<Cpara>

Attributes come in lists. This field points to the next one.

<CtitleCns>

nameP

<Cpara>

The attribute name.

<CtitleCns>

stringP

<Cpara>

One of the attribute's values.

<CtitleCdesc>

<F92>
<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		90,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
<F0>The <F25>Attr_t<F0> object is a basic element in the representation 
of effectivity attributes within Interleaf ASCII markup. Because the <F25>ASCII 
Reader<F0> does not apply semantic information to its input, this 
data structure is very simple. It merely holds the name and a value 
string.

<CtitleCdesc>

A client is free to create or modify these <F25>Attr_t<F0> objects, 
and it may be useful to create a series of them, reflecting some information 
that the client has. But AR has no access to the control expression 
of a document, because the control expression is kept in the TPS desktop 
and not in the document itself. A client cannot fully manipulate the 
TPS effectivity system from within AR.

<CtitleB>

<|,91>Cmpn_profile_t

<Cstuff>

typedef struct cmpn_profile_t<HR>
{<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>start_line;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>line_count;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>place;<HR>
<Tab>Direction_t<Tab><Tab><Tab><Tab>side;<HR>
<Tab>struct cmpn_profile_t<Tab>*nextP;<HR>
} Cmpn_profile_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		91,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
start_line

<Cpara>

The line of the component at which this profile takes effect.

<CtitleCns>

line_count

<Cpara>

The number of lines over which the profile has effect.

<CtitleCns>

place

<Cpara>

The additional distance between text and margin for the indicated 
lines.

<CtitleCns>

side

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>d_LEFT<Tab>Add 
space on left side of text.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>d_RIGHT<Tab>Add 
space on right side of text.

<CtitleCns>

nextP

<Cpara>

The next profile information structure.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		91,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A <F25>Cmpn_profile_t<F0> is a data structure that holds shaping information 
for a component, as set by the Misc->Shape command of TPS. The profile 
entries, if present, are on a linked list in the order that they occur 
in the Interleaf ASCII markup document. Each entry holds the text 
line number where that profile takes effect, the number of lines of 
its duration, and the indentation in <F25>Rsu<F0>'s. Each <F25>Cmpn_profile_t
<F0> can be for either a left or a right profile, depending on the 
setting of the <F25>side<F0> field.

<CtitleB>

<|,92>Tabline_t

<Cstuff>

typedef struct tabentry_t<HR>
{<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>stop;<HR>
<Tab>Tab_type_t<Tab><Tab><Tab><Tab>type;<HR>
} Tabentry_t;

<Cstuff>

typedef struct tabline_t<HR>
{<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>num_stops;<HR>
<Tab>Tabentry_t<Tab><Tab><Tab><Tab>entries[AR_MAX_TABS];<HR>
} Tabline_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		92,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
num_stops

<Cpara>

The number of tab stops. A component may have from 0 to AR_MAX_TABS<F25> <F0>di
stinct tab stops.

<CtitleCns>

entries

<Cpara>

Information on each tab stop.

<Cpara>

<F25>stop <F0>distance from the left margin to the tab stop.

<Cpara>

<F25>type <F0>of tab: Left, Right, Center, Decimal, or Decimal-comma. 
These are represented with the following constants:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tab_LEFT

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tab_RIGHT

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tab_CENTER

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tab_DECIMAL

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tab_DECIMAL_COMM
A

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		92,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F25>Tabline_t<F0> structure holds the set of definitions of a 
component's tab stops.

<CtitleB>

<|,93>Cmpn_t

<Cstuff>

typedef struct cmpn_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>shar<Tab><Tab><Tab><Tab><Tab>cmpn_name[AR_MAX_CMPNNAME];<HR>
<Tab>Attr_t<Tab><Tab><Tab><Tab><Tab>*attrvalsP;    /* cmpn's attribute 
values */<HR>
<Tab>Content_type_t<Tab><Tab><Tab>content_type;<HR>
<Tab>Ssave_t<Tab><Tab><Tab><Tab><Tab>body;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>hidden;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>subcmpn;<HR>
<Tab>Font_value_t<Tab><Tab><Tab>font_value;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>top_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>bottom_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>left_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>right_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>first_indent;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>line_spacing;   /* value X 1000 
*/<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>indent_count;   /* indent line 
count */<HR>
<Tab>Tabline_t<Tab><Tab><Tab><Tab>tabs;     /* tab line structure 
*/<HR>
<Tab>Direction_t<Tab><Tab><Tab><Tab>alignment;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>att_prior;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>pbreak_within;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>att_next;<HR>
<Tab>fill_t<Tab><Tab><Tab><Tab><Tab>fill;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>new_page;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>new_column;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>widow_ctrl;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>orphan_ctrl;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>straddle;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>an_level;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>kern_space;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>word_spacing;<HR>
<Tab>float<Tab><Tab><Tab><Tab><Tab>word_sp_max;<HR>
<Tab>float<Tab><Tab><Tab><Tab><Tab>word_sp_min;<HR>
<Tab>float<Tab><Tab><Tab><Tab><Tab>word_sp_nom;<HR>
<Tab>bool<Tab><Tab><Tab><Tab><Tab>letter_spacing;<HR>
<Tab>float<Tab><Tab><Tab><Tab><Tab>letter_sp_max;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>composition;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>hyphenation; /* Hyphenation threshold 
*/<HR>
<Tab>Cmpn_profile_t<Tab><Tab><Tab>*profileP;<HR>
<Tab>shar<Tab><Tab><Tab><Tab><Tab>toc_name[AR_MAX_TOCNAME];<HR>
} Cmpn_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		93,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Links components together. The <F25>id<F0> field is <F25>ID_Cmpn<F0> 
for component instances and <F25>ID_MasterCmpn<F0> for component masters.

<CtitleCns>

cmpn_name

<Cpara>

Name of the component. Each component instance name must match a component 
master name.

<CtitleCns>

<|,94>attrvalsP

<Cpara>

List of effectivity attributes for this component.

<CtitleCns>

content_type

<Cpara>

A component can be one of four types depending on how the contents 
are treated.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tok_BUF_PRIVATE<Tab>
Contents are private to this instance.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tok_BUF_PREFIX<Tab>
All components of this name share the same prefix.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tok_BUF_SHARED<Tab>
All components of this name share the same contents.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>tok_BUF_PREFIX_SHA
RED<Tab>All components of this name share the same prefix and contents.

<Cpara>

Note that shared content can be found in the master component. Prefix 
information is in a shared, inline component (subcomponent). This 
component is the first token in the parent component's body.

<CtitleCns>

body

<Cpara>

The text of the component, including tokens. Use the <F25>shring<F0> 
functions to access this field.

<CtitleCns>

hidden

<Cpara>

This is a <F24@A>read-only<F0> field that holds the result of applying 
the effectivity control string to the effectivity attributes. YES 
means that this component is hidden when the document is displayed.

<CtitleCns>

subcmpn

<Cpara>

YES means that this is an inline (sub-) component. Not all fields 
in the <F25>Cmpn_t<F0> structure have meaning when this field is set 
to YES.

<CtitleCns>

font_value

<Cpara>

The default font characteristics for this component. If this is an 
inline component, the font can inherit properties from parent component's 
default font.

<CtitleCns>

top_margin

<Cpara>

Space between top of text and top of component. Measured in <F25>Rsu<F0>'s.

<CtitleCns>

bottom_margin

<Cpara>

Space between bottom of text and bottom of component.

<CtitleCns>

left_margin

<Cpara>

Space between left side of text and left page margin.

<CtitleCns>

right_margin

<Cpara>

Space between right side of text and right page margin.

<CtitleCns>

<|,95>first_indent

<Cpara>

Indentation of the first line(s) of the component.

<CtitleCns>

line_spacing

<Cpara>

Space between lines within the component. The <F25>line_spacing<F0> 
field is expressed in <F25>Rsu<F0>'s, but is scaled in an unusual 
way. It is multiplied by AR_LINE_SCALING (1000), to provide three 
significant digits in the value while keeping it an integer.

<CtitleCns>

indent_count

<Cpara>

Number of lines indented by the amount in <F25>first_indent<F0>.

<CtitleCns>

tabs

<Cpara>

Description of the tab stops for this component.

<CtitleCns>

alignment

<Cpara>

How lines should be aligned on the page.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>d_LEFT<Tab><Tab>
Left justify.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>d_RIGHT<Tab><Tab>
Right justify.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>d_CENTER<Tab>Cen
ter.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>d_BOTH<Tab><Tab>
Left and right justify.

<CtitleCns>

att_prior

<Cpara>

Reserved for future use.

<CtitleCns>

pbreak_within

<Cpara>

YES allows a page break within the component.

<CtitleCns>

att_next

<Cpara>

YES allows a page break after the component.

<CtitleCns>

fill

<Cpara>

Determines how TPS treats newline characters in the ASCII markup:

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fill_OFF<Tab>Each 
newline character is replaced by a hard return (no filling).

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fill_BLANK<Tab>Eac
h newline character that doesn't end a component and that doesn't 
follow a blank is replaced with a blank. This insures that lines won't 
run together when filled.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fill_ON<Tab>Text 
is filled. Newline characters are ignored.

<CtitleCns>

<|,96>new_page

<Cpara>

YES starts a new page for this component.

<CtitleCns>

new_column

<Cpara>

YES starts a new column in a multicolumn documents.

<CtitleCns>

widow_ctrl

<Cpara>

Widow control. The minimum number of lines that must exist in this 
component prior to a page or column break. A number between 1 and 
16.

<CtitleCns>

orphan_ctrl

<Cpara>

Orphan control. The minimum number of lines that must exist in this 
component after a page break. A number between 1 and 16.

<CtitleCns>

straddle

<Cpara>

In a multicolumn document, YES allows the component to straddle all 
the columns.

<CtitleCns>

an_level

<Cpara>

Reserved for future use.

<CtitleCns>

kern_space

<Cpara>

YES tells TPS to apply pair kerning.

<CtitleCns>

word_spacing

<Cpara>

YES tells TPS to use the wordspacing values provided here. NO tells 
TPS to use default spacing.

<CtitleCns>

word_sp_max

<Cpara>

The maximum space between words, as a multiple of the TPS-defined 
natural word spacing.

<CtitleCns>

word_sp_min

<Cpara>

The minimum space between words, as a fraction of the TPS-defined 
natural word spacing.

<CtitleCns>

word_sp_nom

<Cpara>

The optimal space between words, as a multiple of the TPS-defined 
natural word spacing.

<CtitleCns>

letter_spacing

<Cpara>

YES allows TPS to add space between letters in order to reduce space 
between words, when space between words exceeds the maximum word spacing.

<CtitleCns>

<|,97>letter_sp_max

<Cpara>

The maximum space between letters if <F25>letter_spacing<F0> is on, 
as a fraction of the TPS-defined natural word spacing.

<CtitleCns>

composition

<Cpara>

This field controls behavior during text fill.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>FSPC_OVR<Tab>Overs
et. As many words as possible will go on a line without dropping below 
the minimum word spacing.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>FSPC_OPT<Tab>Optim
al. A line break will occur as soon as possible after the optimal 
word spacing is achieved.

<CtitleCns>

hyphenation

<Cpara>

Determines how many consecutive lines can end with a hyphen. A value 
between 0 and 10. 0 means no hyphenation. 10 means full hyphenation.

<CtitleCns>

profileP

<Cpara>

Describes special indentation for each line of text allowing for shaping 
text around frames. As component profiling is relatively rare, <F25>profileP
<F0> is often NULL.

<CtitleCns>

toc_name

<Cpara>

The table of contents in which this component will be listed.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		97,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F25>Cmpn_t<F0>  is used to define a component master or a component 
(or inline component) instance. Since a component is the fundamental 
unit of structure in an Interleaf document, it is the most common 
top-level element of the document body.

<Cpara>

The different uses of <F25>Cmpn_t<F0> are distinguished by the settings 
of <F25>id<F0> and <F25>subcmpn<F0>. The possible values of <F25>id<F0> 
are: <F25>ID_MasterCmpn<F0> and <F25>ID_Cmpn<F0>. The possible values 
of <F25>subcmpn<F0> are: <F25>NO <F0>or <F25>YES<F0>. A <F25>YES<F0> 
value for <F25>subcmpn<F0> is only compatible with an <F25>ID_Cmpn<F0> 
value for <F25>id<F0>.

<Cpara>

The body of a component is managed through a set of services for dynamically-gr
owing character strings. Those services, called the <F25>Ssave<F0> 
services, are described on page <Ref, Page #, Page Value = 166, Tag = ssave>.. 
The body of a component is represented as a string of <F25>shar<F0> 
characters, contiguous in memory, and as big as needed. Text characters 
occupy one <F25>shar<F0> each, with values limited to 14-bit integers. 
A value larger than 2^14 is a <F25>token<F0>, discussed on page <Ref, Page #, Page Value = 53, Tag = tokens>
, representing a non-textual element of the component body - a font-change, 
a frame, an autonumber, an index token, etc.

<titleA,
	Begin New Page =		yes>

<|,98>Structure for Tables

<rule:Adot>

<Tab.>

<paraAT>

This section describes the markup for tables and their masters.

<CtitleB>

<|,99>Table_rule_t

<Cstuff>

typedef struct table_rule_t<HR>
{<HR>
<Tab>unsigned char<Tab><Tab>width;<HR>
<Tab>unsigned char<Tab><Tab>pattern;<HR>
<Tab>unsigned char<Tab><Tab>color;<HR>
<Tab>unsigned char<Tab><Tab>double_rule;<HR>
<Tab>unsigned char<Tab><Tab>visible;<HR>
} Table_rule_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		99,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
width

<Cpara>

Width of the ruling in pixels.

<CtitleCns>

pattern

<Cpara>

Set to <F25>linepat_SOLID<F0>.

<CtitleCns>

color

<Cpara>

Set to <F25>clr_BLACK<F0>.

<CtitleCns>

double_rule

<Cpara>

If YES, there will be two lines of ruling, <F25>width<F0> pixels apart.

<CtitleCns>

visible

<Cpara>

If YES, the ruling will be visible.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		99,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This is the elementary structure describing a ruling for a table, 
cell,  or frame (within a table). Each ruling has its own width, color, 
pattern, and visibility. A field controls whether the rule is single 
or double (double rules are drawn as two single rules with a single-width 
space in between, giving a total width 3 times that of a single rule). 

<CtitleB>

<|,100>Table_border_t

<Cstuff>

typedef struct table_border_t<HR>
{<HR>
<Tab>Table_rule_t<Tab><Tab><Tab>top;<HR>
<Tab>Table_rule_t<Tab><Tab><Tab>bottom;<HR>
<Tab>Table_rule_t<Tab><Tab><Tab>left;<HR>
<Tab>Table_rule_t<Tab><Tab><Tab>right;<HR>
} Table_border_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		100,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
top

<Cpara>

Describes the top ruling.

<CtitleCns>

bottom

<Cpara>

Describes the bottom ruling.

<CtitleCns>

left

<Cpara>

Describes the left ruling.

<CtitleCns>

right

<Cpara>

Describes the right ruling.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		100,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This structure describes the borders of a table. Individual cell borders 
are described separately.

<CtitleB>

<|,101>TL_ruling_t

<Cstuff>

typedef struct tl_ruling_t <HR>
{<HR>
<Tab>Table_rule_t<Tab><Tab><Tab>top;<HR>
<Tab>Table_rule_t<Tab><Tab><Tab>left;<HR>
} TL_ruling_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		101,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
top

<Cpara>

Describes the top ruling.

<CtitleCns>

left

<Cpara>

Describes the left ruling.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		101,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This structure describes the top and left borders of a cell or a frame 
in a table. The right and bottom rulings are handled by the next cell 
to the right, and the cell on the next line, respectively; cells at 
the right and bottom edges of the table are handled by the <F25>Table_border_t
<F0> structure.

<CtitleB>

<|,102>Cell_t

<Cstuff>

typedef struct cell_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>Unknown_t<Tab><Tab>*unkP;<HR>
<Tab>Autosize_t<Tab><Tab>*autosizeP;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>height;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>width;<HR>
<Tab>bool<Tab><Tab><Tab>auto_edit;<HR>
<Tab>short<Tab><Tab><Tab>straddle;<HR>
<Tab>short<Tab><Tab><Tab>v_align;<HR>
<Tab>TL_ruling_t<Tab><Tab>rulings;<HR>
<Tab>NullObj_t<Tab><Tab>*cellbodyP;<HR>
} Cell_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		102,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Used to link cells together. The <F25>id<F0> field should be set to <F25>ID_Cel
l<F0>.

<CtitleCns>

unkP

<Cpara>

A list of unknown structures found when building this structure.

<CtitleCns>

autosizeP

<Cpara>

See page <Ref, Page #, Page Value = 119, Tag = autosize>  for a complete 
description. The legal values for <F25>frame_width <F0>are ASZNOX 
(size contents to width = no) and ASZEXX (size contents to width = 
yes). The legal values for <F25>frame_height<F0> are ASZNOY (size 
contents to height = no) and ASZINY (height=contents).

<Cpara>

Often this field is NULL. If <F25>width <F0>and <F25>height<F0> are 
set to 0, the default behavior is the cell height sized to the cell's 
content and the cell's content sized to the cell's width (as defined 
in the <F25>Table_column_t <F0>structure).

<CtitleCns>

height

<Cpara>

Height of the cell. If set to 0, height will be sized to content.

<CtitleCns>

width

<Cpara>

Width of cell contents. Should always be 0 (size contents to width 
= yes).

<CtitleCns>

auto_edit

<Cpara>

Should always be YES. The <F25>auto_edit<F0> field information causes 
TPS to automatically start a microdocument-edit whenever the user 
selects this cell.

<CtitleCns>

straddle

<Cpara>

The number of columns this cell straddles (usually 1).

<CtitleCns>

v_align

<Cpara>

Vertical alignment.

<exp_list>

<|,103><"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_V_TOP<Tab>
Align top of contents across row.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_V_BOTTOM<Tab>Al
ign bottom of contents across row.

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_V_CENTER<Tab>Al
ign center of contents across row.

<CtitleCns>

rulings

<Cpara>

Describes the top and left rulings.

<CtitleCns>

cellbodyP

<Cpara>

A list of components in the cell.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		103,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A <F25>Cell_t<F0> object conforms to a <F25>NullObj_t<F0>, and typically 
a table row is a sequence of <F25>Cell_t<F0>'s. There is no master 
for a cell.

<Cpara>

The <F25>cellbodyP<F0> field starts a linked list of objects that 
are the contents of this cell. TPS allows only components, but AR 
does not impose that restriction. The list ends with NULL. TPS will 
complain if there is nothing on the list (i.e., cellbodyP = NULL), 
but one empty component is enough to satisfy it.

<CtitleB>

<|,104>The Row_t object

<Cstuff>

typedef struct row_flags_t<HR>
{<HR>
<Tab>unsigned<Tab>hidden<Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab>new_page<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab>new_column<Tab>: 1;<HR>
<Tab>unsigned<Tab>pbreak_after<Tab>: 1;<HR>
<Tab>unsigned<Tab>is_header<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab>is_footer<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab>A_page<Tab><Tab><Tab>: 1;<HR>
} Row_flags_t;

<Cstuff>

typedef struct row_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>shar<Tab><Tab><Tab>*row_nameP;<HR>
<Tab>Unknown_t<Tab><Tab>*unkP;<HR>
<Tab>NullObj_t<Tab><Tab>*contentsP;<HR>
<Tab>Row_flags_t<Tab><Tab>flags;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>top_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>bottom_margin;<HR>
<Tab>Font_value_t<Tab>font;<HR>
<Tab>Attr_t<Tab><Tab><Tab>*attrvalsP;<HR>
<Tab>Ssave_t<Tab><Tab><Tab>text_content; /** holds page break token, 
if any. **/<HR>
} Row_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		104,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Link rows together. The <F25>id<F0> field should be set to <F25>ID_Row <F0>or 
<F25>ID_MasterRow<F0> depending upon whether this is a row instance 
or a master row.

<CtitleCns>

row_nameP

<Cpara>

Name of the row.

<CtitleCns>

unkP

<Cpara>

List of unknown markup constructs. Consider this field <F24@A>read-only<F0>.

<CtitleCns>

contentsP

<Cpara>

List of cells (or frames acting as cells) that make up this row.

<CtitleCns>

flags

<Cpara>

Property sheet settings.

<Cpara>

<F25>hidden<F0> is set by TPS to YES if the effectivity control string 
evaluates to off. Setting this field has no effect on TPS.

<Cpara>

<F25>new_page <F0>starts a new page with this row.

<Cpara>

<|,105><F25>new_column<F0> starts a new column in a multicolumn document.

<Cpara>

<F25>pbreak_after <F0>allows a page or column break after this row.

<Cpara>

<F25>is_header <F0>makes this row a header row. It will be duplicated 
on each new page of a multi-page table.

<Cpara>

<F25>is_footer<F0> makes this row a footer row. It will be duplicated 
on each new page of a multi-page table.

<Cpara>

<F25>A_page<F0> is for internal use only. Initialize to 0.

<CtitleCns>

top_margin

<Cpara>

Space between top of contents and top ruling.

<CtitleCns>

bottom_margin

<Cpara>

Space between bottom of contents and bottom ruling.

<CtitleCns>

font

<Cpara>

Font for revision bar attribute only.

<CtitleCns>

attrvalsP

<Cpara>

Effectivity attributes.

<CtitleCns>

text_content

<Cpara>

Should only contain a page-break token. Consider this <F24@A>read-only<F0>. 
Setting values here has no effect.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		105,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The identifiers <F25>ID_MasterRow<F0> and <F25>ID_Row<F0> distinguish 
the two kinds of rows. <F25>hidden<F0> will be <F25>YES<F0> in any 
MasterRow. A row inherits its properties from its MasterRow, but a 
MasterRow does not inherit from anywhere. A row can have effectivity 
attributes (a cell or a table as a whole cannot).

<Cpara>

TPS uses only the revision bar attribute of the rows <F25>font<F0> 
field. The <F25>text_content<F0> field exists to preserve a page-break 
token when one falls at the start of a row.

<CtitleB>

<|,106>Row_name_t

<Cstuff>

typedef struct row_name_t<HR>
{<HR>
<Tab>struct row_name_t<Tab><Tab>*nextP;<HR>
<Tab>shar<Tab><Tab><Tab><Tab><Tab>*row_nameP;<HR>
} Row_name_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		106,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
nextP

<Cpara>

The next create-row name.

<CtitleCns>

row_nameP

<Cpara>

The name of a row.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		106,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This structure is used by the <F25>create_rowsP<F0> field in a table. 
When TPS creates a table from its master definition, the initial set 
of rows is the sequence named on this list. This list has only the 
names; each row takes its properties from the MasterRow with its name.

<CtitleB>

<|,107>The Table_t object

<Cstuff>

typedef struct table_flags_t<HR>
{<HR>
<Tab>unsigned<Tab>new_page<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab>new_column<Tab>: 1;<HR>
<Tab>unsigned<Tab>pbreak_within<Tab>: 1;<HR>
<Tab>unsigned<Tab>pbreak_after<Tab>: 1;<HR>
<Tab>unsigned<Tab>straddle<Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab>pbreak_rulings<Tab>: 1;<HR>
<Tab>unsigned<Tab>A_page<Tab><Tab><Tab>: 1;<HR>
} Table_flags_t;

<Cstuff>

typedef struct table_column_t<HR>
{<HR>
<Tab>struct table_column_t<Tab>*nextP;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>num_column;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab><Tab><Tab>width;<HR>
<Tab>Table_rule_t<Tab><Tab><Tab><Tab>top;<HR>
<Tab>Table_rule_t<Tab><Tab><Tab><Tab>left;<HR>
} Table_column_t;

<Cstuff>

typedef struct table_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>shar<Tab><Tab><Tab>*table_nameP;<HR>
<Tab>Unknown_t<Tab><Tab>*unkP;<HR>
<Tab>short<Tab><Tab><Tab>num_columns;<HR>
<Tab>Table_column_t<Tab>*column_infoP;<HR>
<Tab>Row_t<Tab><Tab><Tab>*master_rowsP;<HR>
<Tab>Row_name_t<Tab>*create_rowsP;<HR>
<Tab>Row_t<Tab><Tab><Tab>*content_rowsP;<HR>
<Tab>Table_flags_t<Tab>flags;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>top_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>bottom_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>left_margin;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>right_margin;<HR>
<Tab>short<Tab><Tab><Tab>widow_control;<HR>
<Tab>short<Tab><Tab><Tab>orphan_control;<HR>
<Tab>Table_border_t<Tab>border;<HR>
<Tab>Table_rule_t<Tab><Tab>header_rule;<HR>
<Tab>Table_rule_t<Tab><Tab>footer_rule;<HR>
} Table_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		107,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Links table masters off the <F25>Il_state_t<F0> and links table instances 
on the list of <F25>Il_state_t <F0>components. The <F25>id<F0> field 
for a table instance is <F25>ID_Table<F0>. The <F25>id <F0>field for 
a table master is <F25>ID_MasterTable<F0>.

<CtitleCns>

table_nameP

<Cpara>

The table name. Each table instance name must match a table master 
name.

<CtitleCns>

<|,108>unkP

<Cpara>

List of unknown objects in markup. Consider this <F24@A>read-only.

<CtitleCns>

num_columns

<Cpara>

Number of columns in the table.

<CtitleCns>

column_infoP

<Cpara>

Information about each column.

<Cpara>

<F25>nextP<F0> points to the next column.

<Cpara>

<F25>num_column<F0> specifies this column's column number.

<Cpara>

<F25>width<F0> specifies column width.

<Cpara>

<F25>top <F0>describes the top border of the column.

<Cpara>

<F25>left <F0>describes the left border of the column.

<CtitleCns>

master_rowsP

<Cpara>

The row masters for this table. Each table has its own set of row 
masters from which the row instances take properties. Each type of 
row should be listed once.

<CtitleCns>

create_rowsP

<Cpara>

The list of row names in a newly-created table. The same row name 
can be used multiple times.

<CtitleCns>

content_rowsP

<Cpara>

The row instances.

<CtitleCns>

flags

<Cpara>

Table properties.

<Cpara>

<F25>new_page<F0> begins a new page with this table.<F25> 

<Cpara>

<F25>new_column<F0> begins a new column in a multicolumn document.

<Cpara>

<F25>pbreak_within<F0> allows page breaks within the document or column 
breaks across columns.

<Cpara>

<F25>pbreak_after <F0>allows page or column breaks after the table.

<Cpara>

<F25>straddle<F0> allows the table to straddle columns in a multicolumn 
document.

<Cpara>

<F25>pbreak_rulings<F0> causes table rulings to appear at page breaks.

<Cpara>

<F25>A_page<F0> is for internal use only. Initialize to 0.

<CtitleCns>

top_margin

<Cpara>

Space between top of table and component above.

<CtitleCns>

bottom_margin

<Cpara>

Space between bottom of table and component below.

<CtitleCns>

<|,109>left_margin

<Cpara>

Space between left edge of table and left page margin.

<CtitleCns>

right_margin

<Cpara>

Space between right edge of table and right page margin.

<CtitleCns>

widow_control

<Cpara>

The minimum number of rows that must appear in this table prior to 
a page or column break. A number between 1 and 16.

<CtitleCns>

orphan_control

<Cpara>

The minimum number of rows that must appear in this table after a 
page or column break. A number between 1 and 16.

<CtitleCns>

border

<Cpara>

Description of the table border.

<CtitleCns>

header_rule

<Cpara>

Description of the ruling between headers and the table body.

<CtitleCns>

footer_rule

<Cpara>

Description of the ruling between footers and the table body.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		109,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F25>Table_t<F0> is used to define a table master or a table instance. 
The different uses of <F25>Table_t<F0> are distinguished by the settings 
of <F25>id<F0>. The possible values of <F25>id<F0> are: <F25>ID_MasterTable
<F0> and <F25>ID_Table<F0>. 

<Cpara>

A master table is linked off the <F25>Il_state_t.tableP <F0>list. 
Table instances are found in the body of the document off the <F25>Il_state_t.b
odyP <F0>list.

<Cpara>

There should be <F25>num_columns<F0> columns on the <F25>column_infoP <F0>list. 
Columns are numbered from left to right, starting with 1. The order 
of columns is implicit in the order of entries in the list, but it 
is stored in each structure as well. AR checks that an entry is correct 
about its place in the list when it is writing the markup for a table. 
If an error is found, AR will cause a program exit.

<Cpara>

A table has as many entries on its linked list of <F25>master_rowsP<F0> 
as there are distinct names of rows possible in the table. The <F25>create_rows
P <F0>list gives the order and names of rows for TPS to use when creating 
a table from a master.

<Cpara>

The <F25>content_rowsP<F0> field is the start of the linked list of 
table contents. TPS requires that there be at least one row, and that 
the row have as many items as are in <F25>num_columns.

<Cpara>

The top and bottom margins of the table define its separation from 
the components above and below it, while the top and bottom row margins 
define the separation between adjacent rows.

<titleA,
	Begin New Page =		yes>

<|,110>Structure for Diagrams

<rule:Adot>

<Tab.>

<paraAT>

This section describes the markup for frames and their contents.

<para>

In the descriptions of <F25>color<F0>, <F25>transparency<F0>, and <F25>pattern
<F0> for diagramming objects, pay special attention to the difference 
between<F26> line<F0> patterns (dashes) and <F26>fill<F0> patterns. <F26>Line 
<F0>patterns are described in the <F26>ASCII Format for Diagramming 
Objects <F0>section of the <F26>TPS File Formats<F0> manual. <F26>Fill <F0>patt
erns were discussed on page <Ref, Page #, Page Value = 73, Tag = patterns>.

<para>

<F25>transparency<F0> can take two values: 0 (make the fill or edge 
visible) and 127 (make the fill or edge invisible).

<para>

<F25>color<F0> takes one of the values in the <F25>Color_info_t<F0> 
structure.

<para>

<F25>width<F0> is specified in 1/8 point increments.

<CtitleB>

<|,111>ArDgObject_t

<Cstuff>

typedef int *opaque_ptr_t;<Tab><Tab><Tab>/* an <#7f>any type" pointer 
*/

<Cstuff>

typedef shar ArDgObj_type;<Tab><Tab><Tab>/* object type letter representations 
*/

<Cstuff>

typedef struct ar_dg_object_t<HR>
{<HR>
<Tab>struct ar_dg_object_t<Tab>*next;<HR>
<Tab>ArDgObj_type<Tab><Tab><Tab>type;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>version;<HR>
<Tab>short<Tab><Tab><Tab><Tab><Tab>z_coord;<HR>
<Tab>long<Tab><Tab><Tab><Tab><Tab>flags;<HR>
<Tab>opaque_ptr_t<Tab><Tab><Tab>info;<HR>
} ArDgObject_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		111,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
next

<Cpara>

The next object in the same group.

<CtitleCns>

type

<Cpara>

The type of object: group, arc, line, polygon, chart, etc.

<Cstuff>

dg_GROUP<Tab><Tab><Tab>'g'<HR>
dg_LINE<Tab><Tab><Tab>'v'<HR>
dg_RELL<Tab><Tab><Tab>'e'<HR>
dg_ARC<Tab><Tab><Tab>'a'<HR>
dg_CHART<Tab><Tab><Tab>'c'<HR>
dg_EQN<Tab><Tab><Tab>'m'<HR>
dg_MICRODOC<Tab>'T'<HR>
dg_POLY<Tab><Tab><Tab>'p'<HR>
dg_TEXTSTR<Tab><Tab>'t'<HR>
dg_IMAGE<Tab><Tab><Tab>'i'<HR>
dg_VECTORS<Tab><Tab>'V'<HR>
dg_SPLINE<Tab><Tab><Tab>'S'<HR>
dg_EDIT_STATE<Tab>'E'<HR>
dg_TRACE<Tab><Tab><Tab>'d'<HR>
dg_OUTLINE<Tab><Tab>'O'<HR>
dg_CONVERT<Tab><Tab>'o'<HR>
dg_EPS<Tab><Tab><Tab><Tab>'n'

<CtitleCns>

version

<Cpara>

Version of the object. Groups (dg_GROUP) use version 9. For the version 
of any of the other objects, see the description of that object.

<CtitleCns>

z_coord

<Cpara>

The depth of the object. Each object is on its own two dimensional 
plane. The <F25>z_coord<F0> specifies the layering of these planes. 
Objects with low numbers are 
<|,112>covered by those with higher numbers. The numbers should start 
with 1, and increase for each new graphic object in the diagram.

<CtitleCns>

flags

<Cpara>

The flags are 32 lock bits. Only the first 25 are currently used; 
the remainder should be set to zero. Usually, this field can be set 
to 0. For a complete explanation of lock bits, see the <F26>ASCII 
Format for Diagramming Objects <F0>section in the <F26>TPS File Formats <F0>ref
erence manual.

<CtitleCns>

info

<Cpara>

Object type-specific information.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		112,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
An <F25>ArDgObject_t<F0> data structure is the basic element of a 
diagram. It holds the information that every diagramming object has: <F26>type
<F0>, <F26>version<F0>, <F26>z_coord<F0> or depth, <F26>flags<F0>, 
and a pointer to its <F26>type-specific data<F0>.

<Cpara>

Every object has some information unique to its type. The type-specific 
data structures pointed to by the <F25>info<F0> field are described 
in the following pages. A group is a special case. Its type-specific 
information is the list of diagramming objects in the group; so its <F25>info
<F0> field points to another <F25>ArDgObject_t <F0>structure, the 
first object in the group.

<CtitleB>

<|,113>ArDgHead_t

<Cstuff>

typedef struct ar_dg_head_t<HR>
{<HR>
<Tab>short<Tab><Tab><Tab><Tab>version;<HR>
<Tab>ArDgObject_t<Tab><Tab>*contents;<HR>
} ArDgHead_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		113,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
version

<Cpara>

The version of the diagram. Set to 6.

<CtitleCns>

contents

<Cpara>

The contents of the diagram.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		113,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This data structure occurs inside a <F25>Frame_t<F0> or a <F25>HeaderFooter_t
<F0>; it connects the diagram to the frame, header, or footer. It 
holds the version number of the diagram (which is distinct from the 
version of any of the objects within the diagram), and a pointer to 
the over-arching group object that begins the diagram. This object 
will always have <F25>type<F0> `g'; <F25>next<F0> field that is NULL, 
and an <F25>info<F0> field that points to the first object in the 
diagram.

<CtitleB>

<|,114>Frame_t

<Cstuff>

typedef struct autosize_t <HR>
{<HR>
<Tab>char<Tab><Tab><Tab>frame_width;<HR>
<Tab>char<Tab><Tab><Tab>frame_height;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>xmin, xmax;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>ymin, ymax;<HR>
<Tab>unsigned short<Tab>xfrac, yfrac;<HR>
<Tab>short<Tab><Tab><Tab>xadj, yadj;<HR>
} Autosize_t;

<Cstuff>

typedef struct frame_flag_t<HR>
{<HR>
 /**---8-bit boundaries------**/<HR>
<Tab>unsigned<Tab><Tab>fixed<Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>shared<Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>auto_edit<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>cell<Tab><Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>placement<Tab><Tab>: 4;<HR>
 /**-------------------------**/<HR>
<Tab>unsigned<Tab><Tab>h_align<Tab><Tab><Tab>: 3;<HR>
<Tab>unsigned<Tab><Tab>v_align<Tab><Tab><Tab>: 2;<HR>
<Tab>unsigned<Tab><Tab>show_anchor<Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>proportional<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>filler_unused<Tab>: 1;<HR>
 /**-------------------------**/<HR>
<Tab>unsigned<Tab><Tab>x_locate <Tab><Tab>: 4;<HR>
<Tab>unsigned<Tab><Tab>y_locate<Tab><Tab><Tab>: 4;<HR>
 /**-------------------------**/<HR>
<Tab>unsigned<Tab><Tab>z_locate<Tab><Tab><Tab>: 2;<HR>
<Tab>unsigned<Tab><Tab>repeat_info<Tab><Tab>: 2;<HR>
<Tab>unsigned<Tab><Tab>repeat_same_page<Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>same_page<Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>hidden<Tab><Tab><Tab>: 1;<HR>
<Tab>unsigned<Tab><Tab>super_num<Tab><Tab>: 1;<HR>
 /**-------------------------**/<HR>
<Tab>unsigned<Tab><Tab>cont_height<Tab><Tab>: 1;<HR>
unsigned<Tab><Tab><Tab>cont_width<Tab><Tab>: 1;<HR>
} Frame_flag_t;

<Cstuff>

typedef struct frame_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>struct frame_t<Tab>*nextP;<HR>
<Tab>shar<Tab><Tab><Tab>name[AR_MAX_FRAMENAME];<HR>
<Tab>Frame_flag_t<Tab>flags;<HR>
<Tab>shar<Tab><Tab><Tab>*page_numP;<HR>
<Tab>Autosize_t*<Tab><Tab>autosizeP;<HR>
<Tab>Attr_t*<Tab><Tab><Tab>attrvalsP;<HR>
<|,115><Tab>Rsu<Tab><Tab><Tab><Tab>a;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>height;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>width;<HR>
<Tab>ArDgHead_t<Tab>diagram;<HR>
<Tab>TL_ruling_t<Tab><Tab>*rulingsP;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>xofs;<HR>
<Tab>Rsu<Tab><Tab><Tab><Tab>yofs;<HR>
<Tab>Autonum_t<Tab><Tab>*anumP;<HR>
<Tab>short<Tab><Tab><Tab>straddle<HR>
} Frame_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		115,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Link master frames together or link frame instances to text tokens 
in the body of components. The <F25>id<F0> field should be <F25>ID_Frame <F0>fo
r a frame instances or <F25>ID_MasterFrame<F0> for a frame master.

<CtitleCns>

unkP

<Cpara>

List of unknown structures in the frame. Treat this as a <F24@A>read-only<F0> 
list.

<CtitleCns>

name

<Cpara>

The frame name. Each frame instance should have a master of the same 
name.

<CtitleCns>

flags

<Cpara>

Frame property information.

<Cpara>

<F25>fixed.<F0> If placement is <F26>At Anchor<F0>, set this field 
to<F25> <F0>fr_FIXED, otherwise set it to fr_FLOAT.

<Cpara>

<F25>shared<F0>. YES if a shared content frame. If YES, frame instances 
should not contain markup.

<Cpara>

<F25>auto_edit<F0>. YES if the default editor should be for microdocuments 
rather than for diagrams.

<Cpara>

<F25>cell<F0>. YES if this frame is a cell in a table.

<Cpara>

<F25>placement<F0>. The placement of the frame:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_FIXEDPLACE<Tab><Tab>
At Anchor 

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_FOLLOW_ANCHOR<Tab>
Following Anchor

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_FOLLOW_TEXT <Tab><Tab>
Following Text

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_BOTTOM<Tab><Tab>
Bottom

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_MIDDLE<Tab><Tab>
Middle (obsolete)

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_TOP<Tab><Tab><Tab>
Top

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_UNDERLAY<Tab><Tab>
Underlay

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_OVERLAY<Tab><Tab>
Overlay

<Cpara>

<F25>h_align<F0>. Horizontal alignment. This field names the part 
of the frame aligned horizontally with a reference <F25>x_locate<F0>. 
Use one of the following:

<exp_list>

<|,116><"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_H_LEFT<Tab>
Left side of the frame

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_H_CENTER<Tab>Ce
nter of the frame

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_H_RIGHT<Tab>Rig
ht side of the frame

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_H_INNER<Tab>Inn
er part of the frame (double sided documents)

<exp_list>

<"|:exp_list", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_H_OUTER<Tab>Out
er part of the frame (double sided documents)

<Cpara>

<F25>v_align<F0>. Vertical alignment. This field names the part of 
the frame aligned vertically with a reference <F25>y_locate<F0>. Use 
one of the following:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_V_BASELN<Tab>
Baseline of frame

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_V_BOTTOM<Tab>
Bottom of frame

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_V_CENTER<Tab>
Center of frame

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_V_TOP<Tab><Tab>
Top of frame

<Cpara>

<F25>show_anchor<F0>. If YES, the frame anchor is displayed.

<Cpara>

<F25>proportional<F0>. Set to 0.

<Cpara>

<F25>filler_unused<F0>. Unused.

<Cpara>

<F25>x_locate<F0>. When aligning a frame horizontally use one of these 
as the reference point.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_PAGENONE<Tab><Tab>
Page without margins

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_PAGEBOTH<Tab><Tab>
Page with both margins

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_MARGLEFT<Tab><Tab>
Left page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_MARGRIGHT<Tab><Tab>
Right page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_MARGINNER<Tab><Tab>
Inner page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_MARGOUTER<Tab><Tab>
Outer page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_COLUMN<Tab><Tab>
Column

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_ANCHOR<Tab><Tab>
Anchor

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_GUTTLEFT<Tab><Tab>
Left gutter

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_X_GUTTRIGHT<Tab><Tab>
Right gutter

<Cpara>

<F25>y_locate<F0>. When aligning a frame vertically use one of these 
as the reference point.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_Y_PAGENONE<Tab><Tab>
Page without margins

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_Y_PAGEBOTH<Tab><Tab>
Page with both margins

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_Y_MARGTOP<Tab><Tab>
Top page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_Y_MARGBOTTOM<Tab>
Bottom page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_Y_ANCHOR<Tab><Tab>
Anchor

<Cpara>

<F25>z_locate<F0>. Set to fr_Z_NOTSET.

<Cpara>

<F25>repeat_info<F0>. Used for repeating frames. See the reference 
manuals for details. Set one of the following:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_REP_NONE<Tab><Tab>
Default

<listempty1>

<|,117><"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_REP_BE
GIN<Tab><Tab>Begin a repeating frame

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_REP_END<Tab><Tab>
End the repeating frame

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>fr_SAME_PAGE<Tab><Tab>
(obsolete)

<Cpara>

<F25>repeat_same_page<F0>. YES if the repeating frame action takes 
effect on the current page (with the current frame).

<Cpara>

<F25>same_page<F0>. YES if the frame must appear on the same page 
as its anchor.

<Cpara>

<F25>hidden<F0>. If YES, this frame is not visible, because of effectivity 
control. This is a <F24@A>read-only<F0> field.

<Cpara>

<F25>super_num<F0>. If YES, and if using numbered frames, the number 
will appear as a superscript.

<Cpara>

<F25>cont_height<F0>. If YES, the frame's contents are automatically 
sized to the frame's height.

<Cpara>

<F25>cont_width<F0>. If YES, the frame's contents are automatically 
sized to the frame's width.

<CtitleCns>

page_numP

<Cpara>

A<F24@A> read-only<F0> field specifying the page this frame is on.

<CtitleCns>

autosizeP

<Cpara>

Sizing of the frame. This field may be NULL if the frame is a fixed 
size (height and width specified).

<Cpara>

<F25>frame_width<F0>. Frame width specification.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZNOX<Tab><Tab>
Width = contents

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZEXX<Tab><Tab>
Size contents to width

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZEXXCOL<Tab>Si
ze contents to width (column width frames)

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZINX<Tab><Tab>
Width = contents

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWPAG<Tab>Widt
h = page without margins

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWCOL<Tab>Widt
h = column

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWPAGM<Tab>Wid
th = page with both margins

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWPAGL<Tab>Wid
th = page with left margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWPAGR<Tab>Wid
th = page with right margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWPAGO<Tab>Wid
th = page with outer margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWPAGI<Tab>Wid
th = page with inner margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWLMARG<Tab>Wi
dth = left page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWRMARG<Tab>Wi
dth = right page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWOMARG<Tab>Wi
dth = outer page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWIMARG<Tab>Wi
dth = inner page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZWGUTTER<Tab>W
idth = gutter

<Cpara>

<F25>frame_height<F0>. Frame height specification.

<listempty1>

<|,118><"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZNOY<Tab><Tab>
Height = contents

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZEXY<Tab><Tab>
Height = Size contents to height

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZINY<Tab><Tab>
Height = contents

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZHPAG<Tab>Heig
ht = page without margins

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZHPAGM<Tab>Hei
ght = page with both margins

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZHPAGT<Tab>Hei
ght = page with top margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZHPAGB<Tab>Hei
ght = page with bottom margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZHTMARG<Tab>He
ight = top page margin

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>ASZHBMARG<Tab>He
ight = bottom page margin

<Cpara>

<F25>xmin, xmax, ymin, ymax<F0>. Set to zero.

<Cpara>

<F25>xfrac<F0>. AR_PAGE_DENOM (1024) times the desired ratio of frame 
width to contents width. To produce frame sizes such as<F26> Width 
= contents * ratio<F0>.

<Cpara>

<F25>yfrac<F0>. AR_PAGE_DENOM (1024) times the desired ratio of frame 
height to contents height. To produce frame sizes such as<F26> Height 
= contents * ratio<F0>.

<Cpara>

<F25>xadj<F0>. Frame width minus contents width. To produce frame 
sizes such as <F26>Width = contents + 2 inches<F0>, specify 2.

<Cpara>

<F25>yadj<F26>. <F0>Frame height minus contents height. To produce 
frame sizes such as <F26>Height = contents + 2 inches<F0>, specify 
2.

<CtitleCns>

attrvalsP

<Cpara>

Effectivity attributes.

<CtitleCns>

a

<Cpara>

Obsolete. Set to 0.

<CtitleCns>

height

<Cpara>

Frame height if no <F25>autosizeP<F0> is provided.

<CtitleCns>

width

<Cpara>

Frame width if no <F25>autosizeP<F0> is provided.

<CtitleCns>

diagram

<Cpara>

Frame contents.

<CtitleCns>

rulingsP

<Cpara>

If this is a table cell, the rulings for the left and top borders 
of the cell.

<CtitleCns>

xofs

<Cpara>

Horizontal alignment offset for floating frames (anything but <F26>At 
Anchor<F0> frames). Use this value to adjust the horizontal position 
of the frame with respect to the horizontal reference <F25>Frame_t.flags.h_alig
n<F0>.

<CtitleCns>

<|,119>yofs

<Cpara>

Vertical alignment offset for <F26>At Anchor<F0>, <F26>Side<F0>, <F26>Overlay
<F0>, and<F26> Underlay<F0> frames. Use this value to adjust the vertical 
position of the frame with respect to the vertical reference specified 
in <F25>Frame_t.flags.v_align<F0>.

<CtitleCns>

anumP

<Cpara>

To have an autonumber act as frame anchor, specify the autonumber 
here.

<CtitleCns>

straddle

<Cpara>

The number of columns this frame straddles. Usually set to 1.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		119,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A <F25>Frame_flag_t<F0> is a C bitfield structure representing various 
properties of a frame. The one-bit fields take values of <F25>YES<F0> 
and <F25>NO.<F0> For the more complex fields, there are #define values 
in the include file that correspond to the properties in the markup. 
Note that many combinations of settings conflict with each other; 
refer to the<F26> Reference Manual<F0> for details on what can legally 
be combined.

<Cpara>

<Autonum, markers, 1, Tagname = autosize>One aspect of a frame is 
that it can size itself relative to the size of the diagram it contains. 
When a user expands or shrinks the contents of a diagram, the frame 
may adjust automatically. This resizing can happen independently for 
the height and width of the frame. An <F25>Autosize_t<F0> data structure 
holds the information controlling this. It is used only by a <F25>Frame_t<F0> 
object. Another kind of autosizing is scaling the diagram to fit into 
a frame. The former case is called <#7f>Size to Contents" and the 
latter is called <#7f>Size Contents to Width/Height"

<Cpara>

The <F25>frame_height<F0> and <F25>frame_width<F0> fields specify 
the type of autosizing in for each dimension. The other fields follow 
the markup.

<Cpara>

A frame can occur in a component, or in place of a cell in a table. 
Note that a header or footer, while containing a diagram, is a structure 
different from a frame.

<Cpara>

A <F25>Frame_t<F0> represents the properties of a frame, and contains 
a <F25>diagram<F0> field pointing to the contents of the frame. Master 
definitions of frames are linked off the <F25>Il_state_t <F0>structure. 
An individual frame in the body of a component is not linked to anything; 
it has a NULL <F25>nextP<F0>. A frame in a table is linked to the 
next cell or frame in its row.

<Cpara>

An <F25>ArDgHead_t<F0> connects a frame to its diagram.

<Cpara>

A frame always has a <F25>name<F0>. If the frame is a cell in a table, 
its <F25>rulingsP<F0> field will be non-NULL. If it is a numbered 
frame (footnote), its <F25>anumP<F0> points to an autonumber structure.

<CtitleB>

<|,120>HeaderFooter_t 

<Cstuff>

typedef struct headerfooter_t<HR>
{<HR>
<Tab>DECLARE_NullObjFields;<HR>
<Tab>HeadFoot_type<Tab><Tab>type;<HR>
<Tab>short<Tab><Tab><Tab><Tab>turned; /** TURNED_90, etc. **/<HR>
<Tab>ArDgHead_t<Tab><Tab>diagram;<HR>
} HeaderFooter_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		120,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
DECLARE_NullObjFields

<Cpara>

Link information about headers and footers from the <F25>Il_state_t<F0> 
structure. The <F25>id<F0> field is <F25>ID_HeadFoot<F0>.

<CtitleCns>

type

<Cpara>

The type of header or footer. The various choices are plain, left 
or right (for double-sided documents), and first (different first 
header or footer).

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>hf_PLAIN_HDR

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>hf_PLAIN_FTR

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>hf_LEFT_HDR

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>hf_LEFT_FTR

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>hf_RIGHT_HDR

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>hf_RIGHT_FTR

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>hf_FIRST_HDR

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>hf_FIRST_FTR

<CtitleCns>

turned

<Cpara>

The rotation of the headers and footers about the page. It must match 
the value used for the <F25>turned_pages <F0>field in the <F25>Page_info_t
<F0> structure. The choices are:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>TURNED_0 
for normal pages.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>TURNED_90 
for pages rotated clockwise.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>TURNED_270 
for pages rotated counterclockwise.

<CtitleCns>

diagram

<Cpara>

The diagram constituting the header or footer.

<CtitleCdesc,
	Allow Page Break After = no>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		120,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F25>HeaderFooter_t<F0> object represents any of the various forms 
of headers and footers that TPS supports. It is compatible with a <F25>NullObj_
t<F0>, and can be kept on a linked list of such objects.

<Cpara>

<CtitleB>

<|,121>MicroTSD_t

<Cstuff>

typedef struct microdoc_t<HR>
{<HR>
<Tab>Page_info_t<Tab><Tab>micro_page;<HR>
<Tab>NullObj_t<Tab><Tab>*contentsP;<HR>
} Microdoc_t;

<Cstuff>

typedef struct micro_tsd_t <HR>
{<HR>
<Tab>float<Tab><Tab><Tab>x, y;<HR>
<Tab>short<Tab><Tab><Tab>bcolor;<HR>
<Tab>short<Tab><Tab><Tab>btrans;<HR>
<Tab>short<Tab><Tab><Tab>bpat;<HR>
<Tab>short<Tab><Tab><Tab>lcolor;<HR>
<Tab>short<Tab><Tab><Tab>ltrans;<HR>
<Tab>short<Tab><Tab><Tab>width;<HR>
<Tab>short<Tab><Tab><Tab>pattern;<HR>
<Tab>short<Tab><Tab><Tab>flags;<HR>
<Tab>Microdoc_t<Tab><Tab>*text;<HR>
} MicroTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		121,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
x, y

<Cpara>

Coordinates of the top left corner of the microdocument in inches 
from the top left corner of the frame or header/footer.

<CtitleCns>

bcolor

<Cpara>

Interior fill color.

<CtitleCns>

btrans

<Cpara>

Interior transparency.

<CtitleCns>

bpat

<Cpara>

Interior fill pattern.

<CtitleCns>

lcolor

<Cpara>

Border color.

<CtitleCns>

ltrans

<Cpara>

Border transparency.

<CtitleCns>

width

<Cpara>

Width in 1/8 point units.

<CtitleCns>

pattern

<Cpara>

Border line pattern.

<CtitleCns>

<|,122>flags

<Cpara>

Set to 3.

<CtitleCns>

text

<Cpara>

<F25>micro_page<F0>. The page description for the microdocument.

<Cpara>

<F25>contentsP<F0>. A list of <F25>Cmpn_t<F0> structures constituting 
the body of the microdocument.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		122,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A microdocument is a small text-editing environment embedded in a 
diagramming frame. It has a <F25>Page_info_t<F0> structure to establish 
the basic properties of the environment, and a linked list of contents. 
In TPS, the list can hold only components. 

<Cpara>

Not all page properties are meaningful in the context of a microdocument. 
See the <F26>Reference Manual<F0> for details and the list of allowed 
properties.

<Cpara>

In the <F25>ArDgObject<F0> for a microdocument, set the <F25>type<F0> 
to <F25>dg_MICRODOC<F0> and set the <F25>version<F0> to <F25>12<F0>. 
Attach the <F25>MicroTSD_t<F0> structure to the <F25>info<F0> field 
of the <F25>ArDgObject_t <F0>structure.

<CtitleB>

<|,123>LineTSD_t

<Cstuff>

typedef struct line_tsd_t<HR>
{<HR>
<Tab>float<Tab><Tab>x1, y1;<HR>
<Tab>float<Tab><Tab>x2, y2;<HR>
<Tab>short<Tab><Tab>color;<HR>
<Tab>short<Tab><Tab>trans;<HR>
<Tab>short<Tab><Tab>width;<HR>
<Tab>short<Tab><Tab>pattern;<HR>
} LineTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		123,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
(x1, y1), (x2, y2)

<Cpara>

The coordinates of the line endpoints in inches from the top left 
corner of the frame or header/footer.

<CtitleCns>

color

<Cpara>

Line color.

<CtitleCns>

trans

<Cpara>

Line transparency.

<CtitleCns>

width

<Cpara>

Line width in 1/8 point units.

<CtitleCns>

pattern

<Cpara>

Line pattern.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		123,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A <F26>line<F0> object is drawn from the point located at <F25>x1, 
y1<F0> to the point at <F25>x2, y2.<F0> It has color, transparency, 
and width, and a pattern of dots and dashes.

<Cpara>

In the <F25>ArDgObject<F0> for a line, set the <F25>type<F0> to <F25>dg_LINE
<F0> and set the <F25>version<F0> to <F25>6<F0>. Attach the <F25>LineTSD_t
<F0> structure to the <F25>info<F0> field of the <F25>ArDgObject_t <F0>structur
e.

<CtitleB>

<|,124>ArcTSD_t

<Cstuff>

typedef struct arc_tsd_t <HR>
{<HR>
<Tab>short<Tab><Tab>format;<HR>
<Tab>float<Tab><Tab>btx, bty;<HR>
<Tab>float<Tab><Tab>bx, by;<HR>
<Tab>float<Tab><Tab>mx, my;<HR>
<Tab>float<Tab><Tab>ex, ey;<HR>
<Tab>float<Tab><Tab>tex, tey;<HR>
<Tab>float<Tab><Tab>x, y;<HR>
<Tab>short<Tab><Tab>fpattern;<HR>
<Tab>short<Tab><Tab>fcolor;<HR>
<Tab>short<Tab><Tab>ftrans;<HR>
<Tab>short<Tab><Tab>bcolor;<HR>
<Tab>short<Tab><Tab>btrans;<HR>
<Tab>short<Tab><Tab>bwidth;<HR>
<Tab>short<Tab><Tab>bpattern;<HR>
} ArcTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		124,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
format

<Cpara>

Set to 1.

<CtitleCns>

(btx, bty), (bx, by), (mx, my), (ex, ey), (tex, tey), (x, y)

<Cpara>

The six points that define an arc. The first pair of points defines 
the tangent at the beginning. The second, third, and fourth points 
are the beginning point, a point between in and the next point, the 
endpoint (usually), the tangent at point 4, and the endpoint. For 
a more detailed explanation of the fourth point, see <F26>Arcs<F0> 
in the <F26>File Formats <F0>manual.

<CtitleCns>

fpattern

<Cpara>

The fill pattern.

<CtitleCns>

fcolor

<Cpara>

The fill color.

<CtitleCns>

ftrans

<Cpara>

The fill transparency.

<CtitleCns>

bcolor

<Cpara>

The border color.

<CtitleCns>

btrans

<Cpara>

The border transparency.

<CtitleCns>

bwidth

<Cpara>

The border width in 1/8 point units.

<CtitleCns>

<|,125>bpattern

<Cpara>

The border line pattern.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		125,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F26>arc<F0> diagramming object is described in the <F26>ASCII 
Format for Diagramming Objects <F0>in the <F26>TPS File Format<F0> 
reference manual.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for an arc, set the <F25>type <F0>to 
<F25>dg_ARC<F0> and set the <F25>version<F0> to <F25>8<F0>. Attach 
the <F25>ArcTSD_t<F0> structure to the <F25>info<F0> field of the <F25>ArDgObje
ct_t<F0> structure.

<CtitleB>

<|,126>EllipseTSD_t

<Cstuff>

typedef struct ellipse_tsd_t<HR>
{<HR>
<Tab>float<Tab><Tab>ox, oy;<HR>
<Tab>float<Tab><Tab>t1x, t1y;<HR>
<Tab>float<Tab><Tab>t2x, t2y;<HR>
<Tab>short<Tab><Tab>fcolor;<HR>
<Tab>short<Tab><Tab>ftrans;<HR>
<Tab>short<Tab><Tab>fpattern;<HR>
<Tab>short<Tab><Tab>bcolor;<HR>
<Tab>short<Tab><Tab>btrans;<HR>
<Tab>short<Tab><Tab>bwidth;<HR>
<Tab>short<Tab><Tab>bpattern;<HR>
} EllipseTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		126,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
(ox, oy), (t1x, t1y), (t2x, t2y)

<Cpara>

The origin of two tangent vectors, the endpoint of one tangent vector, 
and the endpoint of the other tangent vector. The coordinates are 
specified in inches from the top-left corner of the frame or header/frame.

<Cpara>

The ellipse is described by a bounding parallelogram.

<CtitleCns>

fcolor

<Cpara>

The fill color.

<CtitleCns>

ftrans

<Cpara>

The fill transparency.

<CtitleCns>

fpattern

<Cpara>

The fill pattern.

<CtitleCns>

bcolor

<Cpara>

The border color.

<CtitleCns>

btrans

<Cpara>

The border transparency.

<CtitleCns>

bwidth

<Cpara>

The border width in 1/8 point units.

<CtitleCns>

bpattern

<Cpara>

The border line pattern.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		126,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
See the <F26>File Formats <F0>manual for a discussion of the <F26>ellipse<F0> 
definition.

<Cpara>

<|,127>In the <F25>ArDgObjects_t <F0>structure for an ellipse, set 
the <F25>type <F0>to <F25>dg_RELL<F0> and set the <F25>version<F0> 
to <F25>8<F0>. Attach the <F25>EllipseTSD_t<F0> structure to the <F25>info
<F0> field of the <F25>ArDgObject_t<F0> structure.

<CtitleB>

<|,128>SplineTSD_t

<Cstuff>

typedef struct knot_t<HR>
{<HR>
<Tab>struct knot_t<Tab>*next;<HR>
<Tab>float<Tab><Tab><Tab>x, y;<HR>
<Tab>short<Tab><Tab><Tab>color;<HR>
<Tab>short<Tab><Tab><Tab>trans;<HR>
<Tab>short<Tab><Tab><Tab>width;<HR>
<Tab>short<Tab><Tab><Tab>pattern;<HR>
} KNOT_t;

<Cstuff>

typedef struct spline_tsd_t <HR>
{<HR>
<Tab>float<Tab><Tab><Tab>x, y;<HR>
<Tab>short<Tab><Tab><Tab>fpattern;<HR>
<Tab>short<Tab><Tab><Tab>fcolor;<HR>
<Tab>short<Tab><Tab><Tab>ftrans;<HR>
<Tab>short<Tab><Tab><Tab>number_of_knots;<HR>
<Tab>KNOT_t<Tab><Tab>*knot_list;<HR>
<Tab>short<Tab><Tab><Tab>type;<HR>
} SplineTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		128,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
x, y

<Cpara>

The coordinates of the spline basis, in inches from the top left corner 
of the frame or header/footer.

<CtitleCns>

fpattern

<Cpara>

The fill pattern.

<CtitleCns>

fcolor

<Cpara>

The fill color.

<CtitleCns>

number_of_knots

<Cpara>

The number of knots

<CtitleCns>

knot_list

<Cpara>

The list of control points that define the spline. 

<Cpara>

If the spline is open, the last point is duplicated.

<Cpara>

<F25>next<F0>. The next knot.

<Cpara>

<F25>x, y<F0>. The coordinates of the knot, relative to the basis, <F26>not 
the frame corner.

<Cpara>

<F25>color, trans, width, pattern<F0>. The line color, transparency, 
width, and pattern for the segment.

<CtitleCns>

type

<Cpara>

The letter 'O' or 'C' depending on whether the spline is open or closed.

<CtitleCdesc>

<|,129>
<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		129,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A <F26>spline<F0> is a complex curve drawn in relation to a series 
of control points, or <F26>knots<F0>. 

<note:caution>

<"|:note:caution", Subcomponent = yes><F0>
<Frame,
	Name =			note:caution,
	Placement =		At Anchor,
	Width =			0.73 inches,
	Height =		0.10 inches,
	Diagram =
V6,
(g9,2,0
 (p8,2,8,5,7,0
   (g9,2,0
     (g9,2,0
       (v6,2,0,0,0.047423,0.706667,0.047423,7,0,4,0)
       (v6,3,0,0.706667,0.047423,0.706667,0.005911,7,0,4,0)
       (v6,4,0,0.706667,0.005911,0,0.005911,7,0,4,0)
       (v6,5,0,0,0.005911,0,0.047423,7,0,4,0))))
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
<Tab><F26>Caution:<F0><Tab><End Sub><F0>The way splines are used may 
change in the near future. Try to avoid creating this diagramming 
object.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for a spline, set the <F25>type <F0>to 
<F25>dg_SPLINE<F0> and set the <F25>version<F0> to <F25>13<F0>. Attach 
the <F25>SplineTSD_t<F0> structure to the <F25>info<F0> field of the <F25>ArDgO
bject_t<F0> structure.

<CtitleB>

<|,130>PolyTSD_t

<Cstuff>

typedef struct poly_tsd_t <HR>
{<HR>
<Tab>short<Tab><Tab><Tab>fpat;<HR>
<Tab>short<Tab><Tab><Tab>fcolor;<HR>
<Tab>short<Tab><Tab><Tab>ftrans;<HR>
<Tab>ArDgObject_t<Tab>*contents;<HR>
} PolyTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		130,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
fpat

<Cpara>

Fill pattern.

<CtitleCns>

fcolor

<Cpara>

The fill color.

<CtitleCns>

ftrans

<Cpara>

The fill transparency.

<CtitleCns>

contents

<Cpara>

A <F26>group<F0> structure containing the line segments that constitute 
the polygon.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		130,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A <F26>polygon<F0>, like a group, is a sequence of diagramming objects. 
It differs from a group in having a fill pattern, color, and transparency, 
and in lacking the depth, lock, and next object pointer of a group.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for a polygon, set the <F25>type <F0>to 
<F25>dg_POLY<F0> and set the <F25>version<F0> to <F25>8<F0>. Attach 
the <F25>PolyTSD_t<F0> structure to the <F25>info<F0> field of the <F25>ArDgObj
ect_t<F0> structure.

<Cpara>

For example, a <F25>BOX <F0>is a polygon with four connecting line 
segments.

<CtitleB>

<|,131>TextstrTSD_t

<Cstuff>

typedef struct textstr_tsd_t <HR>
{<HR>
<Tab>float<Tab><Tab><Tab>x, y;<HR>
<Tab>short<Tab><Tab><Tab>anchor;<HR>
<Tab>short<Tab><Tab><Tab>color;<HR>
<Tab>short<Tab><Tab><Tab>trans;<HR>
<Tab>float<Tab><Tab><Tab>angle;<HR>
<Tab>char<Tab><Tab><Tab>*attrib;<HR>
<Tab>char<Tab><Tab><Tab>*font;<HR>
<Tab>shar<Tab><Tab><Tab>*text;<HR>
} TextstrTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		131,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
x, y

<Cpara>

The coordinates of the text anchor in inches from the top left corner 
of the frame or header/footer.

<CtitleCns>

anchor

<Cpara>

Set to 1.

<CtitleCns>

trans

<Cpara>

Line transparency.

<CtitleCns>

angle

<Cpara>

Any angle of rotation; however, TPS displays only 0, 90, 180, and 
270-degree rotated text.

<CtitleCns>

attrib

<Cpara>

A string of letters, each describing one of the text properties defined 
in the discussion on the <<Fn> command in the <F26>File Formats<F0> 
manual. If there are no attributes, supply an empty string (I.e., 
<#7f>").

<CtitleCns>

font

<Cpara>

Character string describing the font. This object uses generic fonts 
such as <F25>wst:dutch12<F0> for a 12 point dutch font. The generic 
fonts are not documented. Experiment by generating ASCII markup documents 
with TPS to find the font strings that you want.

<CtitleCns>

text

<Cpara>

The text string. The following characters must be quoted with a backslash:<HR>
<< > ( ) , \ and spaces.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		131,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
An old-style<F26> text string<F0> is the predecessor of the microdocument. 
It is a limited form of text within a frame, generally less useful 
than a microdocument. However, it can be rotated away from horizontal, 
which a microdocument can not.

<Cpara>

<|,132>In the <F25>ArDgObjects_t <F0>structure for a text string, 
set the <F25>type <F0>to <F25>dg_TEXTSTR<F0> and set the <F25>version<F0> 
to <F25>14<F0>. Attach the <F25>TextstrTSD_t<F0> structure to the <F25>info
<F0> field of the <F25>ArDgObject_t<F0> structure.

<CtitleB>

<|,133>EqnTSD_t

<Cstuff>

typedef struct eqn_tsd_t <HR>
{<HR>
<Tab>float<Tab><Tab><Tab>x, y;<HR>
<Tab>char<Tab><Tab><Tab>*font;<HR>
<Tab>shar<Tab><Tab><Tab>*text;<HR>
} EqnTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		133,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
x, y

<Cpara>

The coordinates of the top left corner of the equation diagram, in 
inches from the top left corner of the frame or header/footer.

<CtitleCns>

font

<Cpara>

The generic font type such as <F25>wst:dutch12<F0> for a 12 point 
Thames font. The generic fonts are not documented. Experiment by generating 
ASCII markup documents with TPS to find the font strings that you 
want.

<CtitleCns>

text

<Cpara>

The text of the equation. This text is not documented, but it is preserved 
when reading and writing documents.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		133,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
An <F26>equation<F0> is kept as an uninterpreted string of text. The 
client may create equations, or try to interpret them, but they are 
not broken down any further by AR.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for an equation, set the <F25>type 
<F0>to <F25>dg_EQN<F0> and set the <F25>version<F0> to <F25>8<F0>. 
Attach the <F25>EqnTSD_t<F0> structure to the <F25>info<F0> field 
of the <F25>ArDgObject_t<F0> structure.

<CtitleB>

<|,134>EditStateTSD_t

<Cstuff>

typedef struct edit_state_tsd_t <HR>
{<HR>
<Tab>short<Tab><Tab>fill;<Tab><Tab><Tab>/* default fill pattern */<HR>
<Tab>short<Tab><Tab>width;<Tab><Tab>/* default border width */<HR>
<Tab>short<Tab><Tab>gravity;<Tab><Tab>/* if TRUE, align via gravity 
*/<HR>
<Tab>float<Tab><Tab>gravrad;<Tab><Tab>/* current gravity radius */<HR>
<Tab>short<Tab><Tab>detent;<Tab><Tab>/* if TRUE, detent active */<HR>
<Tab>float<Tab><Tab>angle;<Tab><Tab>/* detent angle */<HR>
<Tab>short<Tab><Tab>pattern;<Tab><Tab>/* dash pattern */<HR>
<Tab>short<Tab><Tab>zoom;   /* if TRUE, zoom enabled */<HR>
<Tab>float<Tab><Tab>zoomlev;  /* zoom level */<HR>
<Tab>float<Tab><Tab>xshift, yshift; /* graph relocation (deltas) */<HR>
<Tab>short<Tab><Tab>scale;   /* if TRUE, input scaling in effect */<HR>
<Tab>float<Tab><Tab>scalefact;  /* input scale factor */<HR>
<Tab>short<Tab><Tab>fcolor;   /* default fill color */<HR>
<Tab>short<Tab><Tab>ftrans;   /* default fill transparency */<HR>
<Tab>short<Tab><Tab>ecolor;   /* default edge color */<HR>
<Tab>short<Tab><Tab>etrans;   /* default edge transparency */<HR>
<Tab>float<Tab><Tab>textangle;  /* default text angle */<HR>
<Tab>short<Tab><Tab>tcolor;   /* default text color */<HR>
 /* this portion is known as a GRID struct in OPS */<HR>
<Tab>short<Tab><Tab>display;  /* if TRUE, display */<HR>
<Tab>short<Tab><Tab>align;   /* if TRUE, align to grid */<HR>
<Tab>short<Tab><Tab>ontop;   /* if TRUE, grid on top (else bottom) 
*/<HR>
<Tab>float<Tab><Tab>minw;   /* minor horizontal interval */<HR>
<Tab>float<Tab><Tab>minh;   /* minor vertical interval */<HR>
<Tab>short<Tab><Tab>majw;   /* major horizontal interval */<HR>
<Tab>short<Tab><Tab>majh;   /* major vertical interval */<HR>
<Tab>short<Tab><Tab>type;   /* (version 8) grid type */<HR>
<Tab>float<Tab><Tab>mini;   /* (version 9) minor isometric interval 
*/<HR>
<Tab>short<Tab><Tab>maji;   /* (version 9) major isometric interval 
*/<HR>
} EditStateTSD_t;

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		134,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F26>Edit-state<F0> is structured like a diagramming object, but 
it is not one. It is state information about the diagram. There should 
be at most one per diagram. A client may alter or construct an edit-state.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for an edit state, set the <F25>type 
<F0>to <F25>dg_EDIT_STATE<F0> and set the <F25>version<F0> to <F25>15<F0>. 
Attach the <F25>EditStateTSD_t<F0> structure to the <F25>info<F0> 
field of the <F25>ArDgObject_t<F0> structure.

<Cpara>

This structure is not documented in the <F26>TPS File Formats<F0> 
reference manual. However, the builder of a filter does not need it. 
The end-user can use TPS to of a processed document. The <F25>ASCII 
Reader<F0> will maintain edit-state structures when reading or writing 
a document.

<CtitleB>

<|,135>SplineSegTSD_t (obsolete)

<Cstuff>

typedef struct spline_seg_tsd_t <HR>
{<HR>
<Tab>float<Tab><Tab>x1, y1;<HR>
<Tab>float<Tab><Tab>x2, y2;<HR>
<Tab>short<Tab><Tab>color;<HR>
<Tab>short<Tab><Tab>trans;<HR>
<Tab>short<Tab><Tab>width;<HR>
<Tab>short<Tab><Tab>pattern;<HR>
} SplineSegTSD_t;

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		135,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
This object is obsolete. Clients should not create it, and they will 
probably never see it. The identifier is <F25>dg_SPLINE_SEG<F0>.

<CtitleB>

<|,136>VectorListTSD_t

<Cstuff>

typedef struct hex_list_t <HR>
{<HR>
<Tab>struct hex_list_t<Tab><Tab>*next;<HR>
<Tab>long <Tab><Tab><Tab><Tab>no_pairs;<HR>
<Tab>HEX_t<Tab><Tab><Tab><Tab>*data;<HR>
} HexList_t;

<Cstuff>

typedef struct vector_list_tsd_t <HR>
{<HR>
<Tab>short<Tab><Tab><Tab><Tab>color;<HR>
<Tab>short<Tab><Tab><Tab><Tab>trans;<HR>
<Tab>float<Tab><Tab><Tab><Tab>xo, yo;<HR>
<Tab>float<Tab><Tab><Tab><Tab>xh, yh;<HR>
<Tab>float<Tab><Tab><Tab><Tab>xv, yv;<HR>
<Tab>HexList_t<Tab><Tab><Tab>*list;<HR>
} VectorListTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		136,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
color

<Cpara>

Color of the lines in the drawing.

<CtitleCns>

trans

<Cpara>

Line transparency.

<CtitleCns>

(xo, yo), (xy, yh), (xv, yv)

<Cpara>

The top left, top right, and bottom left coordinates of the bounding 
parallelogram.

<CtitleCns>

list

<Cpara>

The vector data.

<Cpara>

<F25>no_pairs<F0>. The number of (x, y) coordinate pairs. Maximum 
per vector set is 128.

<Cpara>

<F25>data<F0>. The coordinate pairs.

<CtitleCns>

list

<Cpara>

The <F25>HEX_t<F0> structure is defined in the section on <F26>image<F0> 
objects (page <Ref, Page #, Page Value = 142, Tag = image>. ).

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		136,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
A <F26>vector-list<F0> is used to import CAD/CAM drawings. See the <F26>File 
Formats <F0>reference manual for more details.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for a vector, set the <F25>type <F0>to 
<F25>dg_VECTORS<F0> and set the <F25>version<F0> to <F25>9<F0>. Attach 
the <F25>VectorListTSD_t<F0> structure to the <F25>info<F0> field 
of the <F25>ArDgObject_t<F0> structure.

<CtitleB>

<|,137>EpsTSD_t

<Cstuff>

typedef struct hex_list_t <HR>
{<HR>
<Tab>struct hex_list_t<Tab><Tab>*next;<HR>
<Tab>long <Tab><Tab><Tab><Tab>no_pairs;<HR>
<Tab>HEX_t<Tab><Tab><Tab><Tab>*data;<HR>
} HexList_t;

<Cstuff>

typedef struct eps_tsd_t <HR>
{<HR>
<Tab>float<Tab><Tab><Tab>xo, yo;<HR>
<Tab>float<Tab><Tab><Tab>xh, yh;<HR>
<Tab>float<Tab><Tab><Tab>xv, yv;<HR>
<Tab>float<Tab><Tab><Tab>llx, lly;<HR>
<Tab>float<Tab><Tab><Tab>urx, ury;<HR>
<Tab>ArDgObject_t<Tab>*display_obj;<HR>
<Tab>HexList_t<Tab><Tab>*list;<HR>
} EpsTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		137,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
xo, yo

<Cpara>

The coordinates for the upper left corner of the Encapsulated PostScript 
image, as inches from the upper left corner of the frame or header/footer.

<CtitleCns>

xh, yh

<Cpara>

The coordinates for the upper right corner of the Encapsulated PostScript 
image, as inches from the upper left corner of the frame or header/footer.

<CtitleCns>

xv, yv

<Cpara>

The coordinates for the lower left corner of the Encapsulated PostScript 
image, as inches from the upper left corner of the frame or header/footer.

<CtitleCns>

llx, lly

<Cpara>

The coordinates for the lower left corner of the original bounding 
box in the Encapsulated PostScript file, as points.

<CtitleCns>

urx, ury

<Cpara>

The coordinates for the upper right corner of the original bounding 
box in the Encapsulated PostScript file, as points.

<CtitleCns>

display_obj

<Cpara>

The diagram used to indicate an Encapsulated PostScript image. Because 
TPS does not display Encapsulated PostScript, TPS needs a surrogate 
for display. TPS uses a grey filled parallelogram with the same dimensions 
as the image (the coordinates <F25>xo, yo, xy, yh, xv, yv<F0>).

<CtitleCns>

list

<Cpara>

The <F25>HEX_t<F0> structure is defined in the section on <F26>image<F0> 
objects (page <Ref, Page #, Page Value = 142, Tag = image>. ).

<CtitleCdesc>

<|,138>
<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		138,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
Encapsulated postscript holds PostScript images. See the <F26>File 
Formats <F0>reference manual for more details.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for encapsulated PostScript, 
set the <F25>type <F0>to <F25>dg_EPS<F0> and set the <F25>version<F0> 
to <F25>5<F0>. Attach the <F25>VectorListTSD_t<F0> structure to the <F25>info
<F0> field of the <F25>ArDgObject_t<F0> structure.

<titleA,
	Begin New Page =		yes>

<|,139>Structure for Charts

<rule:Adot>

<Tab.>

<paraAT>

This section describes the markup for charts. Charts are similar to 
the other diagramming objects in their linkage to frames and other 
diagramming objects.

<CtitleB>

<|,140>ChartTSD_t

<Cstuff>

typedef enum ct_record_id_e <HR>
{<HR>
 v, t, f, g, h, j, m, b, w, l, lo, x, y, p, r, D, Dx, F, G, C, P, 
T, L, O, E, W<HR>
} CtRecordId_e;

<Cstuff>

typedef struct <HR>
{<HR>
<Tab>double<Tab><Tab><Tab><Tab>val;<HR>
<Tab>short<Tab><Tab><Tab><Tab>dig;<HR>
} CT_VALUE ;

<Cstuff>

typedef CT_VALUE CtData_t;

<Cstuff>

typedef struct ct_value_t <HR>
{<HR>
<Tab>union <HR>
<Tab>{<HR>
<Tab><Tab>long<Tab><Tab><Tab>ival;<HR>
<Tab><Tab>CtData_t<Tab><Tab>cval;<HR>
<Tab><Tab>double<Tab><Tab><Tab>fval;<HR>
<Tab><Tab>shar<Tab><Tab><Tab>*pval;<HR>
<Tab>} val;<HR>
} CtValue_t;

<Cstuff>

typedef struct ct_field_t <HR>
{<HR>
<Tab>struct ct_field_t<Tab><Tab>*next;<HR>
<Tab>CtValue_t<Tab><Tab><Tab>*value;<HR>
} CtField_t;

<Cstuff>

typedef struct ct_record_t <HR>
{<HR>
<Tab>struct ct_record_t<Tab>*next;<HR>
<Tab>CtRecordId_e<Tab><Tab>id;<HR>
<Tab>CtField_t<Tab><Tab><Tab>*field;<HR>
} CtRecord_t;

<Cstuff>

typedef struct chart_tsd_t <HR>
{<HR>
<Tab>float<Tab><Tab><Tab><Tab>x1, y1;<HR>
<Tab>float<Tab><Tab><Tab><Tab>x2, y2;<HR>
<Tab>char<Tab><Tab><Tab><Tab>*font;<HR>
<Tab>short<Tab><Tab><Tab><Tab>version;<HR>
<Tab>CtRecord_t<Tab><Tab><Tab>*record;<HR>
} ChartTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		140,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
x1, y1, x2, y2

<Cpara>

The coordinates of the upper left and lower right corners of the chart, 
in inches from the upper left corner of the frame or header/footer.

<CtitleCns>

<|,141>font

<Cpara>

The generic font type such as <F25>wst:dutch12<F0> for a 12 point 
Thames font. The generic fonts are not documented. Experiment by generating 
ASCII markup documents with TPS to find the font strings that you 
want. The default value is <F25>wst:dutch10<F0>. 

<CtitleCns>

version

<Cpara>

Chart version. Set to <F25>6<F0>.

<CtitleCns>

record

<Cpara>

A list of records, each identified by its <F25>id<F0> field. The records 
are linked with the <F25>next<F0> field. Each record has a linked 
list of fields. Each field holds a value in the <F25>CtValue_t<F0> 
structure according to its datatype. 

<Cpara>

The <F25>cval<F0> field is used only for chart data rows; it specifies 
the value and the number of digits of display precision (no effect 
on value precision) through the <F25>val<F0> and <F25>dig<F0> fields.

<Cpara>

The possible record type codes are enumerated in <F25>CtRecordId_e<F0>.

<Cpara>

Refer to the section <F26>ASCII Format for Charts<F27> <F0>in the <F26>TPS 
File Formats <F0>document for a description of the content and meaning 
of each record.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		141,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The chart diagramming object is used to represent pie, line, and bar 
graphs.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for a chart, set the <F25>type <F0>to 
<F25>dg_CHART<F0> and set the <F25>version<F0> to <F25>5<F0>. Attach 
the <F25>ChartTSD_t<F0> structure to the <F25>info<F0> field of the <F25>ArDgOb
ject_t<F0> structure.

<titleA,
	Begin New Page =		yes>

<|,142><Autonum, markers, 1, Tagname = image>Structure for Images

<rule:Adot>

<Tab.>

<paraAT>

This section describes the markup for line-art and continuous tone 
(contone) images. These are special diagramming objects, but they 
are similar to other diagramming objects in their linkage to frames 
and other diagramming objects.

<CtitleB>

<|,143>RASTER_t

<Cstuff>

typedef struct hex_t <HR>
{<HR>
<Tab>long<Tab><Tab><Tab><Tab>size;<HR>
<Tab>unsigned char<Tab><Tab>*data;<HR>
} HEX_t;

<Cstuff>

typedef struct raster_t <HR>
{<HR>
<Tab>long<Tab><Tab><Tab><Tab>id;<HR>
<Tab>bool<Tab><Tab><Tab><Tab>reference;<HR>
<Tab>short<Tab><Tab><Tab><Tab>xh, yh;<HR>
<Tab>short<Tab><Tab><Tab><Tab>xv, yv;<HR>
<Tab>short<Tab><Tab><Tab><Tab>x1, y1;<HR>
<Tab>short<Tab><Tab><Tab><Tab>x2, y2;<HR>
<Tab>short<Tab><Tab><Tab><Tab>map_size;<HR>
<Tab>HEX_t<Tab><Tab><Tab><Tab>*map;<HR>
<Tab>short<Tab><Tab><Tab><Tab>screenx;<HR>
<Tab>short<Tab><Tab><Tab><Tab>screeny;<HR>
<Tab>HEX_t<Tab><Tab><Tab><Tab>*screen;<HR>
<Tab>short<Tab><Tab><Tab><Tab>w;<HR>
<Tab>short<Tab><Tab><Tab><Tab>h;<HR>
<Tab>short<Tab><Tab><Tab><Tab>d;<HR>
<Tab>short<Tab><Tab><Tab><Tab>format;<HR>
<Tab>long<Tab><Tab><Tab><Tab>size;<HR>
<Tab>HEX_t<Tab><Tab><Tab><Tab>*raster;<HR>
} RASTER_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		143,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
id

<Cpara>

The image identification number. The same image can be displayed many 
times, with different croppings, transformations, etc. Reference to 
the <F25>id<F0> value instead of repeating the data saves space.

<CtitleCns>

reference

<Cpara>

YES means that the <F25>id<F0> is a reference to an image defined 
in another structure. If this field is set to YES, the remaining fields 
can be ignored.

<CtitleCns>

xh, yh, xv, yv, x1, y1, x2, y2, map_size, map, screenx, screeny, screen

<Cpara>

These fields are for the optional display raster discussed under <F25>ImageTSD_
t <F0>on page <Ref, Page #, Page Value = 146, Tag = "display raster"> 
. When the <F25>RASTER_t<F0> structure is used for the optional display 
raster, the <F25>id <F0>field should be set to the identifier of the 
original raster image and the <F25>reference<F0> field should be set 
to YES. Then TPS will fill in these fields.

<Cpara>

In the original raster image, the fields should be set as follows:

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>Set <F25>xh 
<F0>to <F25>w<F0> - 1.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>Set <F25>yv 
<F0>to <F25>h<F0> - 1.

<listempty1>

<|,144><"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>Set 
<F25>x2 <F0>to <F25>w<F0> - 1.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>Set <F25>y2
<F0> to <F25>h<F0> - 1.

<listempty1>

<"|:listempty1", Subcomponent = yes><F0><Tab><Tab><End Sub><F0>Set 
the remaining fields to 0 or NULL, depending on datatype.

<CtitleCns>

w

<Cpara>

Width of the image in pixels.

<CtitleCns>

h

<Cpara>

Height of the image in pixels.

<CtitleCns>

d

<Cpara>

Depth of the image. Use a depth of 1 for line-art and a depth of 8 
for contone images.

<CtitleCns>

format

<Cpara>

Set to 0 (uncompressed format). A value of 1 indicates compressed 
format, not described here. To force TPS to generate uncompressed 
images, set the Lisp variable <F26>im-compress-ascii<F27> <F0>to <F26>nil<F0> 
in the profile script.

<CtitleCns>

size

<Cpara>

The raster size in bytes. For uncompressed line<#1e>art images, this 
is

<figure>

 
<Frame,
	Name =			figure,
	Placement =		At Anchor,
	Width =			5 inches,
	Height =		Contents,
	Auto Edit =		yes,
	Diagram =
V6,
(g9,1,0
 (m8,1,12,0,0.04,clas10,2h\ left\ floor\ {{w+15}\ over\ 16}\ right\ floor)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0.186667,0,1,5,127,7,0,0,7,0,0,1,0.066667,
  0.066667,6,6,0,0.066667,6))>

<paraAT>

For continuous<#1e>tone images, the raster size in bytes is

<figure>

 
<Frame,
	Name =			figure,
	Placement =		At Anchor,
	Width =			5 inches,
	Height =		Contents,
	Auto Edit =		yes,
	Diagram =
V6,
(g9,1,0
 (m8,1,12,0,0,clas10,2h\ left\ floor\ {{w+1}\ over\ 2}\ right\ floor)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0.226667,0,1,5,127,7,0,0,7,0,0,1,0.066667,
  0.066667,6,6,0,0.066667,6))>

<para>

where <F26>w<F0> is the image width in pixels and <F26>h<F0> is the 
image height in pixels.

<CtitleCns>

raster

<Cpara>

The raster image.

<Cpara>

<F25>size<F0>. The number of bytes of data. Duplicate value from size 
above.

<Cpara>

<F25>data<F0>. The image. For line-art, each bit represents a pixel; 
0 represents black, and 1 represents white. For contone images, each 
byte represents a pixel intensity; 0 specifies black, and 255 specifies 
white.

<Cpara>

For contone art, first-to-last order in the data corresponds to left-to-right 
order in the scanline. For line art, most significant to least significant 
order in the data corresponds to left-to-right order in the scanline.

<Cpara,
	Allow Page Break After = no>

When representing each scanline, pad it to an even byte boundary. 
For example, an image 1 pixel wide and 2 pixels high would require 
two scanlines, each 2 bytes long.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		144,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The <F25>RASTER_t<F0> structure describes either a line-art or contone 
image.

<CtitleB>

<|,145>ImageTSD_t

<Cstuff>

typedef struct break_t <HR>
{<HR>
<Tab>struct break_t<Tab><Tab>*next;<HR>
<Tab>float<Tab><Tab><Tab><Tab>x;<HR>
<Tab>float<Tab><Tab><Tab><Tab>y;<HR>
} BREAK_t;

<Cstuff>

typedef struct image_tsd_t <HR>
{<HR>
<Tab>float<Tab><Tab><Tab><Tab>xo, yo;<HR>
<Tab>float<Tab><Tab><Tab><Tab>xh, yh;<HR>
<Tab>float<Tab><Tab><Tab><Tab>xv, yv;<HR>
<Tab>short<Tab><Tab><Tab><Tab>cx1, cy1;<HR>
<Tab>short<Tab><Tab><Tab><Tab>cx2, cy2;<HR>
<Tab>short<Tab><Tab><Tab><Tab>num_breaks;<HR>
<Tab>BREAK_t<Tab><Tab><Tab>*break_list;<HR>
<Tab>short<Tab><Tab><Tab><Tab>color;<HR>
<Tab>short<Tab><Tab><Tab><Tab>trans;<HR>
<Tab>short<Tab><Tab><Tab><Tab>submenu;<HR>
<Tab>float<Tab><Tab><Tab><Tab>origw, origh;<HR>
<Tab>RASTER_t<Tab><Tab><Tab>*orig;<HR>
<Tab>RASTER_t<Tab><Tab><Tab>*disp;<HR>
} ImageTSD_t;

<CtitleCfields>

<Frame,
	Name =			CsideDfield,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		145,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Fields

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
(xo, yo), (xh, yh), (xv, yv)

<Cpara>

The coordinates of the transformed location of the upper left, upper 
right, and lower left corners of the original (uncropped) image in 
inches from the upper-left corner of the frame or header/footer.

<CtitleCns>

(cx1, cy1), (cx2, cy2)

<Cpara>

In the (pixel) coordinate system of the original image, these coordinates 
specify the upper left and lower right corners of the cropped image. 
For example, if coordinates of (13, 0), (1103, 1132) are specified 
for a pixel image 1104 pixels wide and 1136 pixels high, then 13 pixels 
are cropped from the left side and 3 pixels are cropped from the bottom.

<CtitleCns>

num_breaks

<Cpara>

The number of breaks in the contrast curve (specified in <F25>break_list<F0>). 
A value of zero indicates the identity mapping in the contrast curve.

<CtitleCns>

break_list

<Cpara>

Lists the break points on the contrast curve. The first point must 
have an <F25>x<F0> coordinate of 0 and the last point must have an <F25>x<F0> 
coordinate of 100. 0 represents white and 100 represents black. The <F25>x 
<F0>color is mapped to the <F25>y<F0> color for display. The values 
for <F25>x<F0> should be monotonically increasing through the list.

<Cpara>

<|,146><F25>next<F0>. The next break point.

<Cpara>

<F25>x<F0>. The original color. A value between 0 and 100.

<Cpara>

<F25>y<F0>. The transformed color. A value between 0 and 100.

<CtitleCns>

color

<Cpara>

Black portions of the image display in this color. Use the values 
from the color description structure: <F25>Color_info_t<F0>.

<CtitleCns>

trans

<Cpara>

Define the transparency of the image. Set to 0 (image is visible) 
or 127 (image is invisible).

<CtitleCns>

submenu

<Cpara>

The default image editor. There are three image subeditors. Set this 
field to 0.

<CtitleCns>

origw

<Cpara>

Original width of the image before cropping, in inches.

<CtitleCns>

origh

<Cpara>

Original height of the image before cropping, in inches.

<CtitleCns>

orig

<Cpara>

A description of the original raster image before cropping and transformations. 
If this image is a duplicate of an existing image (before cropping 
and transformations), space can be saved by setting the <F25>RASTER_t<F0>'s 
<F25>id<F0> field to the original image's identifier and by setting 
the <F25>reference <F0>field to YES.

<CtitleCns>

<Autonum, markers, 1, Tagname = "display raster">disp

<Cpara>

A description of the display information for the raster. Set the <F25>reference
<F0> field to YES and set the <F25>id<F0> field to the identifier 
given in the <F25>orig<F0> description. TPS will calculate the required 
information.

<CtitleCdesc>

<Frame,
	Name =			CsideDdesc,
	Placement =		Overlay,
	Horizontal Alignment =	Right + 1.50 inches,
	Vertical Alignment =	Top,
	Horizontal Reference =	Left Page Margin,
	Vertical Reference =	Anchor,
	Width =			1.50 inches,
	Height =		0.30 inches,
	Auto Edit =		yes,
	Page # =		146,
	Diagram =
V6,
(g9,1,0
 (T12,1,12,0,0,5,127,5,7,127,8,0,3,
<!Page, Width = 1.48 inches, Height = 0.139 inches,
	Revision Bar Placement = Left>
<CtitleD>

Usage

<End Text>)
 (E15,0,0,5,8,0,0.053333,1,15,0,0,1,0,0,0,1,5,127,7,0,0,7,0,0,1,0.066667,0.06666
  7,6,6,0,0.066667,6))>
The image object represents a line-art image or a continuous-tone 
(contone) image.

<Cpara>

In the <F25>ArDgObjects_t <F0>structure for an image, set the <F25>type <F0>to 
<F25>dg_IMAGE<F0> and set the <F25>version<F0> to <F25>15<F0>. Attach 
the <F25>ImageTSD_t<F0> structure to the <F25>info<F0> field of the <F25>ArDgOb
ject_t<F0> structure.

