.de FH
.(b
.fi
.na
.ti -1.0i
\\$1
.ti -1.0i
\\$2
.)b
..
.he ''XGKS C Language Binding''
.fo ''- % -''
.ps 10
.ls 1
.in +1.0i
.FH "ACCUMULATE TRANSFORMATION MATRIX" "Gint gaccumtran (Gfloat segtran[2][3], Gpoint *ppoint, Gpoint *pshift, Gfloat angle, Gpoint *pscale, Gcsw coord, Gfloat result[2][3]);"
.FH "ACTIVATE WORKSTATION" "Gint gactivatews (Gint wsid);"
.FH "ASSOCIATE SEGMENT WITH WORKSTATION" "Gint gassocsegws (Gint wsid, Gint seg_id);"
.FH "AWAIT EVENT" "Gint gawaitevent (Gfloat timeout, Gevent *event);"
.FH "CELL ARRAY" "Gint gcellarray (Grect *rect, Gipoint *dim, Gint row, Gint *color);"
.FH "CLEAR WORKSTATION" "Gint gclearws (Gint wsid, Gclrflag control_flag);"
.FH "CLOSE GKS" "Gint gclosegks (void);"
.FH "CLOSE SEGMENT" "Gint gcloseseg (void);"
.FH "CLOSE WORKSTATION" "Gint gclosews (Gint wsid);"
.FH "COPY SEGMENT TO WORKSTATION" "Gint gcopysegws (Gint wsid, Gint seg_id);"
.FH "CREATE SEGMENT" "Gint gcreateseg (Gint name);"
.FH "DEACTIVATE WORKSTATION" "Gint gdeactivatews (Gint wsid);"
.FH "DELETE SEGMENT" "Gint gdelseg (Gint name);"
.FH "DELETE SEGMENT FROM WORKSTATION" "Gint gdelsegws (Gint wsid, Gint name);"
.FH "EMERGENCY CLOSE GKS" "Gint gemergencyclosegks (void);"
.FH "ERROR HANDLING" "Gint gerrorhand (Gint errnum, Gchar *funcname, Gfile *perrfile);"
.FH "ERROR LOGGING" "Gint gerrorlog (Gint errnum, Gchar *funcname, Gfile *perrfile);"
.FH "ESCAPE SET REDRAW NOTIFY" "Gint gescredrawnotify (Gint wsid, Gint (*funcp)());"
.FH "ESCAPE SET COLOR PLANE MASK" "Gint gescsetcolormask (Gint wsid, unsigned long mask);"
.FH "ESCAPE SET DEVICE COORDINATE SIZE" "Gint gescsetdcsize (Gint wsid, Gpoint size);"
.FH "ESCAPE SET STORE OUTPUT PRIMITIVES" "Gint gescstoreprimi (Gint wsid, Gstore store);"
.FH "EVALUATE TRANSFORMATION MATRIX" "Gint gevaltran (Gpoint *ppoint, Gpoint *pshift, Gfloat angle, Gpoint *pscale, Gcsw coord, Gfloat result[2][3]);"
.FH "FILL AREA" "Gint gfillarea (Gint num_pts, Gpoint *pts);"
.FH "FLUSH DEVICE EVENTS" "Gint gflushevents (Gint wsid, Giclass class, Gint dev);"
.FH "GET CHOICE" "Gint ggetchoice (Gchoice *response);"
.FH "GET ITEM TYPE FROM GKSM" "Gint ggetgksm (Gint wsid, Ggksmit *result);"
.FH "GET LOCATOR" "Gint ggetloc (Gloc *response);"
.FH "GET PICK" "Gint ggetpick (Gpick *response);"
Gint ggetstring (Gchar *response);"
.FH "GET STROKE" "Gint ggetstroke (Gstroke *response);"
.FH "GET VALUATOR" "Gint ggetval (Gfloat *response);"
.FH "INITIALISE CHOICE" "Gint ginitchoice (Gint wsid, Gint dev, Gchoice *init, Gint pet, Glimit *area, Gchoicerec *record);"
.FH "INITIALISE LOCATOR" "Gint ginitloc (Gint wsid, Gint dev, Gloc *init, Gint pet, Glimit *area, Glocrec *record);"
.FH "INITIALISE PICK" "Gint ginitpick (Gint wsid, Gint dev, Gpick *init, Gint pet, Glimit *area, Gpickrec *record);"
.FH "INITIALISE STRING" "Gint ginitstring (Gint wsid, Gint dev, Gchar *init, Gint pet, Glimit *area, Gstringrec *record);"
.FH "INITIALISE STROKE" "Gint ginitstroke (Gint wsid, Gint dev, Gstroke *init, Gint pet, Glimit *area, Gstrokerec *record);"
.FH "INITIALISE VALUATOR" "Gint ginitval (Gint wsid, Gint dev, Gfloat init, Gint pet, Glimit *area, Gvalrec *record);"
.FH "INQUIRE SET OF ACTIVE WORKSTATIONS" "Gint ginqactivews (Gintlist *wsids);"
.FH "INQUIRE SET OF ASSOCIATED WORKSTATIONS" "Gint ginqassocws (Gint seg, Gintlist *asswk);"
.FH "INQUIRE LIST OF AVAILABLE WORKSTATION TYPES" "Gint ginqavailwstypes (Gstrlist *wstypes);"
.FH "INQUIRE CHOICE DEVICE STATE" "Gint ginqchoicest (Gint wsid, Gint dev, Gchoicest *state);"
.FH "INQUIRE CLIPPING INDICATOR" "Gint ginqclip (Gcliprec *clipping);"
.FH "INQUIRE COLOR FACILITIES" "Gint ginqcolorfacil (Gchar *ws_type, Gcofac *fac);"
.FH "INQUIRE LIST OF COLOR INDICES" "Gint ginqcolorindices (Gint wsid, Gintlist *indices);"
.FH "INQUIRE COLOR REPRESENTATION" "Gint ginqcolorrep (Gint wsid, Gint idx, Gqtype type, Gcobundl *rep);"
.FH "INQUIRE CURRENT NORMALIZATION TRANSFORMATION NUMBER" "Gint ginqcurntrannum (Gint *tran);"
.FH "INQUIRE CURRENT PICK IDENTIFIER VALUE" "Gint ginqcurpickid (Gint *pickid);"
.FH "INQUIRE DEFAULT CHOICE DEVICE DATA" "Gint ginqdefchoice (Gchar *type, Gint dev, Gdefchoice *data);"
.FH "INQUIRE DEFAULT DEFERRAL STATE VALUES" "Gint ginqdefdeferst (Gchar *ws_type, Gdefer *def);"
.FH "INQUIRE DEFAULT LOCATOR DEVICE DATA" "Gint ginqdefloc (Gchar *type, Gint dev, Gdefloc *data);"
.FH "INQUIRE DEFAULT PICK DEVICE DATA" "Gint ginqdefpick (Gchar *type, Gint dev, Gdefpick *data);"
.FH "INQUIRE DEFAULT STRING DEVICE DATA" "Gint ginqdefstring (Gchar *type, Gint dev, Gdefstring *data);"
.FH "INQUIRE DEFAULT STROKE DEVICE DATA" "Gint ginqdefstroke (Gchar *type, Gint dev, Gdefstroke *data);"
.FH "INQUIRE DEFAULT VALUATOR DEVICE DATA" "Gint ginqdefval (Gchar *type, Gint dev, Gdefval *data);"
.FH "INQUIRE DISPLAY SURFACE SIZE" "Gint ginqdisplayspacesize (Gchar *ws_type, Gdspsize *dspsz);"
.FH "INQUIRE FILL AREA FACILITIES" "Gint ginqfillfacil (Gchar *ws_type, Gflfac *fac);"
.FH "INQUIRE LIST OF FILL AREA INDICES" "Gint ginqfillindices (Gint wsid, Gintlist *idxlist);"
.FH "INQUIRE FILL AREA REPRESENTATION" "Gint ginqfillrep (Gint wsid, Gint idx, Gqtype type, Gflbundl *rep);"
.FH "INQUIRE CURRENT INDIVIDUAL ATTRIBUTE VALUES" "Gint ginqindividualattr (Gindattr *indivattr);"
.FH "INQUIRE INPUT QUEUE OVERFLOW" "Gint ginqinputoverflow (Gqueue *overflow);"
.FH "INQUIRE LEVEL OF GKS" "Gint ginqlevelgks (Glevel *lev);"
.FH "INQUIRE POLYLINE FACILITIES" "Gint ginqlinefacil (Gchar *ws_type, Glnfac *fac);"
.FH "INQUIRE LIST OF POLYLINE INDICES" "Gint ginqlineindices (Gint wsid, Gintlist *idxlist);"
.FH "INQUIRE POLYLINE REPRESENTATION" "Gint ginqlinerep (Gint wsid, Gint idx, Gqtype type, Glnbundl *rep);"
.FH "INQUIRE LOCATOR DEVICE STATE" "Gint ginqlocst (Gint wsid, Gint dev, Gqtype type, Glocst *state);"
.FH "INQUIRE POLYMARKER FACILITIES" "Gint ginqmarkerfacil (Gchar *ws_type, Gmkfac *fac);"
.FH "INQUIRE LIST OF POLYMARKER INDICES" "Gint ginqmarkerindices (Gint wsid, Gintlist *idxlist);"
.FH "INQUIRE POLYMARKER REPRESENTATION" "Gint ginqmarkerrep (Gint wsid, Gint idx, Gqtype type, Gmkbundl *rep);"
.FH "INQUIRE MAXIMUM NORMALIZATION TRANSFORMATION NUMBER" "Gint ginqmaxntrannum (Gint *maxtran);"
.FH "INQUIRE MAXIMUM LENGTH OF WORKSTATION STATE TABLES" "Gint ginqmaxwssttables (Gchar *ws_type, Gwstables *tables);"
.FH "INQUIRE DYNAMIC MODIFICATION OF SEGMENT ATTRIBUTES" "Gint ginqmodsegattr (Gchar *ws_type, Gmodseg *dyn);"
.FH "INQUIRE DYNAMIC MODIFICATION OF WORKSTATION ATTRIBUTES" "Gint ginqmodwsattr (Gchar *ws_type, Gmodws *dyn);"
.FH "INQUIRE MORE SIMULTANEOUS EVENTS" "Gint ginqmoreevents (Gsimultev *events);"
.FH "INQUIRE NAME OF OPEN SEGMENT" "Gint ginqnameopenseg (Gint *seg);"
.FH "INQUIRE NORMALIZATION TRANSFORMATION" "Gint ginqntran (Gint num, Gwstran *tran);"
.FH "INQUIRE LIST OF NORMALIZATION TRANSFORMATION NUMBERS" "Gint ginqntrannum (Gintlist *tranlist);"
.FH "INQUIRE NUMBER OF AVAILABLE LOGICAL INPUT DEVICES" "Gint ginqnumavailinput (Gchar *ws_type, Gnumdev *num);"
.FH "INQUIRE NUMBER OF SEGMENT PRIORITIES SUPPORTED" "Gint ginqnumsegpri (Gchar *ws_type, Gint *numpri);"
.FH "INQUIRE SET OF OPEN WORKSTATIONS" "Gint ginqopenws (Gintlist *wsids);"
.FH "INQUIRE OPERATING STATE VALUE" "Gint ginqopst (Gos *state);"
.FH "INQUIRE PATTERN FACILITIES" "Gint ginqpatfacil (Gchar *ws_type, Gint *fac);"
.FH "INQUIRE LIST OF PATTERN INDICES" "Gint ginqpatindices (Gint wsid, Gintlist *idxlist);"
.FH "INQUIRE PATTERN REPRESENTATION" "Gint ginqpatrep (Gint wsid, Gint idx, Gqtype type, Gptbundl *rep);"
.FH "INQUIRE PICK DEVICE STATE" "Gint ginqpickst (Gint wsid, Gint dev, Gqtype type, Gpickst *state);"
.FH "INQUIRE PIXEL" "Gint ginqpixel (Gint wsid, Gpoint *ppoint, Gint *pix);"
.FH "INQUIRE PIXEL ARRAY" "Gint ginqpixelarray (Gint wsid, Gpoint *point, Gipoint *dimen, Gpxarray *pxarr);"
.FH "INQUIRE PIXEL ARRAY DIMENSIONS" "Gint ginqpixelarraydim (Gint wsid, Grect *rect, Gipoint *dim);"
.FH "INQUIRE PREDEFINED COLOR REPRESENTATION" "Gint ginqpredcolorrep (Gchar *ws_type, Gint index, Gcobundl *rep);"
.FH "INQUIRE PREDEFINED FILL AREA REPRESENTATION" "Gint ginqpredfillrep (Gchar *ws_type, Gint idx, Gflbundl *rep);"
.FH "INQUIRE PREDEFINED POLYLINE REPRESENTATION" "Gint ginqpredlinerep (Gchar *ws_type, Gint idx, Glnbundl *rep);"
.FH "INQUIRE PREDEFINED POLYMARKER REPRESENTATION" "Gint ginqpredmarkerrep (Gchar *ws_type, Gint idx, Gmkbundl *rep);"
.FH "INQUIRE PREDEFINED PATTERN REPRESENTATION" "Gint ginqpredpatrep (Gchar *ws_type, Gint idx, Gptbundl *rep);"
.FH "INQUIRE PREDEFINED TEXT REPRESENTATION" "Gint ginqpredtextrep (Gchar *ws_type, Gint idx, Gtxbundl *rep);"
.FH "INQUIRE CURRENT PRIMITIVE ATTRIBUTE VALUES" "Gint ginqprimattr (Gpriattr *primattr);"
.FH "INQUIRE SEGMENT ATTRIBUTES" "Gint ginqsegattr (Gsegattr *segattr);"
.FH "INQUIRE SET OF SEGMENT NAMES IN USE" "Gint ginqsegnames (Gintlist *segs);"
.FH "INQUIRE SET OF SEGMENT NAMES ON WORKSTATION" "Gint ginqsegnamesws (Gint wsid, Gintlist *segs);"
.FH "INQUIRE STRING DEVICE STATE" "Gint ginqstringst (Gint wsid, Gint dev, Gstringst *state);"
.FH "INQUIRE STROKE DEVICE STATE" "Gint ginqstrokest (Gint wsid, Gint dev, Gqtype type, Gstrokest *state);"
.FH "INQUIRE TEXT EXTENT" "Gint ginqtextextent (Gint wsid, Gpoint position, Gchar *string, Gextent *extent);"
.FH "INQUIRE TEXT FACILITIES" "Gint ginqtextfacil (Gchar *ws_type, Gtxfac *fac);"
.FH "INQUIRE LIST OF TEXT INDICES" "Gint ginqtextindices (Gint wsid, Gintlist *idxlist);"
.FH "INQUIRE TEXT REPRESENTATION" "Gint ginqtextrep (Gint wsid, Gint idx, Gqtype type, Gtxbundl *rep);"
.FH "INQUIRE VALUATOR DEVICE STATE" "Gint ginqvalst (Gint wsid, Gint dev, Gvalst *state);"
.FH "INQUIRE WORKSTATION CATEGORY" "Gint ginqwscategory (Gchar *ws_type, Gwscat *cat);"
.FH "INQUIRE WORKSTATION CLASSIFICATION" "Gint ginqwsclass (Gchar *ws_type, Gwsclass *class);"
.FH "INQUIRE WORKSTATION CONNECTIONS AND TYPE" "Gint ginqwsconntype (Gint wsid, Gwsct *ct);"
.FH "INQUIRE WORKSTATION DEFERRAL AND UPDATE STATES" "Gint ginqwsdeferupdatest (Gint wsid, Gwsdus *du);"
.FH "INQUIRE WORKSTATION MAXIMUM NUMBERS" "Gint ginqwsmaxnum (Gwsmax *maxws);"
.FH "INQUIRE WORKSTATION STATE" "Gint ginqwsst (Gint wsid, Gwsstate *state);"
.FH "INQUIRE WORKSTATION TRANSFORMATION" "Gint ginqwstran (Gint wsid, Gwsti *wstran);"
.FH "INSERT SEGMENT" "Gint ginsertseg (Gint seg_id, Gfloat segtran[2][3]);"
.FH "INTERPRET ITEM" "Gint ginterpret (Ggksmit *recInfo, Gchar *data);"
.FH "MESSAGE" "Gint gmessage (Gint wsid, Gchar *string);"
.FH "OPEN GKS" "Gint gopengks (Gfile *err_file, Glong memory);"
.FH "OPEN WORKSTATION" "Gint gopenws (Gint wsid, Gchar *connection, Gchar *ws_type);"
.FH "POLYLINE" "Gint gpolyline (Gint num_pts, Gpoint *pts);"
.FH "POLYMARKER" "Gint gpolymarker (Gint num_pts, Gpoint *pts);"
.FH "READ ITEM FROM GKSM" "Gint greadgksm (Gint wsid, Gint length, Gchar *record);"
.FH "REDRAW ALL SEGMENTS ON WORKSTATION" "Gint gredrawsegws (Gint wsid);"
.FH "RENAME SEGMENT" "Gint grenameseg (Gint old, Gint new);"
.FH "REQUEST CHOICE" "Gint greqchoice (Gint wsid, Gint dev, Gchoice *response);"
.FH "REQUEST LOCATOR" "Gint greqloc (Gint wsid, Gint dev, Gqloc *response);"
.FH "REQUEST PICK" "Gint greqpick (Gint wsid, Gint dev, Gpick *response);"
.FH "REQUEST STRING" "Gint greqstring (Gint wsid, Gint dev, Gqstring *response);"
.FH "REQUEST STROKE" "Gint greqstroke (Gint wsid, Gint dev, Gqstroke *response);"
.FH "REQUEST VALUATOR" "Gint greqval (Gint wsid, Gint dev, Gqval *response);"
.FH "SAMPLE CHOICE" "Gint gsamplechoice (Gint wsid, Gint dev, Gchoice *response);"
.FH "SAMPLE LOCATOR" "Gint gsampleloc (Gint wsid, Gint dev, Gloc *response);"
.FH "SAMPLE PICK" "Gint gsamplepick (Gint wsid, Gint dev, Gpick *response);"
.FH "SAMPLE STRING" "Gint gsamplestring (Gint wsid, Gint dev, Gchar *response);"
.FH "SAMPLE STROKE" "Gint gsamplestroke (Gint wsid, Gint dev, Gstroke *response);"
.FH "SAMPLE VALUATOR" "Gint gsampleval (Gint wsid, Gint dev, Gfloat *response);"
.FH "SELECT NORMALIZATION TRANSFORMATION" "Gint gselntran (Gint trans);"
.FH "SET ASPECT SOURCE FLAGS" "Gint gsetasf (Gasfs *asf);"
.FH "SET CHARACTER EXPANSION FACTOR" "Gint gsetcharexpan (Gfloat expansion);"
.FH "SET CHARACTER HEIGHT" "Gint gsetcharheight (Gfloat height);"
.FH "SET CHARACTER SPACING" "Gint gsetcharspace (Gfloat spacing);"
.FH "SET CHARACTER UP VECTOR" "Gint gsetcharup (Gpoint *up_vector);"
.FH "SET CHOICE MODE" "Gint gsetchoicemode (Gint wsid, Gint dev, Gimode mode, Gesw echo);"
.FH "SET CLIPPING INDICATOR" "Gint gsetclip (Gclip ind);"
.FH "SET COLOR REPRESENTATION" "Gint gsetcolorrep (Gint wsid, Gint idx, Gcobundl *rep);"
.FH "SET DEFERRAL STATE" "Gint gsetdeferst (Gint wsid, Gdefmode deferral_mode, Girgmode regen_mode);"
.FH "SET FILL AREA COLOR INDEX" "Gint gsetfillcolorind (Gint color);"
.FH "SET FILL AREA INDEX" "Gint gsetfillind (Gint idx);"
.FH "SET FILL AREA INTERIOR STYLE" "Gint gsetfillintstyle (Gflinter style);"
.FH "SET FILL AREA REPRESENTATION" "Gint gsetfillrep (Gint wsid, Gint idx, Gflbundl *rep);"
.FH "SET FILL AREA STYLE INDEX" "Gint gsetfillstyleind (Gint idx);"
.FH "SET POLYLINE COLOR INDEX" "Gint gsetlinecolorind (Gint idx);"
.FH "SET POLYLINE INDEX" "Gint gsetlineind (Gint idx);"
.FH "SET POLYLINE REPRESENTATION" "Gint gsetlinerep (Gint wsid, Gint idx, Glnbundl *rep);"
.FH "SET LINETYPE" "Gint gsetlinetype (Gint type);"
.FH "SET LINEWIDTH SCALE FACTOR" "Gint gsetlinewidth (Gfloat width);"
.FH "SET LOCATOR MODE" "Gint gsetlocmode (Gint wsid, Gint dev, Gimode mode, Gesw echo);"
.FH "SET POLYMARKER COLOR INDEX" "Gint gsetmarkercolorind (Gint color);"
.FH "SET POLYMARKER INDEX" "Gint gsetmarkerind (Gint idx);"
.FH "SET POLYMARKER REPRESENTATION" "Gint gsetmarkerrep (Gint wsid, Gint idx, Gmkbundl *rep);"
.FH "SET MARKER SIZE SCALE FACTOR" "Gint gsetmarkersize (Gfloat size);"
.FH "SET MARKER TYPE" "Gint gsetmarkertype (Gint type);"
.FH "SET PATTERN REPRESENTATION" "Gint gsetpatrep (Gint wsid, Gint idx, Gptbundl *rep);"
.FH "SET PICK IDENTIFIER" "Gint gsetpickid (Gint pick_id);"
.FH "SET PICK MODE" "Gint gsetpickmode (Gint wsid, Gint dev, Gimode mode, Gesw echo);"
.FH "SET SEGMENT ATTRIBUTES" "Gint gsetsegattr (Gint name, Gsegattr *segattr);"
.FH "SET STRING MODE" "Gint gsetstringmode (Gint wsid, Gint dev, Gimode mode, Gesw echo);"
.FH "SET STROKE MODE" "Gint gsetstrokemode (Gint wsid, Gint dev, Gimode mode, Gesw echo);"
.FH "SET TEXT ALIGNMENT" "Gint gsettextalign (Gtxalign *txalign);"
.FH "SET TEXT COLOR INDEX" "Gint gsettextcolorind (Gint color);"
.FH "SET TEXT FONT AND PRECISION" "Gint gsettextfontprec (Gtxfp *txfp);"
.FH "SET TEXT INDEX" "Gint gsettextind (Gint idx);"
.FH "SET TEXT PATH" "Gint gsettextpath (Gtxpath path);"
.FH "SET TEXT REPRESENTATION" "Gint gsettextrep (Gint wsid, Gint idx, Gtxbundl *bundle);"
.FH "SET VALUATOR MODE" "Gint gsetvalmode (Gint wsid, Gint dev, Gimode mode, Gesw echo);"
.FH "SET VIEWPORT" "Gint gsetviewport (Gint trans, Glimit *viewport);"
.FH "SET VIEWPORT INPUT PRIORITY" "Gint gsetviewportinputpri (Gint trans, Gint ref_trans, Gvpri priority);"
.FH "SET WINDOW" "Gint gsetwindow (Gint trans, Glimit *window);"
.FH "SET WORKSTATION VIEWPORT" "Gint gsetwsviewport (Gint wsid, Glimit *viewport);"
.FH "SET WORKSTATION WINDOW" "Gint gsetwswindow (Gint wsid, Glimit *window);"
.FH "TEXT" "Gint gtext (Gpoint *at, Gchar *string);"
.FH "UPDATE WORKSTATION" "Gint gupdatews (Gint wsid, Gregen regenflag);"
.FH "WRITE ITEM TO GKSM" "Gint gwritegksm (Gint wsid, Gint type, Gint length, Gchar *data);"
