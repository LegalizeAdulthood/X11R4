; group windows into dvrooms
;
;;File: dvrooms.gwm
;;Author: duanev@mcc.com (Duanev Voth)
;;Revision: 1.3 -- Nov 22 1989
;
; History:  1.0 -- Oct 18 1989	original
;	    1.1 -- Oct 26 1989	windows are placed back on the screen (in
;				iconic form) when a dvroom manager dies
;	    1.2 -- Nov 21 1989	use gwm-quiet
;	    1.3 -- Nov 22 1989  create rmgrs from wool (colas)
;
; dvrooms.gwm must be loaded in the .profile.gwm before any set-window,
; set-icon-window, set-placement, or set-icon-placement calls.  it should
; also follow loading of icon-groups.gwm if used.  (this probably isn't
; necessary but it seems to be programatically correct)
;
; be sure also to attach add-to-dvroom and remove-from-dvroom to some unused
; mouse button / keyboard modifier combinations.


; global dvroom variables
(setq dvroom-managers ())		; list of windows for dvroom managers
(setq current-dvroom ())		; index into dvroom-managers of the current dvroom

(defaults-to				; user-settable resources
  dvroom.font (font-make "8x13")
  dvroom.background white
  dvroom.foreground black
  dvroom.borderwidth borderwidth
  dvroom.x 0
  dvroom.y 0
  dvroom.name "Room #"
  edit-keys.return "Return"
  edit-keys.backspace "BackSpace"
  edit-keys.delete "Delete"
)

(defaults-to dvroom.name.number 0)

; save current iconify-window function
(if (not (boundp 'pre-dvrooms-iconify-window))
    (setq pre-dvrooms-iconify-window iconify-window))

; add w to the list of windows managed by a dvroom-manager
(defun add-to-dvroom-group (dvroom-manager w)
    (replace-nth 'rgroup dvroom-manager (+ (nth 'rgroup dvroom-manager) (list w))))

; remove w from the list of windows managed by a dvroom-manager
(defun remove-from-dvroom-group (dvroom-manager w)
    (with (slot (member w (nth 'rgroup dvroom-manager)))
	(if slot (delete-nth slot (nth 'rgroup dvroom-manager)))))

; a version of print that honors gwm-quiet
(defun qprint args
  (if (= gwm-quiet 0) (eval (+ '(print) args))))


; open all windows in a dvroom
; assumes "window" is the dvroom manager being opened
(defun open-dvroom ()
    (for window (nth 'rgroup window-window)
	; map the window if it was mapped, else map the icon
	(if (nth 'rgroup-state window)
	    (map-window window)
	    (map-window window-icon))))


; close all windows in a dvroom
; assumes "window" is the dvroom manager being closed
(defun close-dvroom ()
    (for window (nth 'rgroup window)
	; save window state - is it a window or an icon
	(replace-nth 'rgroup-state window window-is-mapped)
	; remove both windows and icons from the screen
	(if window-is-mapped (unmap-window window))
	(with (window window-icon)
	    (if window-is-mapped (unmap-window window)))))


; redefine iconify-window so we can do dvroom specific stuff
(defun iconify-window ()
    (if (= window-name "rmgr")
	; (de)iconifing a dvroom manager
	(if (= window-status 'window)

	    ; iconifing (closing) a dvroom manager
	    (progn
		(close-dvroom)
		(setq current-dvroom ())
		(pre-dvrooms-iconify-window)
	    )

	    ; deiconifing (opening) a dvroom manager
	    (with (rmgr-index (member window-window dvroom-managers))

		; close previous dvroom manager
		(if current-dvroom
		    (with (window (nth current-dvroom dvroom-managers))
			(if (= window-status 'window)
			    (iconify-window)		; recurse to close dvroom
			)
		    )
		)

		(if rmgr-index
		    ; existing dvroom manager
		    (open-dvroom)
		    ; register a new dvroom manager
		    (progn
			; save window-window as the manager may be iconic and
			; we need a consistent value in the dvroom-mgr list
			(setq dvroom-managers
				(+ dvroom-managers (list window-window)))
			(setq rmgr-index (member window-window dvroom-managers))
		    )
		)

		(setq current-dvroom rmgr-index)
		(pre-dvrooms-iconify-window)
	    )
	)

	; (de)iconifing other windows
	(progn
	    (pre-dvrooms-iconify-window)
	)
    )
)


; register a new dvroom manager
; (can be called when new windows become known to gwm (ie. via gwm global
; opening) so that dvroom managers are registered immediately)
; assumes "window" is the new dvroom manager
(defun add-dvroom-manager ()
    (if (= window-name "rmgr")
	(if (not (member window-window dvroom-managers))
	  (progn (qprint "new dvroom manager " window-icon-name "\n")
	    ; save window-window as the manager may be iconic and
	    ; we need a consistent value in the dvroom-mgr list
	    (setq dvroom-managers (+ dvroom-managers (list window-window))))))
	  )

; add add-dvroom-manager to progn of funcs to eval when opening a new window
; assumes dvroom.gwm is before the set-* calls in .profile.gwm
(setq opening (+ opening '((add-dvroom-manager))))

; add a window to a dvroom
; assumes "window" is the application window to add
(defun add-to-dvroom ()
    (with (window window-window)
	(if (and (= (type current-dvroom) 'number)
		 (not (= window-name "rmgr")))
	    (with (dvroom-manager (nth current-dvroom dvroom-managers))
		(if (not (member window (nth 'rgroup dvroom-manager)))
		    (progn (add-to-dvroom-group dvroom-manager window)
			   ; give the user *some* kind of feed back
			   (qprint "adding   <" window-name ">   to dvroom "
				(with (window dvroom-manager) window-icon-name)
				"\n")))))))


; remove a window from a dvroom
; assumes "window" is the application window to remove
(defun remove-from-dvroom ()
    (with (window window-window)
	(if (= (type current-dvroom) 'number)
	    (with (dvroom-manager (nth current-dvroom dvroom-managers))
		(if (member window (nth 'rgroup dvroom-manager))
		    ; give the user *some* kind of feed back
		    (qprint "removing <" window-name "> from dvroom "
			(with (window dvroom-manager) window-icon-name) "\n")
		    (qprint "not a dvroom member\n"))
		(remove-from-dvroom-group dvroom-manager window)))))


; if a normal window, remove it from any dvroom manager, but if a dvroom manager
; and not current, make all of the dvrooms windows visible in iconic form.
; (this function needs to be called when an application exits (ie. via gwm
; global closing) so that gwm won't try to operate on non-existant windows)
; assumes "window" is the application window that is exiting
(defun flush-dvroom-lists ()
    (for dvroom-manager dvroom-managers
	(remove-from-dvroom-group dvroom-manager window-window))
    (with (index (member window-window dvroom-managers))
	; if a dvroom manager
	(if index 
	    (progn
		(if (= current-dvroom index)
		    (setq current-dvroom ())
		    (progn
			(for window (nth 'rgroup window-window)
			    (map-window window-icon))
			(if (> current-dvroom index)
			    (setq current-dvroom (- current-dvroom 1)))))
		(delete-nth index dvroom-managers)))))

; add flush-dvroom-lists to progn of funcs to eval when closing an old window
; assumes dvroom.gwm is loaded before the set-* calls in .profile.gwm
(setq closing (+ closing '((flush-dvroom-lists))))

; colas: create dvroom managers as placed menus

(defun new-dvroom-manager args
  (with (fsm window-fsm
	     background dvroom.background foreground dvroom.foreground
	     borderwidth dvroom.borderwidth
	     direction vertical
	     name (if args (# 0 args) (new-dvroom-manager-name))
	     )
    (setq wob 
	  (with (icon-name name starts-iconic t)
		(place-menu
		 'rmgr
		 (menu-make
		  (bar-make
		   (with (fsm dvroom.fsm
			      property (+ (list 'title name) property))
			 (plug-make
			  (label-make name dvroom.font)))))
		 dvroom.x dvroom.y)))
    (## 'title wob name)
    (add-dvroom-manager))
))

; generates a new dvroom name
(defun new-dvroom-manager-name ()
  (setq dvroom.name.number (+ 1 dvroom.name.number))
  (+ dvroom.name (itoa dvroom.name.number)))

; editable plug fsm

(setq dvroom.fsm
      (fsm-make 
       (: dvroom.edit-fsm.normal 
	  (state-make
	   (on (double-button any any) 
	       (progn
		 (set-focus wob)
		 (wob-background dvroom.foreground)
		 (with (foreground dvroom.background)
		       (wob-tile 
			(active-label-make
			 (# 'title wob) dvroom.font))))
	       dvroom.edit-fsm.editable)
	   (on (button any (together with-alt with-control))
		   (progn
		     (set-focus wob)
		     (wob-background dvroom.foreground)
		     (with (foreground dvroom.background)
			   (wob-tile 
			    (active-label-make
			     (# 'title wob) dvroom.font))))
		   dvroom.edit-fsm.editable)
	   icon-behavior  
	   ))
       (: dvroom.edit-fsm.editable
	  (state-make
	   (on (keypress (key-make edit-keys.return) any)
	       (dvroom.edit-fsm.de-edit)
	       dvroom.edit-fsm.normal)
	   (on (double-button any any)
	       (dvroom.edit-fsm.de-edit)
	       dvroom.edit-fsm.normal)
	   (on (keypress edit-keys.backspace any)
	       (progn
		 (## 'title wob 
			    (if (: s (match "\\(.*\\)."
					(# 'title wob) 1))
				s
			      (setq s "")))
		 (with (foreground dvroom.background)
		       (wob-tile (active-label-make s dvroom.font)))
		 (send-user-event 'get-title (window-icon))
		 ))
	   (on (keypress edit-keys.delete any)
	       (progn
		 (## 'title wob (: s ""))
		 (with (foreground dvroom.background)
		       (wob-tile (active-label-make s dvroom.font)))
		 (send-user-event 'get-title (window-icon))
		 ))
	   (on (keypress any any)
	       (progn
		 (## 'title wob 
			    (: s (+ (# 'title wob) (last-key))))
		 (with (foreground dvroom.background)
		       (wob-tile (active-label-make s dvroom.font)))
		 (send-user-event 'get-title (window-icon))
		 ))
	   (on focus-out
	       (wob-tile (label-make (# 'title wob) dvroom.font))
	       dvroom.edit-fsm.normal)
	   icon-behavior
	   ))
       ))
))

(de dvroom.edit-fsm.de-edit ()
    (wob-tile (label-make (# 'title wob) dvroom.font))
    (set-focus))
